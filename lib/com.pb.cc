// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com.proto

#include "com.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR result::result(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.res_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct resultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR resultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~resultDefaultTypeInternal() {}
  union {
    result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 resultDefaultTypeInternal _result_default_instance_;
PROTOBUF_CONSTEXPR event_response::event_response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.event_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct event_responseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR event_responseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~event_responseDefaultTypeInternal() {}
  union {
    event_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 event_responseDefaultTypeInternal _event_response_default_instance_;
PROTOBUF_CONSTEXPR add_account_msg::add_account_msg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pesel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.account_)*/nullptr} {}
struct add_account_msgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR add_account_msgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~add_account_msgDefaultTypeInternal() {}
  union {
    add_account_msg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 add_account_msgDefaultTypeInternal _add_account_msg_default_instance_;
PROTOBUF_CONSTEXPR Empty::Empty(
    ::_pbi::ConstantInitialized) {}
struct EmptyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmptyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmptyDefaultTypeInternal() {}
  union {
    Empty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmptyDefaultTypeInternal _Empty_default_instance_;
PROTOBUF_CONSTEXPR schedule_request::schedule_request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.schedule_)*/nullptr
  , /*decltype(_impl_.patient_)*/nullptr
  , /*decltype(_impl_.event_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct schedule_requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR schedule_requestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~schedule_requestDefaultTypeInternal() {}
  union {
    schedule_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 schedule_requestDefaultTypeInternal _schedule_request_default_instance_;
PROTOBUF_CONSTEXPR account_request::account_request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct account_requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR account_requestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~account_requestDefaultTypeInternal() {}
  union {
    account_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 account_requestDefaultTypeInternal _account_request_default_instance_;
PROTOBUF_CONSTEXPR account_message::account_message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.familyname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct account_messageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR account_messageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~account_messageDefaultTypeInternal() {}
  union {
    account_message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 account_messageDefaultTypeInternal _account_message_default_instance_;
PROTOBUF_CONSTEXPR med_event_message::med_event_message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.describtion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.room_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/nullptr
  , /*decltype(_impl_.who_prescribed_)*/nullptr
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct med_event_messageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR med_event_messageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~med_event_messageDefaultTypeInternal() {}
  union {
    med_event_message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 med_event_messageDefaultTypeInternal _med_event_message_default_instance_;
PROTOBUF_CONSTEXPR exam_message::exam_message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.when_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.room_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_)*/nullptr
  , /*decltype(_impl_.who_performs_)*/nullptr
  , /*decltype(_impl_.result_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct exam_messageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR exam_messageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~exam_messageDefaultTypeInternal() {}
  union {
    exam_message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 exam_messageDefaultTypeInternal _exam_message_default_instance_;
PROTOBUF_CONSTEXPR ekg_res_message::ekg_res_message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_.rhytm_)*/0u
  , /*decltype(_impl_.pr_delay_)*/0u
  , /*decltype(_impl_.qrs_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ekg_res_messageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ekg_res_messageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ekg_res_messageDefaultTypeInternal() {}
  union {
    ekg_res_message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ekg_res_messageDefaultTypeInternal _ekg_res_message_default_instance_;
PROTOBUF_CONSTEXPR mor_res_message::mor_res_message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_.rbc_)*/0u
  , /*decltype(_impl_.hb_)*/0u
  , /*decltype(_impl_.wbc_)*/0u
  , /*decltype(_impl_.plt_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct mor_res_messageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR mor_res_messageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~mor_res_messageDefaultTypeInternal() {}
  union {
    mor_res_message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 mor_res_messageDefaultTypeInternal _mor_res_message_default_instance_;
PROTOBUF_CONSTEXPR mri_res_message::mri_res_message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct mri_res_messageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR mri_res_messageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~mri_res_messageDefaultTypeInternal() {}
  union {
    mri_res_message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 mri_res_messageDefaultTypeInternal _mri_res_message_default_instance_;
PROTOBUF_CONSTEXPR rtg_res_message::rtg_res_message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct rtg_res_messageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR rtg_res_messageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~rtg_res_messageDefaultTypeInternal() {}
  union {
    rtg_res_message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 rtg_res_messageDefaultTypeInternal _rtg_res_message_default_instance_;
PROTOBUF_CONSTEXPR usg_res_message::usg_res_message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct usg_res_messageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR usg_res_messageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~usg_res_messageDefaultTypeInternal() {}
  union {
    usg_res_message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 usg_res_messageDefaultTypeInternal _usg_res_message_default_instance_;
PROTOBUF_CONSTEXPR patient_message::patient_message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pesel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.city_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.street_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.postcode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.birthdate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.username_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct patient_messageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR patient_messageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~patient_messageDefaultTypeInternal() {}
  union {
    patient_message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 patient_messageDefaultTypeInternal _patient_message_default_instance_;
PROTOBUF_CONSTEXPR prescribtion_message::prescribtion_message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.medicine_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dose_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.exp_date_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct prescribtion_messageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR prescribtion_messageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~prescribtion_messageDefaultTypeInternal() {}
  union {
    prescribtion_message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 prescribtion_messageDefaultTypeInternal _prescribtion_message_default_instance_;
PROTOBUF_CONSTEXPR procedure_message::procedure_message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.when_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.room_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_)*/nullptr
  , /*decltype(_impl_.who_performs_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct procedure_messageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR procedure_messageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~procedure_messageDefaultTypeInternal() {}
  union {
    procedure_message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 procedure_messageDefaultTypeInternal _procedure_message_default_instance_;
PROTOBUF_CONSTEXPR schedule_message::schedule_message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_.start_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.end_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.room_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.who_)*/nullptr
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct schedule_messageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR schedule_messageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~schedule_messageDefaultTypeInternal() {}
  union {
    schedule_message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 schedule_messageDefaultTypeInternal _schedule_message_default_instance_;
static ::_pb::Metadata file_level_metadata_com_2eproto[18];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_com_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_com_2eproto = nullptr;

const uint32_t TableStruct_com_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::result, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::result, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::result, _impl_.res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_response, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_response, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::event_response, _impl_.event_),
  PROTOBUF_FIELD_OFFSET(::add_account_msg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::add_account_msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::add_account_msg, _impl_.account_),
  PROTOBUF_FIELD_OFFSET(::add_account_msg, _impl_.pesel_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedule_request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::schedule_request, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::schedule_request, _impl_.schedule_),
  PROTOBUF_FIELD_OFFSET(::schedule_request, _impl_.patient_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::schedule_request, _impl_.event_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::account_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::account_request, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::account_request, _impl_.password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::account_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::account_message, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::account_message, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::account_message, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::account_message, _impl_.familyname_),
  PROTOBUF_FIELD_OFFSET(::account_message, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::med_event_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::med_event_message, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::med_event_message, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::med_event_message, _impl_.describtion_),
  PROTOBUF_FIELD_OFFSET(::med_event_message, _impl_.room_),
  PROTOBUF_FIELD_OFFSET(::med_event_message, _impl_.who_prescribed_),
  PROTOBUF_FIELD_OFFSET(::med_event_message, _impl_.time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::exam_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::exam_message, _impl_.event_),
  PROTOBUF_FIELD_OFFSET(::exam_message, _impl_.who_performs_),
  PROTOBUF_FIELD_OFFSET(::exam_message, _impl_.when_),
  PROTOBUF_FIELD_OFFSET(::exam_message, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::exam_message, _impl_.room_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ekg_res_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ekg_res_message, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::ekg_res_message, _impl_.rhytm_),
  PROTOBUF_FIELD_OFFSET(::ekg_res_message, _impl_.pr_delay_),
  PROTOBUF_FIELD_OFFSET(::ekg_res_message, _impl_.qrs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mor_res_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mor_res_message, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::mor_res_message, _impl_.rbc_),
  PROTOBUF_FIELD_OFFSET(::mor_res_message, _impl_.hb_),
  PROTOBUF_FIELD_OFFSET(::mor_res_message, _impl_.wbc_),
  PROTOBUF_FIELD_OFFSET(::mor_res_message, _impl_.plt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mri_res_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mri_res_message, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::mri_res_message, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtg_res_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtg_res_message, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::rtg_res_message, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::usg_res_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::usg_res_message, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::usg_res_message, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::patient_message, _impl_.pesel_),
  PROTOBUF_FIELD_OFFSET(::patient_message, _impl_.city_),
  PROTOBUF_FIELD_OFFSET(::patient_message, _impl_.street_),
  PROTOBUF_FIELD_OFFSET(::patient_message, _impl_.postcode_),
  PROTOBUF_FIELD_OFFSET(::patient_message, _impl_.birthdate_),
  PROTOBUF_FIELD_OFFSET(::patient_message, _impl_.username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::prescribtion_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::prescribtion_message, _impl_.event_),
  PROTOBUF_FIELD_OFFSET(::prescribtion_message, _impl_.medicine_),
  PROTOBUF_FIELD_OFFSET(::prescribtion_message, _impl_.dose_),
  PROTOBUF_FIELD_OFFSET(::prescribtion_message, _impl_.exp_date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::procedure_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::procedure_message, _impl_.event_),
  PROTOBUF_FIELD_OFFSET(::procedure_message, _impl_.who_performs_),
  PROTOBUF_FIELD_OFFSET(::procedure_message, _impl_.when_),
  PROTOBUF_FIELD_OFFSET(::procedure_message, _impl_.room_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedule_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::schedule_message, _impl_.who_),
  PROTOBUF_FIELD_OFFSET(::schedule_message, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::schedule_message, _impl_.start_),
  PROTOBUF_FIELD_OFFSET(::schedule_message, _impl_.end_),
  PROTOBUF_FIELD_OFFSET(::schedule_message, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::schedule_message, _impl_.room_),
  PROTOBUF_FIELD_OFFSET(::schedule_message, _impl_.events_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::result)},
  { 10, -1, -1, sizeof(::event_response)},
  { 20, 28, -1, sizeof(::add_account_msg)},
  { 30, -1, -1, sizeof(::Empty)},
  { 36, -1, -1, sizeof(::schedule_request)},
  { 48, -1, -1, sizeof(::account_request)},
  { 56, -1, -1, sizeof(::account_message)},
  { 67, -1, -1, sizeof(::med_event_message)},
  { 79, -1, -1, sizeof(::exam_message)},
  { 90, -1, -1, sizeof(::ekg_res_message)},
  { 100, -1, -1, sizeof(::mor_res_message)},
  { 111, -1, -1, sizeof(::mri_res_message)},
  { 119, -1, -1, sizeof(::rtg_res_message)},
  { 127, -1, -1, sizeof(::usg_res_message)},
  { 135, -1, -1, sizeof(::patient_message)},
  { 147, -1, -1, sizeof(::prescribtion_message)},
  { 157, -1, -1, sizeof(::procedure_message)},
  { 167, -1, -1, sizeof(::schedule_message)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_result_default_instance_._instance,
  &::_event_response_default_instance_._instance,
  &::_add_account_msg_default_instance_._instance,
  &::_Empty_default_instance_._instance,
  &::_schedule_request_default_instance_._instance,
  &::_account_request_default_instance_._instance,
  &::_account_message_default_instance_._instance,
  &::_med_event_message_default_instance_._instance,
  &::_exam_message_default_instance_._instance,
  &::_ekg_res_message_default_instance_._instance,
  &::_mor_res_message_default_instance_._instance,
  &::_mri_res_message_default_instance_._instance,
  &::_rtg_res_message_default_instance_._instance,
  &::_usg_res_message_default_instance_._instance,
  &::_patient_message_default_instance_._instance,
  &::_prescribtion_message_default_instance_._instance,
  &::_procedure_message_default_instance_._instance,
  &::_schedule_message_default_instance_._instance,
};

const char descriptor_table_protodef_com_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tcom.proto\"s\n\006result\022\037\n\003ekg\030\001 \001(\0132\020.ekg"
  "_res_messageH\000\022\037\n\003mor\030\002 \001(\0132\020.mor_res_me"
  "ssageH\000\022 \n\004rest\030\003 \001(\0132\020.rtg_res_messageH"
  "\000B\005\n\003res\"\203\001\n\016event_response\022\035\n\004exam\030\001 \001("
  "\0132\r.exam_messageH\000\022\"\n\004proc\030\002 \001(\0132\022.proce"
  "dure_messageH\000\022%\n\004pres\030\003 \001(\0132\025.prescribt"
  "ion_messageH\000B\007\n\005event\"R\n\017add_account_ms"
  "g\022!\n\007account\030\001 \001(\0132\020.account_message\022\022\n\005"
  "pesel\030\002 \001(\tH\000\210\001\001B\010\n\006_pesel\"\007\n\005Empty\"\313\001\n\020"
  "schedule_request\022#\n\010schedule\030\001 \001(\0132\021.sch"
  "edule_message\022!\n\007patient\030\002 \001(\0132\020.patient"
  "_message\022#\n\005visit\030\003 \001(\0132\022.med_event_mess"
  "ageH\000\022\035\n\004exam\030\004 \001(\0132\r.exam_messageH\000\022\"\n\004"
  "proc\030\005 \001(\0132\022.procedure_messageH\000B\007\n\005even"
  "t\"5\n\017account_request\022\020\n\010username\030\001 \001(\t\022\020"
  "\n\010password\030\002 \001(\t\"e\n\017account_message\022\020\n\010u"
  "sername\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\022\014\n\004name\030"
  "\003 \001(\t\022\022\n\nfamilyname\030\004 \001(\t\022\014\n\004type\030\005 \001(\t\""
  "\232\001\n\021med_event_message\022\n\n\002id\030\001 \001(\004\022\036\n\004nam"
  "e\030\002 \001(\0132\020.patient_message\022\023\n\013describtion"
  "\030\003 \001(\t\022\014\n\004room\030\004 \001(\t\022(\n\016who_prescribed\030\005"
  " \001(\0132\020.account_message\022\014\n\004time\030\006 \001(\t\"\210\001\n"
  "\014exam_message\022!\n\005event\030\001 \001(\0132\022.med_event"
  "_message\022&\n\014who_performs\030\002 \001(\0132\020.account"
  "_message\022\014\n\004when\030\003 \001(\t\022\021\n\tresult_id\030\004 \001("
  "\004\022\014\n\004room\030\005 \001(\t\"a\n\017ekg_res_message\022 \n\tre"
  "sult_id\030\001 \001(\0132\r.exam_message\022\r\n\005rhytm\030\002 "
  "\001(\r\022\020\n\010pr_delay\030\003 \001(\r\022\013\n\003qrs\030\004 \001(\r\"f\n\017mo"
  "r_res_message\022 \n\tresult_id\030\001 \001(\0132\r.exam_"
  "message\022\013\n\003rbc\030\002 \001(\r\022\n\n\002hb\030\003 \001(\r\022\013\n\003wbc\030"
  "\004 \001(\r\022\013\n\003plt\030\005 \001(\r\"C\n\017mri_res_message\022 \n"
  "\tresult_id\030\001 \001(\0132\r.exam_message\022\016\n\006resul"
  "t\030\002 \001(\t\"C\n\017rtg_res_message\022 \n\tresult_id\030"
  "\001 \001(\0132\r.exam_message\022\016\n\006result\030\002 \001(\t\"C\n\017"
  "usg_res_message\022 \n\tresult_id\030\001 \001(\0132\r.exa"
  "m_message\022\016\n\006result\030\002 \001(\t\"\207\001\n\017patient_me"
  "ssage\022\r\n\005pesel\030\001 \001(\t\022\014\n\004city\030\002 \001(\t\022\016\n\006st"
  "reet\030\003 \001(\t\022\020\n\010postcode\030\004 \001(\t\022\021\n\tbirthdat"
  "e\030\005 \001(\t\022\"\n\010username\030\006 \001(\0132\020.account_mess"
  "age\"k\n\024prescribtion_message\022!\n\005event\030\001 \001"
  "(\0132\022.med_event_message\022\020\n\010medicine\030\002 \001(\t"
  "\022\014\n\004dose\030\003 \001(\t\022\020\n\010exp_date\030\004 \001(\t\"z\n\021proc"
  "edure_message\022!\n\005event\030\001 \001(\0132\022.med_event"
  "_message\022&\n\014who_performs\030\002 \001(\0132\020.account"
  "_message\022\014\n\004when\030\003 \001(\t\022\014\n\004room\030\004 \001(\t\"\231\001\n"
  "\020schedule_message\022\035\n\003who\030\001 \001(\0132\020.account"
  "_message\022\n\n\002id\030\002 \001(\004\022\r\n\005start\030\003 \001(\t\022\013\n\003e"
  "nd\030\004 \001(\t\022\014\n\004type\030\005 \001(\t\022\014\n\004room\030\006 \001(\t\022\"\n\006"
  "events\030\007 \003(\0132\022.med_event_message2\371\r\n\031Cli"
  "entServerCommunication\0226\n\020SearchForAccou"
  "nt\022\020.account_request\032\020.account_message\022-"
  "\n\021UpdatePatientData\022\020.patient_message\032\006."
  "Empty\0226\n\020SearchForPatient\022\020.patient_mess"
  "age\032\020.patient_message\0229\n\021SearchForPatien"
  "ts\022\020.patient_message\032\020.patient_message0\001"
  "\0227\n\rGetNextVisits\022\020.patient_message\032\022.me"
  "d_event_message0\001\022=\n\020GetPrescribtions\022\020."
  "patient_message\032\025.prescribtion_message0\001"
  "\022,\n\007GetExam\022\020.patient_message\032\r.exam_mes"
  "sage0\001\0226\n\014GetProcedure\022\020.patient_message"
  "\032\022.procedure_message0\001\022=\n\022GetAvailableVi"
  "sits\022\022.med_event_message\032\021.schedule_mess"
  "age0\001\0227\n\021GetAvailableExams\022\r.exam_messag"
  "e\032\021.schedule_message0\001\022<\n\021GetAvailablePr"
  "ocs\022\022.procedure_message\032\021.schedule_messa"
  "ge0\001\022*\n\rScheduleEvent\022\021.schedule_request"
  "\032\006.Empty\0225\n\013GetReferals\022\020.patient_messag"
  "e\032\022.med_event_message0\001\022(\n\nGetDoctors\022\006."
  "Empty\032\020.account_message0\001\0225\n\014GetSchedule"
  "s\022\020.account_message\032\021.schedule_message0\001"
  "\022&\n\nAddAccount\022\020.add_account_msg\032\006.Empty"
  "\022)\n\rResetPassword\022\020.account_message\032\006.Em"
  "pty\022)\n\rDeleteAccount\022\020.account_message\032\006"
  ".Empty\022(\n\013AddSchedule\022\021.schedule_message"
  "\032\006.Empty\022+\n\016DeleteSchedule\022\021.schedule_me"
  "ssage\032\006.Empty\022)\n\013GetAccounts\022\006.Empty\032\020.a"
  "ccount_message0\001\022<\n\022GetPatientsHistory\022\020"
  ".account_message\032\022.med_event_message0\001\0227"
  "\n\020GetPatientsEvent\022\022.med_event_message\032\017"
  ".event_response\022;\n\021GetPatientsEvents\022\020.a"
  "ccount_message\032\022.med_event_message0\001\022C\n\026"
  "GetPatientPrescribtion\022\020.account_message"
  "\032\025.prescribtion_message0\001\022(\n\016GetExamResu"
  "lts\022\r.exam_message\032\007.result\022;\n\022GetDoctor"
  "Schedules\022\020.account_message\032\021.schedule_m"
  "essage0\001\022=\n\022GetScheduledEvents\022\021.schedul"
  "e_message\032\022.med_event_message0\001\022=\n\024GetSc"
  "heduledPatients\022\021.schedule_message\032\020.pat"
  "ient_message0\001\022(\n\nNewReferal\022\022.med_event"
  "_message\032\006.Empty\0220\n\017NewPrescribtion\022\025.pr"
  "escribtion_message\032\006.Empty\022\'\n\tEventDone\022"
  "\022.med_event_message\032\006.Empty\022)\n\014ScheduleD"
  "one\022\021.schedule_message\032\006.Empty\022\034\n\tAddRes"
  "ult\022\007.result\032\006.Emptyb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_com_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_com_2eproto = {
    false, false, 3748, descriptor_table_protodef_com_2eproto,
    "com.proto",
    &descriptor_table_com_2eproto_once, nullptr, 0, 18,
    schemas, file_default_instances, TableStruct_com_2eproto::offsets,
    file_level_metadata_com_2eproto, file_level_enum_descriptors_com_2eproto,
    file_level_service_descriptors_com_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_com_2eproto_getter() {
  return &descriptor_table_com_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_com_2eproto(&descriptor_table_com_2eproto);

// ===================================================================

class result::_Internal {
 public:
  static const ::ekg_res_message& ekg(const result* msg);
  static const ::mor_res_message& mor(const result* msg);
  static const ::rtg_res_message& rest(const result* msg);
};

const ::ekg_res_message&
result::_Internal::ekg(const result* msg) {
  return *msg->_impl_.res_.ekg_;
}
const ::mor_res_message&
result::_Internal::mor(const result* msg) {
  return *msg->_impl_.res_.mor_;
}
const ::rtg_res_message&
result::_Internal::rest(const result* msg) {
  return *msg->_impl_.res_.rest_;
}
void result::set_allocated_ekg(::ekg_res_message* ekg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_res();
  if (ekg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ekg);
    if (message_arena != submessage_arena) {
      ekg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ekg, submessage_arena);
    }
    set_has_ekg();
    _impl_.res_.ekg_ = ekg;
  }
  // @@protoc_insertion_point(field_set_allocated:result.ekg)
}
void result::set_allocated_mor(::mor_res_message* mor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_res();
  if (mor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mor);
    if (message_arena != submessage_arena) {
      mor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mor, submessage_arena);
    }
    set_has_mor();
    _impl_.res_.mor_ = mor;
  }
  // @@protoc_insertion_point(field_set_allocated:result.mor)
}
void result::set_allocated_rest(::rtg_res_message* rest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_res();
  if (rest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rest);
    if (message_arena != submessage_arena) {
      rest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rest, submessage_arena);
    }
    set_has_rest();
    _impl_.res_.rest_ = rest;
  }
  // @@protoc_insertion_point(field_set_allocated:result.rest)
}
result::result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:result)
}
result::result(const result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  result* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.res_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_res();
  switch (from.res_case()) {
    case kEkg: {
      _this->_internal_mutable_ekg()->::ekg_res_message::MergeFrom(
          from._internal_ekg());
      break;
    }
    case kMor: {
      _this->_internal_mutable_mor()->::mor_res_message::MergeFrom(
          from._internal_mor());
      break;
    }
    case kRest: {
      _this->_internal_mutable_rest()->::rtg_res_message::MergeFrom(
          from._internal_rest());
      break;
    }
    case RES_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:result)
}

inline void result::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.res_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_res();
}

result::~result() {
  // @@protoc_insertion_point(destructor:result)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_res()) {
    clear_res();
  }
}

void result::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void result::clear_res() {
// @@protoc_insertion_point(one_of_clear_start:result)
  switch (res_case()) {
    case kEkg: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.res_.ekg_;
      }
      break;
    }
    case kMor: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.res_.mor_;
      }
      break;
    }
    case kRest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.res_.rest_;
      }
      break;
    }
    case RES_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RES_NOT_SET;
}


void result::Clear() {
// @@protoc_insertion_point(message_clear_start:result)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_res();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* result::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ekg_res_message ekg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ekg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mor_res_message mor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rtg_res_message rest = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* result::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:result)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ekg_res_message ekg = 1;
  if (_internal_has_ekg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ekg(this),
        _Internal::ekg(this).GetCachedSize(), target, stream);
  }

  // .mor_res_message mor = 2;
  if (_internal_has_mor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::mor(this),
        _Internal::mor(this).GetCachedSize(), target, stream);
  }

  // .rtg_res_message rest = 3;
  if (_internal_has_rest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::rest(this),
        _Internal::rest(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:result)
  return target;
}

size_t result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:result)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (res_case()) {
    // .ekg_res_message ekg = 1;
    case kEkg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.res_.ekg_);
      break;
    }
    // .mor_res_message mor = 2;
    case kMor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.res_.mor_);
      break;
    }
    // .rtg_res_message rest = 3;
    case kRest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.res_.rest_);
      break;
    }
    case RES_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*result::GetClassData() const { return &_class_data_; }


void result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<result*>(&to_msg);
  auto& from = static_cast<const result&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:result)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.res_case()) {
    case kEkg: {
      _this->_internal_mutable_ekg()->::ekg_res_message::MergeFrom(
          from._internal_ekg());
      break;
    }
    case kMor: {
      _this->_internal_mutable_mor()->::mor_res_message::MergeFrom(
          from._internal_mor());
      break;
    }
    case kRest: {
      _this->_internal_mutable_rest()->::rtg_res_message::MergeFrom(
          from._internal_rest());
      break;
    }
    case RES_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void result::CopyFrom(const result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool result::IsInitialized() const {
  return true;
}

void result::InternalSwap(result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.res_, other->_impl_.res_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata result::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_2eproto_getter, &descriptor_table_com_2eproto_once,
      file_level_metadata_com_2eproto[0]);
}

// ===================================================================

class event_response::_Internal {
 public:
  static const ::exam_message& exam(const event_response* msg);
  static const ::procedure_message& proc(const event_response* msg);
  static const ::prescribtion_message& pres(const event_response* msg);
};

const ::exam_message&
event_response::_Internal::exam(const event_response* msg) {
  return *msg->_impl_.event_.exam_;
}
const ::procedure_message&
event_response::_Internal::proc(const event_response* msg) {
  return *msg->_impl_.event_.proc_;
}
const ::prescribtion_message&
event_response::_Internal::pres(const event_response* msg) {
  return *msg->_impl_.event_.pres_;
}
void event_response::set_allocated_exam(::exam_message* exam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (exam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(exam);
    if (message_arena != submessage_arena) {
      exam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exam, submessage_arena);
    }
    set_has_exam();
    _impl_.event_.exam_ = exam;
  }
  // @@protoc_insertion_point(field_set_allocated:event_response.exam)
}
void event_response::set_allocated_proc(::procedure_message* proc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (proc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(proc);
    if (message_arena != submessage_arena) {
      proc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proc, submessage_arena);
    }
    set_has_proc();
    _impl_.event_.proc_ = proc;
  }
  // @@protoc_insertion_point(field_set_allocated:event_response.proc)
}
void event_response::set_allocated_pres(::prescribtion_message* pres) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (pres) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pres);
    if (message_arena != submessage_arena) {
      pres = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pres, submessage_arena);
    }
    set_has_pres();
    _impl_.event_.pres_ = pres;
  }
  // @@protoc_insertion_point(field_set_allocated:event_response.pres)
}
event_response::event_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:event_response)
}
event_response::event_response(const event_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  event_response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.event_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_event();
  switch (from.event_case()) {
    case kExam: {
      _this->_internal_mutable_exam()->::exam_message::MergeFrom(
          from._internal_exam());
      break;
    }
    case kProc: {
      _this->_internal_mutable_proc()->::procedure_message::MergeFrom(
          from._internal_proc());
      break;
    }
    case kPres: {
      _this->_internal_mutable_pres()->::prescribtion_message::MergeFrom(
          from._internal_pres());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_response)
}

inline void event_response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.event_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_event();
}

event_response::~event_response() {
  // @@protoc_insertion_point(destructor:event_response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void event_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_event()) {
    clear_event();
  }
}

void event_response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void event_response::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:event_response)
  switch (event_case()) {
    case kExam: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.exam_;
      }
      break;
    }
    case kProc: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.proc_;
      }
      break;
    }
    case kPres: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.pres_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EVENT_NOT_SET;
}


void event_response::Clear() {
// @@protoc_insertion_point(message_clear_start:event_response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_event();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* event_response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .exam_message exam = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_exam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .procedure_message proc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_proc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .prescribtion_message pres = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pres(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* event_response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .exam_message exam = 1;
  if (_internal_has_exam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::exam(this),
        _Internal::exam(this).GetCachedSize(), target, stream);
  }

  // .procedure_message proc = 2;
  if (_internal_has_proc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::proc(this),
        _Internal::proc(this).GetCachedSize(), target, stream);
  }

  // .prescribtion_message pres = 3;
  if (_internal_has_pres()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pres(this),
        _Internal::pres(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_response)
  return target;
}

size_t event_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (event_case()) {
    // .exam_message exam = 1;
    case kExam: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.exam_);
      break;
    }
    // .procedure_message proc = 2;
    case kProc: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.proc_);
      break;
    }
    // .prescribtion_message pres = 3;
    case kPres: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.pres_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData event_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    event_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*event_response::GetClassData() const { return &_class_data_; }


void event_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<event_response*>(&to_msg);
  auto& from = static_cast<const event_response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:event_response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.event_case()) {
    case kExam: {
      _this->_internal_mutable_exam()->::exam_message::MergeFrom(
          from._internal_exam());
      break;
    }
    case kProc: {
      _this->_internal_mutable_proc()->::procedure_message::MergeFrom(
          from._internal_proc());
      break;
    }
    case kPres: {
      _this->_internal_mutable_pres()->::prescribtion_message::MergeFrom(
          from._internal_pres());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void event_response::CopyFrom(const event_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool event_response::IsInitialized() const {
  return true;
}

void event_response::InternalSwap(event_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.event_, other->_impl_.event_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata event_response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_2eproto_getter, &descriptor_table_com_2eproto_once,
      file_level_metadata_com_2eproto[1]);
}

// ===================================================================

class add_account_msg::_Internal {
 public:
  using HasBits = decltype(std::declval<add_account_msg>()._impl_._has_bits_);
  static const ::account_message& account(const add_account_msg* msg);
  static void set_has_pesel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::account_message&
add_account_msg::_Internal::account(const add_account_msg* msg) {
  return *msg->_impl_.account_;
}
add_account_msg::add_account_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:add_account_msg)
}
add_account_msg::add_account_msg(const add_account_msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  add_account_msg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pesel_){}
    , decltype(_impl_.account_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pesel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pesel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pesel()) {
    _this->_impl_.pesel_.Set(from._internal_pesel(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_account()) {
    _this->_impl_.account_ = new ::account_message(*from._impl_.account_);
  }
  // @@protoc_insertion_point(copy_constructor:add_account_msg)
}

inline void add_account_msg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pesel_){}
    , decltype(_impl_.account_){nullptr}
  };
  _impl_.pesel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pesel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

add_account_msg::~add_account_msg() {
  // @@protoc_insertion_point(destructor:add_account_msg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void add_account_msg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pesel_.Destroy();
  if (this != internal_default_instance()) delete _impl_.account_;
}

void add_account_msg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void add_account_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:add_account_msg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.pesel_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && _impl_.account_ != nullptr) {
    delete _impl_.account_;
  }
  _impl_.account_ = nullptr;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* add_account_msg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .account_message account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string pesel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pesel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "add_account_msg.pesel"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* add_account_msg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:add_account_msg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .account_message account = 1;
  if (this->_internal_has_account()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::account(this),
        _Internal::account(this).GetCachedSize(), target, stream);
  }

  // optional string pesel = 2;
  if (_internal_has_pesel()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pesel().data(), static_cast<int>(this->_internal_pesel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "add_account_msg.pesel");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pesel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:add_account_msg)
  return target;
}

size_t add_account_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:add_account_msg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string pesel = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pesel());
  }

  // .account_message account = 1;
  if (this->_internal_has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.account_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData add_account_msg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    add_account_msg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*add_account_msg::GetClassData() const { return &_class_data_; }


void add_account_msg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<add_account_msg*>(&to_msg);
  auto& from = static_cast<const add_account_msg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:add_account_msg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pesel()) {
    _this->_internal_set_pesel(from._internal_pesel());
  }
  if (from._internal_has_account()) {
    _this->_internal_mutable_account()->::account_message::MergeFrom(
        from._internal_account());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void add_account_msg::CopyFrom(const add_account_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:add_account_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool add_account_msg::IsInitialized() const {
  return true;
}

void add_account_msg::InternalSwap(add_account_msg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pesel_, lhs_arena,
      &other->_impl_.pesel_, rhs_arena
  );
  swap(_impl_.account_, other->_impl_.account_);
}

::PROTOBUF_NAMESPACE_ID::Metadata add_account_msg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_2eproto_getter, &descriptor_table_com_2eproto_once,
      file_level_metadata_com_2eproto[2]);
}

// ===================================================================

class Empty::_Internal {
 public:
};

Empty::Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Empty)
}
Empty::Empty(const Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Empty* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Empty)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Empty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Empty::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Empty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_2eproto_getter, &descriptor_table_com_2eproto_once,
      file_level_metadata_com_2eproto[3]);
}

// ===================================================================

class schedule_request::_Internal {
 public:
  static const ::schedule_message& schedule(const schedule_request* msg);
  static const ::patient_message& patient(const schedule_request* msg);
  static const ::med_event_message& visit(const schedule_request* msg);
  static const ::exam_message& exam(const schedule_request* msg);
  static const ::procedure_message& proc(const schedule_request* msg);
};

const ::schedule_message&
schedule_request::_Internal::schedule(const schedule_request* msg) {
  return *msg->_impl_.schedule_;
}
const ::patient_message&
schedule_request::_Internal::patient(const schedule_request* msg) {
  return *msg->_impl_.patient_;
}
const ::med_event_message&
schedule_request::_Internal::visit(const schedule_request* msg) {
  return *msg->_impl_.event_.visit_;
}
const ::exam_message&
schedule_request::_Internal::exam(const schedule_request* msg) {
  return *msg->_impl_.event_.exam_;
}
const ::procedure_message&
schedule_request::_Internal::proc(const schedule_request* msg) {
  return *msg->_impl_.event_.proc_;
}
void schedule_request::set_allocated_visit(::med_event_message* visit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (visit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(visit);
    if (message_arena != submessage_arena) {
      visit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visit, submessage_arena);
    }
    set_has_visit();
    _impl_.event_.visit_ = visit;
  }
  // @@protoc_insertion_point(field_set_allocated:schedule_request.visit)
}
void schedule_request::set_allocated_exam(::exam_message* exam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (exam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(exam);
    if (message_arena != submessage_arena) {
      exam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exam, submessage_arena);
    }
    set_has_exam();
    _impl_.event_.exam_ = exam;
  }
  // @@protoc_insertion_point(field_set_allocated:schedule_request.exam)
}
void schedule_request::set_allocated_proc(::procedure_message* proc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (proc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(proc);
    if (message_arena != submessage_arena) {
      proc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proc, submessage_arena);
    }
    set_has_proc();
    _impl_.event_.proc_ = proc;
  }
  // @@protoc_insertion_point(field_set_allocated:schedule_request.proc)
}
schedule_request::schedule_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:schedule_request)
}
schedule_request::schedule_request(const schedule_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  schedule_request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.schedule_){nullptr}
    , decltype(_impl_.patient_){nullptr}
    , decltype(_impl_.event_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_schedule()) {
    _this->_impl_.schedule_ = new ::schedule_message(*from._impl_.schedule_);
  }
  if (from._internal_has_patient()) {
    _this->_impl_.patient_ = new ::patient_message(*from._impl_.patient_);
  }
  clear_has_event();
  switch (from.event_case()) {
    case kVisit: {
      _this->_internal_mutable_visit()->::med_event_message::MergeFrom(
          from._internal_visit());
      break;
    }
    case kExam: {
      _this->_internal_mutable_exam()->::exam_message::MergeFrom(
          from._internal_exam());
      break;
    }
    case kProc: {
      _this->_internal_mutable_proc()->::procedure_message::MergeFrom(
          from._internal_proc());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:schedule_request)
}

inline void schedule_request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.schedule_){nullptr}
    , decltype(_impl_.patient_){nullptr}
    , decltype(_impl_.event_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_event();
}

schedule_request::~schedule_request() {
  // @@protoc_insertion_point(destructor:schedule_request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void schedule_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.schedule_;
  if (this != internal_default_instance()) delete _impl_.patient_;
  if (has_event()) {
    clear_event();
  }
}

void schedule_request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void schedule_request::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:schedule_request)
  switch (event_case()) {
    case kVisit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.visit_;
      }
      break;
    }
    case kExam: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.exam_;
      }
      break;
    }
    case kProc: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.proc_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EVENT_NOT_SET;
}


void schedule_request::Clear() {
// @@protoc_insertion_point(message_clear_start:schedule_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.schedule_ != nullptr) {
    delete _impl_.schedule_;
  }
  _impl_.schedule_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.patient_ != nullptr) {
    delete _impl_.patient_;
  }
  _impl_.patient_ = nullptr;
  clear_event();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* schedule_request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .schedule_message schedule = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_schedule(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .patient_message patient = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_patient(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .med_event_message visit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_visit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .exam_message exam = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_exam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .procedure_message proc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_proc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* schedule_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedule_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedule_message schedule = 1;
  if (this->_internal_has_schedule()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::schedule(this),
        _Internal::schedule(this).GetCachedSize(), target, stream);
  }

  // .patient_message patient = 2;
  if (this->_internal_has_patient()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::patient(this),
        _Internal::patient(this).GetCachedSize(), target, stream);
  }

  // .med_event_message visit = 3;
  if (_internal_has_visit()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::visit(this),
        _Internal::visit(this).GetCachedSize(), target, stream);
  }

  // .exam_message exam = 4;
  if (_internal_has_exam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::exam(this),
        _Internal::exam(this).GetCachedSize(), target, stream);
  }

  // .procedure_message proc = 5;
  if (_internal_has_proc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::proc(this),
        _Internal::proc(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedule_request)
  return target;
}

size_t schedule_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedule_request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .schedule_message schedule = 1;
  if (this->_internal_has_schedule()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.schedule_);
  }

  // .patient_message patient = 2;
  if (this->_internal_has_patient()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.patient_);
  }

  switch (event_case()) {
    // .med_event_message visit = 3;
    case kVisit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.visit_);
      break;
    }
    // .exam_message exam = 4;
    case kExam: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.exam_);
      break;
    }
    // .procedure_message proc = 5;
    case kProc: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.proc_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData schedule_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    schedule_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*schedule_request::GetClassData() const { return &_class_data_; }


void schedule_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<schedule_request*>(&to_msg);
  auto& from = static_cast<const schedule_request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:schedule_request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_schedule()) {
    _this->_internal_mutable_schedule()->::schedule_message::MergeFrom(
        from._internal_schedule());
  }
  if (from._internal_has_patient()) {
    _this->_internal_mutable_patient()->::patient_message::MergeFrom(
        from._internal_patient());
  }
  switch (from.event_case()) {
    case kVisit: {
      _this->_internal_mutable_visit()->::med_event_message::MergeFrom(
          from._internal_visit());
      break;
    }
    case kExam: {
      _this->_internal_mutable_exam()->::exam_message::MergeFrom(
          from._internal_exam());
      break;
    }
    case kProc: {
      _this->_internal_mutable_proc()->::procedure_message::MergeFrom(
          from._internal_proc());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void schedule_request::CopyFrom(const schedule_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedule_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool schedule_request::IsInitialized() const {
  return true;
}

void schedule_request::InternalSwap(schedule_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(schedule_request, _impl_.patient_)
      + sizeof(schedule_request::_impl_.patient_)
      - PROTOBUF_FIELD_OFFSET(schedule_request, _impl_.schedule_)>(
          reinterpret_cast<char*>(&_impl_.schedule_),
          reinterpret_cast<char*>(&other->_impl_.schedule_));
  swap(_impl_.event_, other->_impl_.event_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata schedule_request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_2eproto_getter, &descriptor_table_com_2eproto_once,
      file_level_metadata_com_2eproto[4]);
}

// ===================================================================

class account_request::_Internal {
 public:
};

account_request::account_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:account_request)
}
account_request::account_request(const account_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  account_request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:account_request)
}

inline void account_request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

account_request::~account_request() {
  // @@protoc_insertion_point(destructor:account_request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void account_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
  _impl_.password_.Destroy();
}

void account_request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void account_request::Clear() {
// @@protoc_insertion_point(message_clear_start:account_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* account_request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "account_request.username"));
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "account_request.password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* account_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:account_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "account_request.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "account_request.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:account_request)
  return target;
}

size_t account_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:account_request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData account_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    account_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*account_request::GetClassData() const { return &_class_data_; }


void account_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<account_request*>(&to_msg);
  auto& from = static_cast<const account_request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:account_request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void account_request::CopyFrom(const account_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:account_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool account_request::IsInitialized() const {
  return true;
}

void account_request::InternalSwap(account_request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata account_request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_2eproto_getter, &descriptor_table_com_2eproto_once,
      file_level_metadata_com_2eproto[5]);
}

// ===================================================================

class account_message::_Internal {
 public:
};

account_message::account_message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:account_message)
}
account_message::account_message(const account_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  account_message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.familyname_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.familyname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.familyname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_familyname().empty()) {
    _this->_impl_.familyname_.Set(from._internal_familyname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:account_message)
}

inline void account_message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.familyname_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.familyname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.familyname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

account_message::~account_message() {
  // @@protoc_insertion_point(destructor:account_message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void account_message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
  _impl_.password_.Destroy();
  _impl_.name_.Destroy();
  _impl_.familyname_.Destroy();
  _impl_.type_.Destroy();
}

void account_message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void account_message::Clear() {
// @@protoc_insertion_point(message_clear_start:account_message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.familyname_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* account_message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "account_message.username"));
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "account_message.password"));
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "account_message.name"));
        } else
          goto handle_unusual;
        continue;
      // string familyname = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_familyname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "account_message.familyname"));
        } else
          goto handle_unusual;
        continue;
      // string type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "account_message.type"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* account_message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:account_message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "account_message.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "account_message.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "account_message.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string familyname = 4;
  if (!this->_internal_familyname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_familyname().data(), static_cast<int>(this->_internal_familyname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "account_message.familyname");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_familyname(), target);
  }

  // string type = 5;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "account_message.type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:account_message)
  return target;
}

size_t account_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:account_message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string familyname = 4;
  if (!this->_internal_familyname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_familyname());
  }

  // string type = 5;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData account_message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    account_message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*account_message::GetClassData() const { return &_class_data_; }


void account_message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<account_message*>(&to_msg);
  auto& from = static_cast<const account_message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:account_message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_familyname().empty()) {
    _this->_internal_set_familyname(from._internal_familyname());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void account_message::CopyFrom(const account_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:account_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool account_message::IsInitialized() const {
  return true;
}

void account_message::InternalSwap(account_message* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.familyname_, lhs_arena,
      &other->_impl_.familyname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata account_message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_2eproto_getter, &descriptor_table_com_2eproto_once,
      file_level_metadata_com_2eproto[6]);
}

// ===================================================================

class med_event_message::_Internal {
 public:
  static const ::patient_message& name(const med_event_message* msg);
  static const ::account_message& who_prescribed(const med_event_message* msg);
};

const ::patient_message&
med_event_message::_Internal::name(const med_event_message* msg) {
  return *msg->_impl_.name_;
}
const ::account_message&
med_event_message::_Internal::who_prescribed(const med_event_message* msg) {
  return *msg->_impl_.who_prescribed_;
}
med_event_message::med_event_message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:med_event_message)
}
med_event_message::med_event_message(const med_event_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  med_event_message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.describtion_){}
    , decltype(_impl_.room_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.name_){nullptr}
    , decltype(_impl_.who_prescribed_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.describtion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.describtion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_describtion().empty()) {
    _this->_impl_.describtion_.Set(from._internal_describtion(), 
      _this->GetArenaForAllocation());
  }
  _impl_.room_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room().empty()) {
    _this->_impl_.room_.Set(from._internal_room(), 
      _this->GetArenaForAllocation());
  }
  _impl_.time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_time().empty()) {
    _this->_impl_.time_.Set(from._internal_time(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_name()) {
    _this->_impl_.name_ = new ::patient_message(*from._impl_.name_);
  }
  if (from._internal_has_who_prescribed()) {
    _this->_impl_.who_prescribed_ = new ::account_message(*from._impl_.who_prescribed_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:med_event_message)
}

inline void med_event_message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.describtion_){}
    , decltype(_impl_.room_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.name_){nullptr}
    , decltype(_impl_.who_prescribed_){nullptr}
    , decltype(_impl_.id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.describtion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.describtion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.room_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

med_event_message::~med_event_message() {
  // @@protoc_insertion_point(destructor:med_event_message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void med_event_message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.describtion_.Destroy();
  _impl_.room_.Destroy();
  _impl_.time_.Destroy();
  if (this != internal_default_instance()) delete _impl_.name_;
  if (this != internal_default_instance()) delete _impl_.who_prescribed_;
}

void med_event_message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void med_event_message::Clear() {
// @@protoc_insertion_point(message_clear_start:med_event_message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.describtion_.ClearToEmpty();
  _impl_.room_.ClearToEmpty();
  _impl_.time_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.name_ != nullptr) {
    delete _impl_.name_;
  }
  _impl_.name_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.who_prescribed_ != nullptr) {
    delete _impl_.who_prescribed_;
  }
  _impl_.who_prescribed_ = nullptr;
  _impl_.id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* med_event_message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .patient_message name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string describtion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_describtion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "med_event_message.describtion"));
        } else
          goto handle_unusual;
        continue;
      // string room = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_room();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "med_event_message.room"));
        } else
          goto handle_unusual;
        continue;
      // .account_message who_prescribed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_who_prescribed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "med_event_message.time"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* med_event_message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:med_event_message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // .patient_message name = 2;
  if (this->_internal_has_name()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::name(this),
        _Internal::name(this).GetCachedSize(), target, stream);
  }

  // string describtion = 3;
  if (!this->_internal_describtion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_describtion().data(), static_cast<int>(this->_internal_describtion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "med_event_message.describtion");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_describtion(), target);
  }

  // string room = 4;
  if (!this->_internal_room().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room().data(), static_cast<int>(this->_internal_room().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "med_event_message.room");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_room(), target);
  }

  // .account_message who_prescribed = 5;
  if (this->_internal_has_who_prescribed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::who_prescribed(this),
        _Internal::who_prescribed(this).GetCachedSize(), target, stream);
  }

  // string time = 6;
  if (!this->_internal_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time().data(), static_cast<int>(this->_internal_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "med_event_message.time");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:med_event_message)
  return target;
}

size_t med_event_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:med_event_message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string describtion = 3;
  if (!this->_internal_describtion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_describtion());
  }

  // string room = 4;
  if (!this->_internal_room().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room());
  }

  // string time = 6;
  if (!this->_internal_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time());
  }

  // .patient_message name = 2;
  if (this->_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.name_);
  }

  // .account_message who_prescribed = 5;
  if (this->_internal_has_who_prescribed()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.who_prescribed_);
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData med_event_message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    med_event_message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*med_event_message::GetClassData() const { return &_class_data_; }


void med_event_message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<med_event_message*>(&to_msg);
  auto& from = static_cast<const med_event_message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:med_event_message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_describtion().empty()) {
    _this->_internal_set_describtion(from._internal_describtion());
  }
  if (!from._internal_room().empty()) {
    _this->_internal_set_room(from._internal_room());
  }
  if (!from._internal_time().empty()) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_has_name()) {
    _this->_internal_mutable_name()->::patient_message::MergeFrom(
        from._internal_name());
  }
  if (from._internal_has_who_prescribed()) {
    _this->_internal_mutable_who_prescribed()->::account_message::MergeFrom(
        from._internal_who_prescribed());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void med_event_message::CopyFrom(const med_event_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:med_event_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool med_event_message::IsInitialized() const {
  return true;
}

void med_event_message::InternalSwap(med_event_message* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.describtion_, lhs_arena,
      &other->_impl_.describtion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_, lhs_arena,
      &other->_impl_.room_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.time_, lhs_arena,
      &other->_impl_.time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(med_event_message, _impl_.id_)
      + sizeof(med_event_message::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(med_event_message, _impl_.name_)>(
          reinterpret_cast<char*>(&_impl_.name_),
          reinterpret_cast<char*>(&other->_impl_.name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata med_event_message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_2eproto_getter, &descriptor_table_com_2eproto_once,
      file_level_metadata_com_2eproto[7]);
}

// ===================================================================

class exam_message::_Internal {
 public:
  static const ::med_event_message& event(const exam_message* msg);
  static const ::account_message& who_performs(const exam_message* msg);
};

const ::med_event_message&
exam_message::_Internal::event(const exam_message* msg) {
  return *msg->_impl_.event_;
}
const ::account_message&
exam_message::_Internal::who_performs(const exam_message* msg) {
  return *msg->_impl_.who_performs_;
}
exam_message::exam_message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:exam_message)
}
exam_message::exam_message(const exam_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  exam_message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.when_){}
    , decltype(_impl_.room_){}
    , decltype(_impl_.event_){nullptr}
    , decltype(_impl_.who_performs_){nullptr}
    , decltype(_impl_.result_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.when_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.when_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_when().empty()) {
    _this->_impl_.when_.Set(from._internal_when(), 
      _this->GetArenaForAllocation());
  }
  _impl_.room_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room().empty()) {
    _this->_impl_.room_.Set(from._internal_room(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_event()) {
    _this->_impl_.event_ = new ::med_event_message(*from._impl_.event_);
  }
  if (from._internal_has_who_performs()) {
    _this->_impl_.who_performs_ = new ::account_message(*from._impl_.who_performs_);
  }
  _this->_impl_.result_id_ = from._impl_.result_id_;
  // @@protoc_insertion_point(copy_constructor:exam_message)
}

inline void exam_message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.when_){}
    , decltype(_impl_.room_){}
    , decltype(_impl_.event_){nullptr}
    , decltype(_impl_.who_performs_){nullptr}
    , decltype(_impl_.result_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.when_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.when_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.room_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

exam_message::~exam_message() {
  // @@protoc_insertion_point(destructor:exam_message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void exam_message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.when_.Destroy();
  _impl_.room_.Destroy();
  if (this != internal_default_instance()) delete _impl_.event_;
  if (this != internal_default_instance()) delete _impl_.who_performs_;
}

void exam_message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void exam_message::Clear() {
// @@protoc_insertion_point(message_clear_start:exam_message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.when_.ClearToEmpty();
  _impl_.room_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.event_ != nullptr) {
    delete _impl_.event_;
  }
  _impl_.event_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.who_performs_ != nullptr) {
    delete _impl_.who_performs_;
  }
  _impl_.who_performs_ = nullptr;
  _impl_.result_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* exam_message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .med_event_message event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .account_message who_performs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_who_performs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string when = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_when();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "exam_message.when"));
        } else
          goto handle_unusual;
        continue;
      // uint64 result_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.result_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string room = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_room();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "exam_message.room"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* exam_message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exam_message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .med_event_message event = 1;
  if (this->_internal_has_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::event(this),
        _Internal::event(this).GetCachedSize(), target, stream);
  }

  // .account_message who_performs = 2;
  if (this->_internal_has_who_performs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::who_performs(this),
        _Internal::who_performs(this).GetCachedSize(), target, stream);
  }

  // string when = 3;
  if (!this->_internal_when().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_when().data(), static_cast<int>(this->_internal_when().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "exam_message.when");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_when(), target);
  }

  // uint64 result_id = 4;
  if (this->_internal_result_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_result_id(), target);
  }

  // string room = 5;
  if (!this->_internal_room().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room().data(), static_cast<int>(this->_internal_room().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "exam_message.room");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_room(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exam_message)
  return target;
}

size_t exam_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exam_message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string when = 3;
  if (!this->_internal_when().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_when());
  }

  // string room = 5;
  if (!this->_internal_room().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room());
  }

  // .med_event_message event = 1;
  if (this->_internal_has_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.event_);
  }

  // .account_message who_performs = 2;
  if (this->_internal_has_who_performs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.who_performs_);
  }

  // uint64 result_id = 4;
  if (this->_internal_result_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_result_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData exam_message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    exam_message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*exam_message::GetClassData() const { return &_class_data_; }


void exam_message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<exam_message*>(&to_msg);
  auto& from = static_cast<const exam_message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:exam_message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_when().empty()) {
    _this->_internal_set_when(from._internal_when());
  }
  if (!from._internal_room().empty()) {
    _this->_internal_set_room(from._internal_room());
  }
  if (from._internal_has_event()) {
    _this->_internal_mutable_event()->::med_event_message::MergeFrom(
        from._internal_event());
  }
  if (from._internal_has_who_performs()) {
    _this->_internal_mutable_who_performs()->::account_message::MergeFrom(
        from._internal_who_performs());
  }
  if (from._internal_result_id() != 0) {
    _this->_internal_set_result_id(from._internal_result_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void exam_message::CopyFrom(const exam_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exam_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool exam_message::IsInitialized() const {
  return true;
}

void exam_message::InternalSwap(exam_message* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.when_, lhs_arena,
      &other->_impl_.when_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_, lhs_arena,
      &other->_impl_.room_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(exam_message, _impl_.result_id_)
      + sizeof(exam_message::_impl_.result_id_)
      - PROTOBUF_FIELD_OFFSET(exam_message, _impl_.event_)>(
          reinterpret_cast<char*>(&_impl_.event_),
          reinterpret_cast<char*>(&other->_impl_.event_));
}

::PROTOBUF_NAMESPACE_ID::Metadata exam_message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_2eproto_getter, &descriptor_table_com_2eproto_once,
      file_level_metadata_com_2eproto[8]);
}

// ===================================================================

class ekg_res_message::_Internal {
 public:
  static const ::exam_message& result_id(const ekg_res_message* msg);
};

const ::exam_message&
ekg_res_message::_Internal::result_id(const ekg_res_message* msg) {
  return *msg->_impl_.result_id_;
}
ekg_res_message::ekg_res_message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ekg_res_message)
}
ekg_res_message::ekg_res_message(const ekg_res_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ekg_res_message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.rhytm_){}
    , decltype(_impl_.pr_delay_){}
    , decltype(_impl_.qrs_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::exam_message(*from._impl_.result_id_);
  }
  ::memcpy(&_impl_.rhytm_, &from._impl_.rhytm_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.qrs_) -
    reinterpret_cast<char*>(&_impl_.rhytm_)) + sizeof(_impl_.qrs_));
  // @@protoc_insertion_point(copy_constructor:ekg_res_message)
}

inline void ekg_res_message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.rhytm_){0u}
    , decltype(_impl_.pr_delay_){0u}
    , decltype(_impl_.qrs_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ekg_res_message::~ekg_res_message() {
  // @@protoc_insertion_point(destructor:ekg_res_message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ekg_res_message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.result_id_;
}

void ekg_res_message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ekg_res_message::Clear() {
// @@protoc_insertion_point(message_clear_start:ekg_res_message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  ::memset(&_impl_.rhytm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.qrs_) -
      reinterpret_cast<char*>(&_impl_.rhytm_)) + sizeof(_impl_.qrs_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ekg_res_message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .exam_message result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rhytm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.rhytm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pr_delay = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.pr_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 qrs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.qrs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ekg_res_message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ekg_res_message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .exam_message result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // uint32 rhytm = 2;
  if (this->_internal_rhytm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rhytm(), target);
  }

  // uint32 pr_delay = 3;
  if (this->_internal_pr_delay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pr_delay(), target);
  }

  // uint32 qrs = 4;
  if (this->_internal_qrs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_qrs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ekg_res_message)
  return target;
}

size_t ekg_res_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ekg_res_message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .exam_message result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  // uint32 rhytm = 2;
  if (this->_internal_rhytm() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rhytm());
  }

  // uint32 pr_delay = 3;
  if (this->_internal_pr_delay() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pr_delay());
  }

  // uint32 qrs = 4;
  if (this->_internal_qrs() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_qrs());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ekg_res_message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ekg_res_message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ekg_res_message::GetClassData() const { return &_class_data_; }


void ekg_res_message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ekg_res_message*>(&to_msg);
  auto& from = static_cast<const ekg_res_message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ekg_res_message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::exam_message::MergeFrom(
        from._internal_result_id());
  }
  if (from._internal_rhytm() != 0) {
    _this->_internal_set_rhytm(from._internal_rhytm());
  }
  if (from._internal_pr_delay() != 0) {
    _this->_internal_set_pr_delay(from._internal_pr_delay());
  }
  if (from._internal_qrs() != 0) {
    _this->_internal_set_qrs(from._internal_qrs());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ekg_res_message::CopyFrom(const ekg_res_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ekg_res_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ekg_res_message::IsInitialized() const {
  return true;
}

void ekg_res_message::InternalSwap(ekg_res_message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ekg_res_message, _impl_.qrs_)
      + sizeof(ekg_res_message::_impl_.qrs_)
      - PROTOBUF_FIELD_OFFSET(ekg_res_message, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ekg_res_message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_2eproto_getter, &descriptor_table_com_2eproto_once,
      file_level_metadata_com_2eproto[9]);
}

// ===================================================================

class mor_res_message::_Internal {
 public:
  static const ::exam_message& result_id(const mor_res_message* msg);
};

const ::exam_message&
mor_res_message::_Internal::result_id(const mor_res_message* msg) {
  return *msg->_impl_.result_id_;
}
mor_res_message::mor_res_message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mor_res_message)
}
mor_res_message::mor_res_message(const mor_res_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  mor_res_message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.rbc_){}
    , decltype(_impl_.hb_){}
    , decltype(_impl_.wbc_){}
    , decltype(_impl_.plt_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::exam_message(*from._impl_.result_id_);
  }
  ::memcpy(&_impl_.rbc_, &from._impl_.rbc_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.plt_) -
    reinterpret_cast<char*>(&_impl_.rbc_)) + sizeof(_impl_.plt_));
  // @@protoc_insertion_point(copy_constructor:mor_res_message)
}

inline void mor_res_message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.rbc_){0u}
    , decltype(_impl_.hb_){0u}
    , decltype(_impl_.wbc_){0u}
    , decltype(_impl_.plt_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

mor_res_message::~mor_res_message() {
  // @@protoc_insertion_point(destructor:mor_res_message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void mor_res_message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.result_id_;
}

void mor_res_message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void mor_res_message::Clear() {
// @@protoc_insertion_point(message_clear_start:mor_res_message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  ::memset(&_impl_.rbc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.plt_) -
      reinterpret_cast<char*>(&_impl_.rbc_)) + sizeof(_impl_.plt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mor_res_message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .exam_message result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rbc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.rbc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.hb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 wbc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.wbc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 plt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.plt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* mor_res_message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mor_res_message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .exam_message result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // uint32 rbc = 2;
  if (this->_internal_rbc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rbc(), target);
  }

  // uint32 hb = 3;
  if (this->_internal_hb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hb(), target);
  }

  // uint32 wbc = 4;
  if (this->_internal_wbc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_wbc(), target);
  }

  // uint32 plt = 5;
  if (this->_internal_plt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_plt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mor_res_message)
  return target;
}

size_t mor_res_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mor_res_message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .exam_message result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  // uint32 rbc = 2;
  if (this->_internal_rbc() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rbc());
  }

  // uint32 hb = 3;
  if (this->_internal_hb() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hb());
  }

  // uint32 wbc = 4;
  if (this->_internal_wbc() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_wbc());
  }

  // uint32 plt = 5;
  if (this->_internal_plt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_plt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mor_res_message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    mor_res_message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mor_res_message::GetClassData() const { return &_class_data_; }


void mor_res_message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<mor_res_message*>(&to_msg);
  auto& from = static_cast<const mor_res_message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mor_res_message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::exam_message::MergeFrom(
        from._internal_result_id());
  }
  if (from._internal_rbc() != 0) {
    _this->_internal_set_rbc(from._internal_rbc());
  }
  if (from._internal_hb() != 0) {
    _this->_internal_set_hb(from._internal_hb());
  }
  if (from._internal_wbc() != 0) {
    _this->_internal_set_wbc(from._internal_wbc());
  }
  if (from._internal_plt() != 0) {
    _this->_internal_set_plt(from._internal_plt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mor_res_message::CopyFrom(const mor_res_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mor_res_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mor_res_message::IsInitialized() const {
  return true;
}

void mor_res_message::InternalSwap(mor_res_message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(mor_res_message, _impl_.plt_)
      + sizeof(mor_res_message::_impl_.plt_)
      - PROTOBUF_FIELD_OFFSET(mor_res_message, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata mor_res_message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_2eproto_getter, &descriptor_table_com_2eproto_once,
      file_level_metadata_com_2eproto[10]);
}

// ===================================================================

class mri_res_message::_Internal {
 public:
  static const ::exam_message& result_id(const mri_res_message* msg);
};

const ::exam_message&
mri_res_message::_Internal::result_id(const mri_res_message* msg) {
  return *msg->_impl_.result_id_;
}
mri_res_message::mri_res_message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mri_res_message)
}
mri_res_message::mri_res_message(const mri_res_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  mri_res_message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , decltype(_impl_.result_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result().empty()) {
    _this->_impl_.result_.Set(from._internal_result(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::exam_message(*from._impl_.result_id_);
  }
  // @@protoc_insertion_point(copy_constructor:mri_res_message)
}

inline void mri_res_message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , decltype(_impl_.result_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

mri_res_message::~mri_res_message() {
  // @@protoc_insertion_point(destructor:mri_res_message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void mri_res_message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_.Destroy();
  if (this != internal_default_instance()) delete _impl_.result_id_;
}

void mri_res_message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void mri_res_message::Clear() {
// @@protoc_insertion_point(message_clear_start:mri_res_message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mri_res_message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .exam_message result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_result();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mri_res_message.result"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* mri_res_message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mri_res_message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .exam_message result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // string result = 2;
  if (!this->_internal_result().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result().data(), static_cast<int>(this->_internal_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mri_res_message.result");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mri_res_message)
  return target;
}

size_t mri_res_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mri_res_message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result = 2;
  if (!this->_internal_result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result());
  }

  // .exam_message result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mri_res_message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    mri_res_message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mri_res_message::GetClassData() const { return &_class_data_; }


void mri_res_message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<mri_res_message*>(&to_msg);
  auto& from = static_cast<const mri_res_message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mri_res_message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result().empty()) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::exam_message::MergeFrom(
        from._internal_result_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mri_res_message::CopyFrom(const mri_res_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mri_res_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mri_res_message::IsInitialized() const {
  return true;
}

void mri_res_message::InternalSwap(mri_res_message* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.result_, lhs_arena,
      &other->_impl_.result_, rhs_arena
  );
  swap(_impl_.result_id_, other->_impl_.result_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata mri_res_message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_2eproto_getter, &descriptor_table_com_2eproto_once,
      file_level_metadata_com_2eproto[11]);
}

// ===================================================================

class rtg_res_message::_Internal {
 public:
  static const ::exam_message& result_id(const rtg_res_message* msg);
};

const ::exam_message&
rtg_res_message::_Internal::result_id(const rtg_res_message* msg) {
  return *msg->_impl_.result_id_;
}
rtg_res_message::rtg_res_message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtg_res_message)
}
rtg_res_message::rtg_res_message(const rtg_res_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  rtg_res_message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , decltype(_impl_.result_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result().empty()) {
    _this->_impl_.result_.Set(from._internal_result(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::exam_message(*from._impl_.result_id_);
  }
  // @@protoc_insertion_point(copy_constructor:rtg_res_message)
}

inline void rtg_res_message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , decltype(_impl_.result_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

rtg_res_message::~rtg_res_message() {
  // @@protoc_insertion_point(destructor:rtg_res_message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void rtg_res_message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_.Destroy();
  if (this != internal_default_instance()) delete _impl_.result_id_;
}

void rtg_res_message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void rtg_res_message::Clear() {
// @@protoc_insertion_point(message_clear_start:rtg_res_message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* rtg_res_message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .exam_message result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_result();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtg_res_message.result"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* rtg_res_message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtg_res_message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .exam_message result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // string result = 2;
  if (!this->_internal_result().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result().data(), static_cast<int>(this->_internal_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtg_res_message.result");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtg_res_message)
  return target;
}

size_t rtg_res_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtg_res_message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result = 2;
  if (!this->_internal_result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result());
  }

  // .exam_message result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData rtg_res_message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    rtg_res_message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*rtg_res_message::GetClassData() const { return &_class_data_; }


void rtg_res_message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<rtg_res_message*>(&to_msg);
  auto& from = static_cast<const rtg_res_message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtg_res_message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result().empty()) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::exam_message::MergeFrom(
        from._internal_result_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void rtg_res_message::CopyFrom(const rtg_res_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtg_res_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rtg_res_message::IsInitialized() const {
  return true;
}

void rtg_res_message::InternalSwap(rtg_res_message* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.result_, lhs_arena,
      &other->_impl_.result_, rhs_arena
  );
  swap(_impl_.result_id_, other->_impl_.result_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata rtg_res_message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_2eproto_getter, &descriptor_table_com_2eproto_once,
      file_level_metadata_com_2eproto[12]);
}

// ===================================================================

class usg_res_message::_Internal {
 public:
  static const ::exam_message& result_id(const usg_res_message* msg);
};

const ::exam_message&
usg_res_message::_Internal::result_id(const usg_res_message* msg) {
  return *msg->_impl_.result_id_;
}
usg_res_message::usg_res_message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:usg_res_message)
}
usg_res_message::usg_res_message(const usg_res_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  usg_res_message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , decltype(_impl_.result_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result().empty()) {
    _this->_impl_.result_.Set(from._internal_result(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::exam_message(*from._impl_.result_id_);
  }
  // @@protoc_insertion_point(copy_constructor:usg_res_message)
}

inline void usg_res_message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , decltype(_impl_.result_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

usg_res_message::~usg_res_message() {
  // @@protoc_insertion_point(destructor:usg_res_message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void usg_res_message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_.Destroy();
  if (this != internal_default_instance()) delete _impl_.result_id_;
}

void usg_res_message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void usg_res_message::Clear() {
// @@protoc_insertion_point(message_clear_start:usg_res_message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* usg_res_message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .exam_message result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_result();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "usg_res_message.result"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* usg_res_message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:usg_res_message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .exam_message result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // string result = 2;
  if (!this->_internal_result().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result().data(), static_cast<int>(this->_internal_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "usg_res_message.result");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:usg_res_message)
  return target;
}

size_t usg_res_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:usg_res_message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result = 2;
  if (!this->_internal_result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result());
  }

  // .exam_message result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData usg_res_message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    usg_res_message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*usg_res_message::GetClassData() const { return &_class_data_; }


void usg_res_message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<usg_res_message*>(&to_msg);
  auto& from = static_cast<const usg_res_message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:usg_res_message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result().empty()) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::exam_message::MergeFrom(
        from._internal_result_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void usg_res_message::CopyFrom(const usg_res_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:usg_res_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool usg_res_message::IsInitialized() const {
  return true;
}

void usg_res_message::InternalSwap(usg_res_message* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.result_, lhs_arena,
      &other->_impl_.result_, rhs_arena
  );
  swap(_impl_.result_id_, other->_impl_.result_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata usg_res_message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_2eproto_getter, &descriptor_table_com_2eproto_once,
      file_level_metadata_com_2eproto[13]);
}

// ===================================================================

class patient_message::_Internal {
 public:
  static const ::account_message& username(const patient_message* msg);
};

const ::account_message&
patient_message::_Internal::username(const patient_message* msg) {
  return *msg->_impl_.username_;
}
patient_message::patient_message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:patient_message)
}
patient_message::patient_message(const patient_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  patient_message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pesel_){}
    , decltype(_impl_.city_){}
    , decltype(_impl_.street_){}
    , decltype(_impl_.postcode_){}
    , decltype(_impl_.birthdate_){}
    , decltype(_impl_.username_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pesel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pesel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pesel().empty()) {
    _this->_impl_.pesel_.Set(from._internal_pesel(), 
      _this->GetArenaForAllocation());
  }
  _impl_.city_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.city_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_city().empty()) {
    _this->_impl_.city_.Set(from._internal_city(), 
      _this->GetArenaForAllocation());
  }
  _impl_.street_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.street_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_street().empty()) {
    _this->_impl_.street_.Set(from._internal_street(), 
      _this->GetArenaForAllocation());
  }
  _impl_.postcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.postcode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_postcode().empty()) {
    _this->_impl_.postcode_.Set(from._internal_postcode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.birthdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.birthdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_birthdate().empty()) {
    _this->_impl_.birthdate_.Set(from._internal_birthdate(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_username()) {
    _this->_impl_.username_ = new ::account_message(*from._impl_.username_);
  }
  // @@protoc_insertion_point(copy_constructor:patient_message)
}

inline void patient_message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pesel_){}
    , decltype(_impl_.city_){}
    , decltype(_impl_.street_){}
    , decltype(_impl_.postcode_){}
    , decltype(_impl_.birthdate_){}
    , decltype(_impl_.username_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pesel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pesel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.city_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.city_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.street_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.street_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.postcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.postcode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.birthdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.birthdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

patient_message::~patient_message() {
  // @@protoc_insertion_point(destructor:patient_message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void patient_message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pesel_.Destroy();
  _impl_.city_.Destroy();
  _impl_.street_.Destroy();
  _impl_.postcode_.Destroy();
  _impl_.birthdate_.Destroy();
  if (this != internal_default_instance()) delete _impl_.username_;
}

void patient_message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void patient_message::Clear() {
// @@protoc_insertion_point(message_clear_start:patient_message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pesel_.ClearToEmpty();
  _impl_.city_.ClearToEmpty();
  _impl_.street_.ClearToEmpty();
  _impl_.postcode_.ClearToEmpty();
  _impl_.birthdate_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.username_ != nullptr) {
    delete _impl_.username_;
  }
  _impl_.username_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* patient_message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pesel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pesel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "patient_message.pesel"));
        } else
          goto handle_unusual;
        continue;
      // string city = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_city();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "patient_message.city"));
        } else
          goto handle_unusual;
        continue;
      // string street = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_street();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "patient_message.street"));
        } else
          goto handle_unusual;
        continue;
      // string postcode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_postcode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "patient_message.postcode"));
        } else
          goto handle_unusual;
        continue;
      // string birthdate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_birthdate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "patient_message.birthdate"));
        } else
          goto handle_unusual;
        continue;
      // .account_message username = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_username(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* patient_message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient_message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string pesel = 1;
  if (!this->_internal_pesel().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pesel().data(), static_cast<int>(this->_internal_pesel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient_message.pesel");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pesel(), target);
  }

  // string city = 2;
  if (!this->_internal_city().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_city().data(), static_cast<int>(this->_internal_city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient_message.city");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_city(), target);
  }

  // string street = 3;
  if (!this->_internal_street().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_street().data(), static_cast<int>(this->_internal_street().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient_message.street");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_street(), target);
  }

  // string postcode = 4;
  if (!this->_internal_postcode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_postcode().data(), static_cast<int>(this->_internal_postcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient_message.postcode");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_postcode(), target);
  }

  // string birthdate = 5;
  if (!this->_internal_birthdate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_birthdate().data(), static_cast<int>(this->_internal_birthdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient_message.birthdate");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_birthdate(), target);
  }

  // .account_message username = 6;
  if (this->_internal_has_username()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::username(this),
        _Internal::username(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient_message)
  return target;
}

size_t patient_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient_message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pesel = 1;
  if (!this->_internal_pesel().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pesel());
  }

  // string city = 2;
  if (!this->_internal_city().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_city());
  }

  // string street = 3;
  if (!this->_internal_street().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_street());
  }

  // string postcode = 4;
  if (!this->_internal_postcode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_postcode());
  }

  // string birthdate = 5;
  if (!this->_internal_birthdate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_birthdate());
  }

  // .account_message username = 6;
  if (this->_internal_has_username()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.username_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData patient_message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    patient_message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*patient_message::GetClassData() const { return &_class_data_; }


void patient_message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<patient_message*>(&to_msg);
  auto& from = static_cast<const patient_message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:patient_message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pesel().empty()) {
    _this->_internal_set_pesel(from._internal_pesel());
  }
  if (!from._internal_city().empty()) {
    _this->_internal_set_city(from._internal_city());
  }
  if (!from._internal_street().empty()) {
    _this->_internal_set_street(from._internal_street());
  }
  if (!from._internal_postcode().empty()) {
    _this->_internal_set_postcode(from._internal_postcode());
  }
  if (!from._internal_birthdate().empty()) {
    _this->_internal_set_birthdate(from._internal_birthdate());
  }
  if (from._internal_has_username()) {
    _this->_internal_mutable_username()->::account_message::MergeFrom(
        from._internal_username());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void patient_message::CopyFrom(const patient_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool patient_message::IsInitialized() const {
  return true;
}

void patient_message::InternalSwap(patient_message* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pesel_, lhs_arena,
      &other->_impl_.pesel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.city_, lhs_arena,
      &other->_impl_.city_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.street_, lhs_arena,
      &other->_impl_.street_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.postcode_, lhs_arena,
      &other->_impl_.postcode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.birthdate_, lhs_arena,
      &other->_impl_.birthdate_, rhs_arena
  );
  swap(_impl_.username_, other->_impl_.username_);
}

::PROTOBUF_NAMESPACE_ID::Metadata patient_message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_2eproto_getter, &descriptor_table_com_2eproto_once,
      file_level_metadata_com_2eproto[14]);
}

// ===================================================================

class prescribtion_message::_Internal {
 public:
  static const ::med_event_message& event(const prescribtion_message* msg);
};

const ::med_event_message&
prescribtion_message::_Internal::event(const prescribtion_message* msg) {
  return *msg->_impl_.event_;
}
prescribtion_message::prescribtion_message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:prescribtion_message)
}
prescribtion_message::prescribtion_message(const prescribtion_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  prescribtion_message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.medicine_){}
    , decltype(_impl_.dose_){}
    , decltype(_impl_.exp_date_){}
    , decltype(_impl_.event_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.medicine_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.medicine_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_medicine().empty()) {
    _this->_impl_.medicine_.Set(from._internal_medicine(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dose_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dose_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dose().empty()) {
    _this->_impl_.dose_.Set(from._internal_dose(), 
      _this->GetArenaForAllocation());
  }
  _impl_.exp_date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exp_date_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exp_date().empty()) {
    _this->_impl_.exp_date_.Set(from._internal_exp_date(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_event()) {
    _this->_impl_.event_ = new ::med_event_message(*from._impl_.event_);
  }
  // @@protoc_insertion_point(copy_constructor:prescribtion_message)
}

inline void prescribtion_message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.medicine_){}
    , decltype(_impl_.dose_){}
    , decltype(_impl_.exp_date_){}
    , decltype(_impl_.event_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.medicine_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.medicine_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dose_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dose_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exp_date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exp_date_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

prescribtion_message::~prescribtion_message() {
  // @@protoc_insertion_point(destructor:prescribtion_message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void prescribtion_message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.medicine_.Destroy();
  _impl_.dose_.Destroy();
  _impl_.exp_date_.Destroy();
  if (this != internal_default_instance()) delete _impl_.event_;
}

void prescribtion_message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void prescribtion_message::Clear() {
// @@protoc_insertion_point(message_clear_start:prescribtion_message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.medicine_.ClearToEmpty();
  _impl_.dose_.ClearToEmpty();
  _impl_.exp_date_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.event_ != nullptr) {
    delete _impl_.event_;
  }
  _impl_.event_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* prescribtion_message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .med_event_message event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string medicine = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_medicine();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "prescribtion_message.medicine"));
        } else
          goto handle_unusual;
        continue;
      // string dose = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_dose();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "prescribtion_message.dose"));
        } else
          goto handle_unusual;
        continue;
      // string exp_date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_exp_date();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "prescribtion_message.exp_date"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* prescribtion_message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prescribtion_message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .med_event_message event = 1;
  if (this->_internal_has_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::event(this),
        _Internal::event(this).GetCachedSize(), target, stream);
  }

  // string medicine = 2;
  if (!this->_internal_medicine().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_medicine().data(), static_cast<int>(this->_internal_medicine().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "prescribtion_message.medicine");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_medicine(), target);
  }

  // string dose = 3;
  if (!this->_internal_dose().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dose().data(), static_cast<int>(this->_internal_dose().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "prescribtion_message.dose");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dose(), target);
  }

  // string exp_date = 4;
  if (!this->_internal_exp_date().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exp_date().data(), static_cast<int>(this->_internal_exp_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "prescribtion_message.exp_date");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_exp_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prescribtion_message)
  return target;
}

size_t prescribtion_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prescribtion_message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string medicine = 2;
  if (!this->_internal_medicine().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_medicine());
  }

  // string dose = 3;
  if (!this->_internal_dose().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dose());
  }

  // string exp_date = 4;
  if (!this->_internal_exp_date().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exp_date());
  }

  // .med_event_message event = 1;
  if (this->_internal_has_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.event_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData prescribtion_message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    prescribtion_message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*prescribtion_message::GetClassData() const { return &_class_data_; }


void prescribtion_message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<prescribtion_message*>(&to_msg);
  auto& from = static_cast<const prescribtion_message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prescribtion_message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_medicine().empty()) {
    _this->_internal_set_medicine(from._internal_medicine());
  }
  if (!from._internal_dose().empty()) {
    _this->_internal_set_dose(from._internal_dose());
  }
  if (!from._internal_exp_date().empty()) {
    _this->_internal_set_exp_date(from._internal_exp_date());
  }
  if (from._internal_has_event()) {
    _this->_internal_mutable_event()->::med_event_message::MergeFrom(
        from._internal_event());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void prescribtion_message::CopyFrom(const prescribtion_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prescribtion_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool prescribtion_message::IsInitialized() const {
  return true;
}

void prescribtion_message::InternalSwap(prescribtion_message* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.medicine_, lhs_arena,
      &other->_impl_.medicine_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dose_, lhs_arena,
      &other->_impl_.dose_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.exp_date_, lhs_arena,
      &other->_impl_.exp_date_, rhs_arena
  );
  swap(_impl_.event_, other->_impl_.event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata prescribtion_message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_2eproto_getter, &descriptor_table_com_2eproto_once,
      file_level_metadata_com_2eproto[15]);
}

// ===================================================================

class procedure_message::_Internal {
 public:
  static const ::med_event_message& event(const procedure_message* msg);
  static const ::account_message& who_performs(const procedure_message* msg);
};

const ::med_event_message&
procedure_message::_Internal::event(const procedure_message* msg) {
  return *msg->_impl_.event_;
}
const ::account_message&
procedure_message::_Internal::who_performs(const procedure_message* msg) {
  return *msg->_impl_.who_performs_;
}
procedure_message::procedure_message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:procedure_message)
}
procedure_message::procedure_message(const procedure_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  procedure_message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.when_){}
    , decltype(_impl_.room_){}
    , decltype(_impl_.event_){nullptr}
    , decltype(_impl_.who_performs_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.when_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.when_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_when().empty()) {
    _this->_impl_.when_.Set(from._internal_when(), 
      _this->GetArenaForAllocation());
  }
  _impl_.room_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room().empty()) {
    _this->_impl_.room_.Set(from._internal_room(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_event()) {
    _this->_impl_.event_ = new ::med_event_message(*from._impl_.event_);
  }
  if (from._internal_has_who_performs()) {
    _this->_impl_.who_performs_ = new ::account_message(*from._impl_.who_performs_);
  }
  // @@protoc_insertion_point(copy_constructor:procedure_message)
}

inline void procedure_message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.when_){}
    , decltype(_impl_.room_){}
    , decltype(_impl_.event_){nullptr}
    , decltype(_impl_.who_performs_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.when_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.when_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.room_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

procedure_message::~procedure_message() {
  // @@protoc_insertion_point(destructor:procedure_message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void procedure_message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.when_.Destroy();
  _impl_.room_.Destroy();
  if (this != internal_default_instance()) delete _impl_.event_;
  if (this != internal_default_instance()) delete _impl_.who_performs_;
}

void procedure_message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void procedure_message::Clear() {
// @@protoc_insertion_point(message_clear_start:procedure_message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.when_.ClearToEmpty();
  _impl_.room_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.event_ != nullptr) {
    delete _impl_.event_;
  }
  _impl_.event_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.who_performs_ != nullptr) {
    delete _impl_.who_performs_;
  }
  _impl_.who_performs_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* procedure_message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .med_event_message event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .account_message who_performs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_who_performs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string when = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_when();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "procedure_message.when"));
        } else
          goto handle_unusual;
        continue;
      // string room = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_room();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "procedure_message.room"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* procedure_message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:procedure_message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .med_event_message event = 1;
  if (this->_internal_has_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::event(this),
        _Internal::event(this).GetCachedSize(), target, stream);
  }

  // .account_message who_performs = 2;
  if (this->_internal_has_who_performs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::who_performs(this),
        _Internal::who_performs(this).GetCachedSize(), target, stream);
  }

  // string when = 3;
  if (!this->_internal_when().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_when().data(), static_cast<int>(this->_internal_when().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "procedure_message.when");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_when(), target);
  }

  // string room = 4;
  if (!this->_internal_room().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room().data(), static_cast<int>(this->_internal_room().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "procedure_message.room");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_room(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:procedure_message)
  return target;
}

size_t procedure_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:procedure_message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string when = 3;
  if (!this->_internal_when().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_when());
  }

  // string room = 4;
  if (!this->_internal_room().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room());
  }

  // .med_event_message event = 1;
  if (this->_internal_has_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.event_);
  }

  // .account_message who_performs = 2;
  if (this->_internal_has_who_performs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.who_performs_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData procedure_message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    procedure_message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*procedure_message::GetClassData() const { return &_class_data_; }


void procedure_message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<procedure_message*>(&to_msg);
  auto& from = static_cast<const procedure_message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:procedure_message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_when().empty()) {
    _this->_internal_set_when(from._internal_when());
  }
  if (!from._internal_room().empty()) {
    _this->_internal_set_room(from._internal_room());
  }
  if (from._internal_has_event()) {
    _this->_internal_mutable_event()->::med_event_message::MergeFrom(
        from._internal_event());
  }
  if (from._internal_has_who_performs()) {
    _this->_internal_mutable_who_performs()->::account_message::MergeFrom(
        from._internal_who_performs());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void procedure_message::CopyFrom(const procedure_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:procedure_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool procedure_message::IsInitialized() const {
  return true;
}

void procedure_message::InternalSwap(procedure_message* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.when_, lhs_arena,
      &other->_impl_.when_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_, lhs_arena,
      &other->_impl_.room_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(procedure_message, _impl_.who_performs_)
      + sizeof(procedure_message::_impl_.who_performs_)
      - PROTOBUF_FIELD_OFFSET(procedure_message, _impl_.event_)>(
          reinterpret_cast<char*>(&_impl_.event_),
          reinterpret_cast<char*>(&other->_impl_.event_));
}

::PROTOBUF_NAMESPACE_ID::Metadata procedure_message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_2eproto_getter, &descriptor_table_com_2eproto_once,
      file_level_metadata_com_2eproto[16]);
}

// ===================================================================

class schedule_message::_Internal {
 public:
  static const ::account_message& who(const schedule_message* msg);
};

const ::account_message&
schedule_message::_Internal::who(const schedule_message* msg) {
  return *msg->_impl_.who_;
}
schedule_message::schedule_message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:schedule_message)
}
schedule_message::schedule_message(const schedule_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  schedule_message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){from._impl_.events_}
    , decltype(_impl_.start_){}
    , decltype(_impl_.end_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.room_){}
    , decltype(_impl_.who_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.start_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.start_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_start().empty()) {
    _this->_impl_.start_.Set(from._internal_start(), 
      _this->GetArenaForAllocation());
  }
  _impl_.end_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.end_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_end().empty()) {
    _this->_impl_.end_.Set(from._internal_end(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.room_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room().empty()) {
    _this->_impl_.room_.Set(from._internal_room(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_who()) {
    _this->_impl_.who_ = new ::account_message(*from._impl_.who_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:schedule_message)
}

inline void schedule_message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){arena}
    , decltype(_impl_.start_){}
    , decltype(_impl_.end_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.room_){}
    , decltype(_impl_.who_){nullptr}
    , decltype(_impl_.id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.start_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.start_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.end_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.end_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.room_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

schedule_message::~schedule_message() {
  // @@protoc_insertion_point(destructor:schedule_message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void schedule_message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.events_.~RepeatedPtrField();
  _impl_.start_.Destroy();
  _impl_.end_.Destroy();
  _impl_.type_.Destroy();
  _impl_.room_.Destroy();
  if (this != internal_default_instance()) delete _impl_.who_;
}

void schedule_message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void schedule_message::Clear() {
// @@protoc_insertion_point(message_clear_start:schedule_message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.events_.Clear();
  _impl_.start_.ClearToEmpty();
  _impl_.end_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  _impl_.room_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.who_ != nullptr) {
    delete _impl_.who_;
  }
  _impl_.who_ = nullptr;
  _impl_.id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* schedule_message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .account_message who = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_who(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_start();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "schedule_message.start"));
        } else
          goto handle_unusual;
        continue;
      // string end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_end();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "schedule_message.end"));
        } else
          goto handle_unusual;
        continue;
      // string type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "schedule_message.type"));
        } else
          goto handle_unusual;
        continue;
      // string room = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_room();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "schedule_message.room"));
        } else
          goto handle_unusual;
        continue;
      // repeated .med_event_message events = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* schedule_message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedule_message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .account_message who = 1;
  if (this->_internal_has_who()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::who(this),
        _Internal::who(this).GetCachedSize(), target, stream);
  }

  // uint64 id = 2;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_id(), target);
  }

  // string start = 3;
  if (!this->_internal_start().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start().data(), static_cast<int>(this->_internal_start().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "schedule_message.start");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_start(), target);
  }

  // string end = 4;
  if (!this->_internal_end().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end().data(), static_cast<int>(this->_internal_end().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "schedule_message.end");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_end(), target);
  }

  // string type = 5;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "schedule_message.type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_type(), target);
  }

  // string room = 6;
  if (!this->_internal_room().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room().data(), static_cast<int>(this->_internal_room().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "schedule_message.room");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_room(), target);
  }

  // repeated .med_event_message events = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedule_message)
  return target;
}

size_t schedule_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedule_message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .med_event_message events = 7;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_impl_.events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string start = 3;
  if (!this->_internal_start().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_start());
  }

  // string end = 4;
  if (!this->_internal_end().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_end());
  }

  // string type = 5;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string room = 6;
  if (!this->_internal_room().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room());
  }

  // .account_message who = 1;
  if (this->_internal_has_who()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.who_);
  }

  // uint64 id = 2;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData schedule_message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    schedule_message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*schedule_message::GetClassData() const { return &_class_data_; }


void schedule_message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<schedule_message*>(&to_msg);
  auto& from = static_cast<const schedule_message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:schedule_message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.events_.MergeFrom(from._impl_.events_);
  if (!from._internal_start().empty()) {
    _this->_internal_set_start(from._internal_start());
  }
  if (!from._internal_end().empty()) {
    _this->_internal_set_end(from._internal_end());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_room().empty()) {
    _this->_internal_set_room(from._internal_room());
  }
  if (from._internal_has_who()) {
    _this->_internal_mutable_who()->::account_message::MergeFrom(
        from._internal_who());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void schedule_message::CopyFrom(const schedule_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedule_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool schedule_message::IsInitialized() const {
  return true;
}

void schedule_message::InternalSwap(schedule_message* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.start_, lhs_arena,
      &other->_impl_.start_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.end_, lhs_arena,
      &other->_impl_.end_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_, lhs_arena,
      &other->_impl_.room_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(schedule_message, _impl_.id_)
      + sizeof(schedule_message::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(schedule_message, _impl_.who_)>(
          reinterpret_cast<char*>(&_impl_.who_),
          reinterpret_cast<char*>(&other->_impl_.who_));
}

::PROTOBUF_NAMESPACE_ID::Metadata schedule_message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_2eproto_getter, &descriptor_table_com_2eproto_once,
      file_level_metadata_com_2eproto[17]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::result*
Arena::CreateMaybeMessage< ::result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::result >(arena);
}
template<> PROTOBUF_NOINLINE ::event_response*
Arena::CreateMaybeMessage< ::event_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_response >(arena);
}
template<> PROTOBUF_NOINLINE ::add_account_msg*
Arena::CreateMaybeMessage< ::add_account_msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::add_account_msg >(arena);
}
template<> PROTOBUF_NOINLINE ::Empty*
Arena::CreateMaybeMessage< ::Empty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Empty >(arena);
}
template<> PROTOBUF_NOINLINE ::schedule_request*
Arena::CreateMaybeMessage< ::schedule_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::schedule_request >(arena);
}
template<> PROTOBUF_NOINLINE ::account_request*
Arena::CreateMaybeMessage< ::account_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::account_request >(arena);
}
template<> PROTOBUF_NOINLINE ::account_message*
Arena::CreateMaybeMessage< ::account_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::account_message >(arena);
}
template<> PROTOBUF_NOINLINE ::med_event_message*
Arena::CreateMaybeMessage< ::med_event_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::med_event_message >(arena);
}
template<> PROTOBUF_NOINLINE ::exam_message*
Arena::CreateMaybeMessage< ::exam_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::exam_message >(arena);
}
template<> PROTOBUF_NOINLINE ::ekg_res_message*
Arena::CreateMaybeMessage< ::ekg_res_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ekg_res_message >(arena);
}
template<> PROTOBUF_NOINLINE ::mor_res_message*
Arena::CreateMaybeMessage< ::mor_res_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mor_res_message >(arena);
}
template<> PROTOBUF_NOINLINE ::mri_res_message*
Arena::CreateMaybeMessage< ::mri_res_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mri_res_message >(arena);
}
template<> PROTOBUF_NOINLINE ::rtg_res_message*
Arena::CreateMaybeMessage< ::rtg_res_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtg_res_message >(arena);
}
template<> PROTOBUF_NOINLINE ::usg_res_message*
Arena::CreateMaybeMessage< ::usg_res_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::usg_res_message >(arena);
}
template<> PROTOBUF_NOINLINE ::patient_message*
Arena::CreateMaybeMessage< ::patient_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::patient_message >(arena);
}
template<> PROTOBUF_NOINLINE ::prescribtion_message*
Arena::CreateMaybeMessage< ::prescribtion_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prescribtion_message >(arena);
}
template<> PROTOBUF_NOINLINE ::procedure_message*
Arena::CreateMaybeMessage< ::procedure_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::procedure_message >(arena);
}
template<> PROTOBUF_NOINLINE ::schedule_message*
Arena::CreateMaybeMessage< ::schedule_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::schedule_message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
