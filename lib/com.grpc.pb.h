// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: com.proto
#ifndef GRPC_com_2eproto__INCLUDED
#define GRPC_com_2eproto__INCLUDED

#include "com.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

class ClientServerCommunication final {
 public:
  static constexpr char const* service_full_name() {
    return "ClientServerCommunication";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SearchForAccount(::grpc::ClientContext* context, const ::account_request& request, ::account_message* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account_message>> AsyncSearchForAccount(::grpc::ClientContext* context, const ::account_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account_message>>(AsyncSearchForAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account_message>> PrepareAsyncSearchForAccount(::grpc::ClientContext* context, const ::account_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account_message>>(PrepareAsyncSearchForAccountRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdatePatientData(::grpc::ClientContext* context, const ::patient_message& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncUpdatePatientData(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncUpdatePatientDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncUpdatePatientData(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncUpdatePatientDataRaw(context, request, cq));
    }
    virtual ::grpc::Status SearchForPatient(::grpc::ClientContext* context, const ::patient_message& request, ::patient_message* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::patient_message>> AsyncSearchForPatient(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::patient_message>>(AsyncSearchForPatientRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::patient_message>> PrepareAsyncSearchForPatient(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::patient_message>>(PrepareAsyncSearchForPatientRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::patient_message>> SearchForPatients(::grpc::ClientContext* context, const ::patient_message& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::patient_message>>(SearchForPatientsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::patient_message>> AsyncSearchForPatients(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::patient_message>>(AsyncSearchForPatientsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::patient_message>> PrepareAsyncSearchForPatients(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::patient_message>>(PrepareAsyncSearchForPatientsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::med_event_message>> GetNextVisits(::grpc::ClientContext* context, const ::patient_message& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::med_event_message>>(GetNextVisitsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::med_event_message>> AsyncGetNextVisits(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::med_event_message>>(AsyncGetNextVisitsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::med_event_message>> PrepareAsyncGetNextVisits(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::med_event_message>>(PrepareAsyncGetNextVisitsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::prescribtion_message>> GetPrescribtions(::grpc::ClientContext* context, const ::patient_message& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::prescribtion_message>>(GetPrescribtionsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::prescribtion_message>> AsyncGetPrescribtions(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::prescribtion_message>>(AsyncGetPrescribtionsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::prescribtion_message>> PrepareAsyncGetPrescribtions(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::prescribtion_message>>(PrepareAsyncGetPrescribtionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::exam_message>> GetExam(::grpc::ClientContext* context, const ::patient_message& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::exam_message>>(GetExamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::exam_message>> AsyncGetExam(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::exam_message>>(AsyncGetExamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::exam_message>> PrepareAsyncGetExam(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::exam_message>>(PrepareAsyncGetExamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::procedure_message>> GetProcedure(::grpc::ClientContext* context, const ::patient_message& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::procedure_message>>(GetProcedureRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::procedure_message>> AsyncGetProcedure(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::procedure_message>>(AsyncGetProcedureRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::procedure_message>> PrepareAsyncGetProcedure(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::procedure_message>>(PrepareAsyncGetProcedureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::schedule_message>> GetAvailableVisits(::grpc::ClientContext* context, const ::med_event_message& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::schedule_message>>(GetAvailableVisitsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::schedule_message>> AsyncGetAvailableVisits(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::schedule_message>>(AsyncGetAvailableVisitsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::schedule_message>> PrepareAsyncGetAvailableVisits(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::schedule_message>>(PrepareAsyncGetAvailableVisitsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::schedule_message>> GetAvailableExams(::grpc::ClientContext* context, const ::exam_message& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::schedule_message>>(GetAvailableExamsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::schedule_message>> AsyncGetAvailableExams(::grpc::ClientContext* context, const ::exam_message& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::schedule_message>>(AsyncGetAvailableExamsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::schedule_message>> PrepareAsyncGetAvailableExams(::grpc::ClientContext* context, const ::exam_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::schedule_message>>(PrepareAsyncGetAvailableExamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::schedule_message>> GetAvailableProcs(::grpc::ClientContext* context, const ::procedure_message& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::schedule_message>>(GetAvailableProcsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::schedule_message>> AsyncGetAvailableProcs(::grpc::ClientContext* context, const ::procedure_message& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::schedule_message>>(AsyncGetAvailableProcsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::schedule_message>> PrepareAsyncGetAvailableProcs(::grpc::ClientContext* context, const ::procedure_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::schedule_message>>(PrepareAsyncGetAvailableProcsRaw(context, request, cq));
    }
    virtual ::grpc::Status ScheduleEvent(::grpc::ClientContext* context, const ::schedule_request& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncScheduleEvent(::grpc::ClientContext* context, const ::schedule_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncScheduleEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncScheduleEvent(::grpc::ClientContext* context, const ::schedule_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncScheduleEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::med_event_message>> GetReferals(::grpc::ClientContext* context, const ::patient_message& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::med_event_message>>(GetReferalsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::med_event_message>> AsyncGetReferals(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::med_event_message>>(AsyncGetReferalsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::med_event_message>> PrepareAsyncGetReferals(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::med_event_message>>(PrepareAsyncGetReferalsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::account_message>> GetDoctors(::grpc::ClientContext* context, const ::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::account_message>>(GetDoctorsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::account_message>> AsyncGetDoctors(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::account_message>>(AsyncGetDoctorsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::account_message>> PrepareAsyncGetDoctors(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::account_message>>(PrepareAsyncGetDoctorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::schedule_message>> GetSchedules(::grpc::ClientContext* context, const ::account_message& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::schedule_message>>(GetSchedulesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::schedule_message>> AsyncGetSchedules(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::schedule_message>>(AsyncGetSchedulesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::schedule_message>> PrepareAsyncGetSchedules(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::schedule_message>>(PrepareAsyncGetSchedulesRaw(context, request, cq));
    }
    virtual ::grpc::Status AddAccount(::grpc::ClientContext* context, const ::add_account_msg& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncAddAccount(::grpc::ClientContext* context, const ::add_account_msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncAddAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncAddAccount(::grpc::ClientContext* context, const ::add_account_msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncAddAccountRaw(context, request, cq));
    }
    virtual ::grpc::Status ResetPassword(::grpc::ClientContext* context, const ::account_message& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncResetPassword(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncResetPasswordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncResetPassword(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncResetPasswordRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteAccount(::grpc::ClientContext* context, const ::account_message& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncDeleteAccount(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncDeleteAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncDeleteAccount(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncDeleteAccountRaw(context, request, cq));
    }
    virtual ::grpc::Status AddSchedule(::grpc::ClientContext* context, const ::schedule_message& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncAddSchedule(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncAddScheduleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncAddSchedule(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncAddScheduleRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteSchedule(::grpc::ClientContext* context, const ::schedule_message& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncDeleteSchedule(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncDeleteScheduleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncDeleteSchedule(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncDeleteScheduleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::account_message>> GetAccounts(::grpc::ClientContext* context, const ::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::account_message>>(GetAccountsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::account_message>> AsyncGetAccounts(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::account_message>>(AsyncGetAccountsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::account_message>> PrepareAsyncGetAccounts(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::account_message>>(PrepareAsyncGetAccountsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::med_event_message>> GetPatientsHistory(::grpc::ClientContext* context, const ::account_message& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::med_event_message>>(GetPatientsHistoryRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::med_event_message>> AsyncGetPatientsHistory(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::med_event_message>>(AsyncGetPatientsHistoryRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::med_event_message>> PrepareAsyncGetPatientsHistory(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::med_event_message>>(PrepareAsyncGetPatientsHistoryRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPatientsEvent(::grpc::ClientContext* context, const ::med_event_message& request, ::event_response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_response>> AsyncGetPatientsEvent(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_response>>(AsyncGetPatientsEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_response>> PrepareAsyncGetPatientsEvent(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_response>>(PrepareAsyncGetPatientsEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::med_event_message>> GetPatientsEvents(::grpc::ClientContext* context, const ::account_message& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::med_event_message>>(GetPatientsEventsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::med_event_message>> AsyncGetPatientsEvents(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::med_event_message>>(AsyncGetPatientsEventsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::med_event_message>> PrepareAsyncGetPatientsEvents(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::med_event_message>>(PrepareAsyncGetPatientsEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::prescribtion_message>> GetPatientPrescribtion(::grpc::ClientContext* context, const ::account_message& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::prescribtion_message>>(GetPatientPrescribtionRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::prescribtion_message>> AsyncGetPatientPrescribtion(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::prescribtion_message>>(AsyncGetPatientPrescribtionRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::prescribtion_message>> PrepareAsyncGetPatientPrescribtion(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::prescribtion_message>>(PrepareAsyncGetPatientPrescribtionRaw(context, request, cq));
    }
    virtual ::grpc::Status GetExamResults(::grpc::ClientContext* context, const ::exam_message& request, ::result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::result>> AsyncGetExamResults(::grpc::ClientContext* context, const ::exam_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::result>>(AsyncGetExamResultsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::result>> PrepareAsyncGetExamResults(::grpc::ClientContext* context, const ::exam_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::result>>(PrepareAsyncGetExamResultsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::schedule_message>> GetDoctorSchedules(::grpc::ClientContext* context, const ::account_message& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::schedule_message>>(GetDoctorSchedulesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::schedule_message>> AsyncGetDoctorSchedules(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::schedule_message>>(AsyncGetDoctorSchedulesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::schedule_message>> PrepareAsyncGetDoctorSchedules(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::schedule_message>>(PrepareAsyncGetDoctorSchedulesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::med_event_message>> GetScheduledEvents(::grpc::ClientContext* context, const ::schedule_message& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::med_event_message>>(GetScheduledEventsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::med_event_message>> AsyncGetScheduledEvents(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::med_event_message>>(AsyncGetScheduledEventsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::med_event_message>> PrepareAsyncGetScheduledEvents(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::med_event_message>>(PrepareAsyncGetScheduledEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::patient_message>> GetScheduledPatients(::grpc::ClientContext* context, const ::schedule_message& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::patient_message>>(GetScheduledPatientsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::patient_message>> AsyncGetScheduledPatients(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::patient_message>>(AsyncGetScheduledPatientsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::patient_message>> PrepareAsyncGetScheduledPatients(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::patient_message>>(PrepareAsyncGetScheduledPatientsRaw(context, request, cq));
    }
    virtual ::grpc::Status NewReferal(::grpc::ClientContext* context, const ::med_event_message& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncNewReferal(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncNewReferalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncNewReferal(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncNewReferalRaw(context, request, cq));
    }
    virtual ::grpc::Status NewPrescribtion(::grpc::ClientContext* context, const ::prescribtion_message& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncNewPrescribtion(::grpc::ClientContext* context, const ::prescribtion_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncNewPrescribtionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncNewPrescribtion(::grpc::ClientContext* context, const ::prescribtion_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncNewPrescribtionRaw(context, request, cq));
    }
    virtual ::grpc::Status EventDone(::grpc::ClientContext* context, const ::med_event_message& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncEventDone(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncEventDoneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncEventDone(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncEventDoneRaw(context, request, cq));
    }
    virtual ::grpc::Status ScheduleDone(::grpc::ClientContext* context, const ::schedule_message& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncScheduleDone(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncScheduleDoneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncScheduleDone(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncScheduleDoneRaw(context, request, cq));
    }
    virtual ::grpc::Status AddResult(::grpc::ClientContext* context, const ::result& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncAddResult(::grpc::ClientContext* context, const ::result& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncAddResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncAddResult(::grpc::ClientContext* context, const ::result& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncAddResultRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void SearchForAccount(::grpc::ClientContext* context, const ::account_request* request, ::account_message* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SearchForAccount(::grpc::ClientContext* context, const ::account_request* request, ::account_message* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdatePatientData(::grpc::ClientContext* context, const ::patient_message* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdatePatientData(::grpc::ClientContext* context, const ::patient_message* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SearchForPatient(::grpc::ClientContext* context, const ::patient_message* request, ::patient_message* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SearchForPatient(::grpc::ClientContext* context, const ::patient_message* request, ::patient_message* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SearchForPatients(::grpc::ClientContext* context, const ::patient_message* request, ::grpc::ClientReadReactor< ::patient_message>* reactor) = 0;
      virtual void GetNextVisits(::grpc::ClientContext* context, const ::patient_message* request, ::grpc::ClientReadReactor< ::med_event_message>* reactor) = 0;
      virtual void GetPrescribtions(::grpc::ClientContext* context, const ::patient_message* request, ::grpc::ClientReadReactor< ::prescribtion_message>* reactor) = 0;
      virtual void GetExam(::grpc::ClientContext* context, const ::patient_message* request, ::grpc::ClientReadReactor< ::exam_message>* reactor) = 0;
      virtual void GetProcedure(::grpc::ClientContext* context, const ::patient_message* request, ::grpc::ClientReadReactor< ::procedure_message>* reactor) = 0;
      virtual void GetAvailableVisits(::grpc::ClientContext* context, const ::med_event_message* request, ::grpc::ClientReadReactor< ::schedule_message>* reactor) = 0;
      virtual void GetAvailableExams(::grpc::ClientContext* context, const ::exam_message* request, ::grpc::ClientReadReactor< ::schedule_message>* reactor) = 0;
      virtual void GetAvailableProcs(::grpc::ClientContext* context, const ::procedure_message* request, ::grpc::ClientReadReactor< ::schedule_message>* reactor) = 0;
      virtual void ScheduleEvent(::grpc::ClientContext* context, const ::schedule_request* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ScheduleEvent(::grpc::ClientContext* context, const ::schedule_request* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetReferals(::grpc::ClientContext* context, const ::patient_message* request, ::grpc::ClientReadReactor< ::med_event_message>* reactor) = 0;
      virtual void GetDoctors(::grpc::ClientContext* context, const ::Empty* request, ::grpc::ClientReadReactor< ::account_message>* reactor) = 0;
      virtual void GetSchedules(::grpc::ClientContext* context, const ::account_message* request, ::grpc::ClientReadReactor< ::schedule_message>* reactor) = 0;
      virtual void AddAccount(::grpc::ClientContext* context, const ::add_account_msg* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddAccount(::grpc::ClientContext* context, const ::add_account_msg* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ResetPassword(::grpc::ClientContext* context, const ::account_message* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ResetPassword(::grpc::ClientContext* context, const ::account_message* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteAccount(::grpc::ClientContext* context, const ::account_message* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteAccount(::grpc::ClientContext* context, const ::account_message* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AddSchedule(::grpc::ClientContext* context, const ::schedule_message* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddSchedule(::grpc::ClientContext* context, const ::schedule_message* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteSchedule(::grpc::ClientContext* context, const ::schedule_message* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteSchedule(::grpc::ClientContext* context, const ::schedule_message* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAccounts(::grpc::ClientContext* context, const ::Empty* request, ::grpc::ClientReadReactor< ::account_message>* reactor) = 0;
      virtual void GetPatientsHistory(::grpc::ClientContext* context, const ::account_message* request, ::grpc::ClientReadReactor< ::med_event_message>* reactor) = 0;
      virtual void GetPatientsEvent(::grpc::ClientContext* context, const ::med_event_message* request, ::event_response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPatientsEvent(::grpc::ClientContext* context, const ::med_event_message* request, ::event_response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetPatientsEvents(::grpc::ClientContext* context, const ::account_message* request, ::grpc::ClientReadReactor< ::med_event_message>* reactor) = 0;
      virtual void GetPatientPrescribtion(::grpc::ClientContext* context, const ::account_message* request, ::grpc::ClientReadReactor< ::prescribtion_message>* reactor) = 0;
      virtual void GetExamResults(::grpc::ClientContext* context, const ::exam_message* request, ::result* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetExamResults(::grpc::ClientContext* context, const ::exam_message* request, ::result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetDoctorSchedules(::grpc::ClientContext* context, const ::account_message* request, ::grpc::ClientReadReactor< ::schedule_message>* reactor) = 0;
      virtual void GetScheduledEvents(::grpc::ClientContext* context, const ::schedule_message* request, ::grpc::ClientReadReactor< ::med_event_message>* reactor) = 0;
      virtual void GetScheduledPatients(::grpc::ClientContext* context, const ::schedule_message* request, ::grpc::ClientReadReactor< ::patient_message>* reactor) = 0;
      virtual void NewReferal(::grpc::ClientContext* context, const ::med_event_message* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NewReferal(::grpc::ClientContext* context, const ::med_event_message* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void NewPrescribtion(::grpc::ClientContext* context, const ::prescribtion_message* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NewPrescribtion(::grpc::ClientContext* context, const ::prescribtion_message* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void EventDone(::grpc::ClientContext* context, const ::med_event_message* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EventDone(::grpc::ClientContext* context, const ::med_event_message* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ScheduleDone(::grpc::ClientContext* context, const ::schedule_message* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ScheduleDone(::grpc::ClientContext* context, const ::schedule_message* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AddResult(::grpc::ClientContext* context, const ::result* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddResult(::grpc::ClientContext* context, const ::result* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::account_message>* AsyncSearchForAccountRaw(::grpc::ClientContext* context, const ::account_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::account_message>* PrepareAsyncSearchForAccountRaw(::grpc::ClientContext* context, const ::account_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncUpdatePatientDataRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncUpdatePatientDataRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::patient_message>* AsyncSearchForPatientRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::patient_message>* PrepareAsyncSearchForPatientRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::patient_message>* SearchForPatientsRaw(::grpc::ClientContext* context, const ::patient_message& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::patient_message>* AsyncSearchForPatientsRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::patient_message>* PrepareAsyncSearchForPatientsRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::med_event_message>* GetNextVisitsRaw(::grpc::ClientContext* context, const ::patient_message& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::med_event_message>* AsyncGetNextVisitsRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::med_event_message>* PrepareAsyncGetNextVisitsRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::prescribtion_message>* GetPrescribtionsRaw(::grpc::ClientContext* context, const ::patient_message& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::prescribtion_message>* AsyncGetPrescribtionsRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::prescribtion_message>* PrepareAsyncGetPrescribtionsRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::exam_message>* GetExamRaw(::grpc::ClientContext* context, const ::patient_message& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::exam_message>* AsyncGetExamRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::exam_message>* PrepareAsyncGetExamRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::procedure_message>* GetProcedureRaw(::grpc::ClientContext* context, const ::patient_message& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::procedure_message>* AsyncGetProcedureRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::procedure_message>* PrepareAsyncGetProcedureRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::schedule_message>* GetAvailableVisitsRaw(::grpc::ClientContext* context, const ::med_event_message& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::schedule_message>* AsyncGetAvailableVisitsRaw(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::schedule_message>* PrepareAsyncGetAvailableVisitsRaw(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::schedule_message>* GetAvailableExamsRaw(::grpc::ClientContext* context, const ::exam_message& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::schedule_message>* AsyncGetAvailableExamsRaw(::grpc::ClientContext* context, const ::exam_message& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::schedule_message>* PrepareAsyncGetAvailableExamsRaw(::grpc::ClientContext* context, const ::exam_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::schedule_message>* GetAvailableProcsRaw(::grpc::ClientContext* context, const ::procedure_message& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::schedule_message>* AsyncGetAvailableProcsRaw(::grpc::ClientContext* context, const ::procedure_message& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::schedule_message>* PrepareAsyncGetAvailableProcsRaw(::grpc::ClientContext* context, const ::procedure_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncScheduleEventRaw(::grpc::ClientContext* context, const ::schedule_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncScheduleEventRaw(::grpc::ClientContext* context, const ::schedule_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::med_event_message>* GetReferalsRaw(::grpc::ClientContext* context, const ::patient_message& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::med_event_message>* AsyncGetReferalsRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::med_event_message>* PrepareAsyncGetReferalsRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::account_message>* GetDoctorsRaw(::grpc::ClientContext* context, const ::Empty& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::account_message>* AsyncGetDoctorsRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::account_message>* PrepareAsyncGetDoctorsRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::schedule_message>* GetSchedulesRaw(::grpc::ClientContext* context, const ::account_message& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::schedule_message>* AsyncGetSchedulesRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::schedule_message>* PrepareAsyncGetSchedulesRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncAddAccountRaw(::grpc::ClientContext* context, const ::add_account_msg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncAddAccountRaw(::grpc::ClientContext* context, const ::add_account_msg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncResetPasswordRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncResetPasswordRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncDeleteAccountRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncDeleteAccountRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncAddScheduleRaw(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncAddScheduleRaw(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncDeleteScheduleRaw(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncDeleteScheduleRaw(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::account_message>* GetAccountsRaw(::grpc::ClientContext* context, const ::Empty& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::account_message>* AsyncGetAccountsRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::account_message>* PrepareAsyncGetAccountsRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::med_event_message>* GetPatientsHistoryRaw(::grpc::ClientContext* context, const ::account_message& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::med_event_message>* AsyncGetPatientsHistoryRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::med_event_message>* PrepareAsyncGetPatientsHistoryRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_response>* AsyncGetPatientsEventRaw(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_response>* PrepareAsyncGetPatientsEventRaw(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::med_event_message>* GetPatientsEventsRaw(::grpc::ClientContext* context, const ::account_message& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::med_event_message>* AsyncGetPatientsEventsRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::med_event_message>* PrepareAsyncGetPatientsEventsRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::prescribtion_message>* GetPatientPrescribtionRaw(::grpc::ClientContext* context, const ::account_message& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::prescribtion_message>* AsyncGetPatientPrescribtionRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::prescribtion_message>* PrepareAsyncGetPatientPrescribtionRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::result>* AsyncGetExamResultsRaw(::grpc::ClientContext* context, const ::exam_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::result>* PrepareAsyncGetExamResultsRaw(::grpc::ClientContext* context, const ::exam_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::schedule_message>* GetDoctorSchedulesRaw(::grpc::ClientContext* context, const ::account_message& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::schedule_message>* AsyncGetDoctorSchedulesRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::schedule_message>* PrepareAsyncGetDoctorSchedulesRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::med_event_message>* GetScheduledEventsRaw(::grpc::ClientContext* context, const ::schedule_message& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::med_event_message>* AsyncGetScheduledEventsRaw(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::med_event_message>* PrepareAsyncGetScheduledEventsRaw(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::patient_message>* GetScheduledPatientsRaw(::grpc::ClientContext* context, const ::schedule_message& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::patient_message>* AsyncGetScheduledPatientsRaw(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::patient_message>* PrepareAsyncGetScheduledPatientsRaw(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncNewReferalRaw(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncNewReferalRaw(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncNewPrescribtionRaw(::grpc::ClientContext* context, const ::prescribtion_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncNewPrescribtionRaw(::grpc::ClientContext* context, const ::prescribtion_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncEventDoneRaw(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncEventDoneRaw(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncScheduleDoneRaw(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncScheduleDoneRaw(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncAddResultRaw(::grpc::ClientContext* context, const ::result& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncAddResultRaw(::grpc::ClientContext* context, const ::result& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SearchForAccount(::grpc::ClientContext* context, const ::account_request& request, ::account_message* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account_message>> AsyncSearchForAccount(::grpc::ClientContext* context, const ::account_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account_message>>(AsyncSearchForAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account_message>> PrepareAsyncSearchForAccount(::grpc::ClientContext* context, const ::account_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account_message>>(PrepareAsyncSearchForAccountRaw(context, request, cq));
    }
    ::grpc::Status UpdatePatientData(::grpc::ClientContext* context, const ::patient_message& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncUpdatePatientData(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncUpdatePatientDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncUpdatePatientData(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncUpdatePatientDataRaw(context, request, cq));
    }
    ::grpc::Status SearchForPatient(::grpc::ClientContext* context, const ::patient_message& request, ::patient_message* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::patient_message>> AsyncSearchForPatient(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::patient_message>>(AsyncSearchForPatientRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::patient_message>> PrepareAsyncSearchForPatient(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::patient_message>>(PrepareAsyncSearchForPatientRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::patient_message>> SearchForPatients(::grpc::ClientContext* context, const ::patient_message& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::patient_message>>(SearchForPatientsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::patient_message>> AsyncSearchForPatients(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::patient_message>>(AsyncSearchForPatientsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::patient_message>> PrepareAsyncSearchForPatients(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::patient_message>>(PrepareAsyncSearchForPatientsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::med_event_message>> GetNextVisits(::grpc::ClientContext* context, const ::patient_message& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::med_event_message>>(GetNextVisitsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::med_event_message>> AsyncGetNextVisits(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::med_event_message>>(AsyncGetNextVisitsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::med_event_message>> PrepareAsyncGetNextVisits(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::med_event_message>>(PrepareAsyncGetNextVisitsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::prescribtion_message>> GetPrescribtions(::grpc::ClientContext* context, const ::patient_message& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::prescribtion_message>>(GetPrescribtionsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::prescribtion_message>> AsyncGetPrescribtions(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::prescribtion_message>>(AsyncGetPrescribtionsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::prescribtion_message>> PrepareAsyncGetPrescribtions(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::prescribtion_message>>(PrepareAsyncGetPrescribtionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::exam_message>> GetExam(::grpc::ClientContext* context, const ::patient_message& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::exam_message>>(GetExamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::exam_message>> AsyncGetExam(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::exam_message>>(AsyncGetExamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::exam_message>> PrepareAsyncGetExam(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::exam_message>>(PrepareAsyncGetExamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::procedure_message>> GetProcedure(::grpc::ClientContext* context, const ::patient_message& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::procedure_message>>(GetProcedureRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::procedure_message>> AsyncGetProcedure(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::procedure_message>>(AsyncGetProcedureRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::procedure_message>> PrepareAsyncGetProcedure(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::procedure_message>>(PrepareAsyncGetProcedureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::schedule_message>> GetAvailableVisits(::grpc::ClientContext* context, const ::med_event_message& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::schedule_message>>(GetAvailableVisitsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::schedule_message>> AsyncGetAvailableVisits(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::schedule_message>>(AsyncGetAvailableVisitsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::schedule_message>> PrepareAsyncGetAvailableVisits(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::schedule_message>>(PrepareAsyncGetAvailableVisitsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::schedule_message>> GetAvailableExams(::grpc::ClientContext* context, const ::exam_message& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::schedule_message>>(GetAvailableExamsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::schedule_message>> AsyncGetAvailableExams(::grpc::ClientContext* context, const ::exam_message& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::schedule_message>>(AsyncGetAvailableExamsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::schedule_message>> PrepareAsyncGetAvailableExams(::grpc::ClientContext* context, const ::exam_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::schedule_message>>(PrepareAsyncGetAvailableExamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::schedule_message>> GetAvailableProcs(::grpc::ClientContext* context, const ::procedure_message& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::schedule_message>>(GetAvailableProcsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::schedule_message>> AsyncGetAvailableProcs(::grpc::ClientContext* context, const ::procedure_message& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::schedule_message>>(AsyncGetAvailableProcsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::schedule_message>> PrepareAsyncGetAvailableProcs(::grpc::ClientContext* context, const ::procedure_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::schedule_message>>(PrepareAsyncGetAvailableProcsRaw(context, request, cq));
    }
    ::grpc::Status ScheduleEvent(::grpc::ClientContext* context, const ::schedule_request& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncScheduleEvent(::grpc::ClientContext* context, const ::schedule_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncScheduleEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncScheduleEvent(::grpc::ClientContext* context, const ::schedule_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncScheduleEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::med_event_message>> GetReferals(::grpc::ClientContext* context, const ::patient_message& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::med_event_message>>(GetReferalsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::med_event_message>> AsyncGetReferals(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::med_event_message>>(AsyncGetReferalsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::med_event_message>> PrepareAsyncGetReferals(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::med_event_message>>(PrepareAsyncGetReferalsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::account_message>> GetDoctors(::grpc::ClientContext* context, const ::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::account_message>>(GetDoctorsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::account_message>> AsyncGetDoctors(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::account_message>>(AsyncGetDoctorsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::account_message>> PrepareAsyncGetDoctors(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::account_message>>(PrepareAsyncGetDoctorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::schedule_message>> GetSchedules(::grpc::ClientContext* context, const ::account_message& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::schedule_message>>(GetSchedulesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::schedule_message>> AsyncGetSchedules(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::schedule_message>>(AsyncGetSchedulesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::schedule_message>> PrepareAsyncGetSchedules(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::schedule_message>>(PrepareAsyncGetSchedulesRaw(context, request, cq));
    }
    ::grpc::Status AddAccount(::grpc::ClientContext* context, const ::add_account_msg& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncAddAccount(::grpc::ClientContext* context, const ::add_account_msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncAddAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncAddAccount(::grpc::ClientContext* context, const ::add_account_msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncAddAccountRaw(context, request, cq));
    }
    ::grpc::Status ResetPassword(::grpc::ClientContext* context, const ::account_message& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncResetPassword(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncResetPasswordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncResetPassword(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncResetPasswordRaw(context, request, cq));
    }
    ::grpc::Status DeleteAccount(::grpc::ClientContext* context, const ::account_message& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncDeleteAccount(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncDeleteAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncDeleteAccount(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncDeleteAccountRaw(context, request, cq));
    }
    ::grpc::Status AddSchedule(::grpc::ClientContext* context, const ::schedule_message& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncAddSchedule(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncAddScheduleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncAddSchedule(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncAddScheduleRaw(context, request, cq));
    }
    ::grpc::Status DeleteSchedule(::grpc::ClientContext* context, const ::schedule_message& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncDeleteSchedule(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncDeleteScheduleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncDeleteSchedule(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncDeleteScheduleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::account_message>> GetAccounts(::grpc::ClientContext* context, const ::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::account_message>>(GetAccountsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::account_message>> AsyncGetAccounts(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::account_message>>(AsyncGetAccountsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::account_message>> PrepareAsyncGetAccounts(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::account_message>>(PrepareAsyncGetAccountsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::med_event_message>> GetPatientsHistory(::grpc::ClientContext* context, const ::account_message& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::med_event_message>>(GetPatientsHistoryRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::med_event_message>> AsyncGetPatientsHistory(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::med_event_message>>(AsyncGetPatientsHistoryRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::med_event_message>> PrepareAsyncGetPatientsHistory(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::med_event_message>>(PrepareAsyncGetPatientsHistoryRaw(context, request, cq));
    }
    ::grpc::Status GetPatientsEvent(::grpc::ClientContext* context, const ::med_event_message& request, ::event_response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_response>> AsyncGetPatientsEvent(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_response>>(AsyncGetPatientsEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_response>> PrepareAsyncGetPatientsEvent(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_response>>(PrepareAsyncGetPatientsEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::med_event_message>> GetPatientsEvents(::grpc::ClientContext* context, const ::account_message& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::med_event_message>>(GetPatientsEventsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::med_event_message>> AsyncGetPatientsEvents(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::med_event_message>>(AsyncGetPatientsEventsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::med_event_message>> PrepareAsyncGetPatientsEvents(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::med_event_message>>(PrepareAsyncGetPatientsEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::prescribtion_message>> GetPatientPrescribtion(::grpc::ClientContext* context, const ::account_message& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::prescribtion_message>>(GetPatientPrescribtionRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::prescribtion_message>> AsyncGetPatientPrescribtion(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::prescribtion_message>>(AsyncGetPatientPrescribtionRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::prescribtion_message>> PrepareAsyncGetPatientPrescribtion(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::prescribtion_message>>(PrepareAsyncGetPatientPrescribtionRaw(context, request, cq));
    }
    ::grpc::Status GetExamResults(::grpc::ClientContext* context, const ::exam_message& request, ::result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::result>> AsyncGetExamResults(::grpc::ClientContext* context, const ::exam_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::result>>(AsyncGetExamResultsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::result>> PrepareAsyncGetExamResults(::grpc::ClientContext* context, const ::exam_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::result>>(PrepareAsyncGetExamResultsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::schedule_message>> GetDoctorSchedules(::grpc::ClientContext* context, const ::account_message& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::schedule_message>>(GetDoctorSchedulesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::schedule_message>> AsyncGetDoctorSchedules(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::schedule_message>>(AsyncGetDoctorSchedulesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::schedule_message>> PrepareAsyncGetDoctorSchedules(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::schedule_message>>(PrepareAsyncGetDoctorSchedulesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::med_event_message>> GetScheduledEvents(::grpc::ClientContext* context, const ::schedule_message& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::med_event_message>>(GetScheduledEventsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::med_event_message>> AsyncGetScheduledEvents(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::med_event_message>>(AsyncGetScheduledEventsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::med_event_message>> PrepareAsyncGetScheduledEvents(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::med_event_message>>(PrepareAsyncGetScheduledEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::patient_message>> GetScheduledPatients(::grpc::ClientContext* context, const ::schedule_message& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::patient_message>>(GetScheduledPatientsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::patient_message>> AsyncGetScheduledPatients(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::patient_message>>(AsyncGetScheduledPatientsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::patient_message>> PrepareAsyncGetScheduledPatients(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::patient_message>>(PrepareAsyncGetScheduledPatientsRaw(context, request, cq));
    }
    ::grpc::Status NewReferal(::grpc::ClientContext* context, const ::med_event_message& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncNewReferal(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncNewReferalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncNewReferal(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncNewReferalRaw(context, request, cq));
    }
    ::grpc::Status NewPrescribtion(::grpc::ClientContext* context, const ::prescribtion_message& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncNewPrescribtion(::grpc::ClientContext* context, const ::prescribtion_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncNewPrescribtionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncNewPrescribtion(::grpc::ClientContext* context, const ::prescribtion_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncNewPrescribtionRaw(context, request, cq));
    }
    ::grpc::Status EventDone(::grpc::ClientContext* context, const ::med_event_message& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncEventDone(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncEventDoneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncEventDone(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncEventDoneRaw(context, request, cq));
    }
    ::grpc::Status ScheduleDone(::grpc::ClientContext* context, const ::schedule_message& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncScheduleDone(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncScheduleDoneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncScheduleDone(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncScheduleDoneRaw(context, request, cq));
    }
    ::grpc::Status AddResult(::grpc::ClientContext* context, const ::result& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncAddResult(::grpc::ClientContext* context, const ::result& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncAddResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncAddResult(::grpc::ClientContext* context, const ::result& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncAddResultRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SearchForAccount(::grpc::ClientContext* context, const ::account_request* request, ::account_message* response, std::function<void(::grpc::Status)>) override;
      void SearchForAccount(::grpc::ClientContext* context, const ::account_request* request, ::account_message* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdatePatientData(::grpc::ClientContext* context, const ::patient_message* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      void UpdatePatientData(::grpc::ClientContext* context, const ::patient_message* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SearchForPatient(::grpc::ClientContext* context, const ::patient_message* request, ::patient_message* response, std::function<void(::grpc::Status)>) override;
      void SearchForPatient(::grpc::ClientContext* context, const ::patient_message* request, ::patient_message* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SearchForPatients(::grpc::ClientContext* context, const ::patient_message* request, ::grpc::ClientReadReactor< ::patient_message>* reactor) override;
      void GetNextVisits(::grpc::ClientContext* context, const ::patient_message* request, ::grpc::ClientReadReactor< ::med_event_message>* reactor) override;
      void GetPrescribtions(::grpc::ClientContext* context, const ::patient_message* request, ::grpc::ClientReadReactor< ::prescribtion_message>* reactor) override;
      void GetExam(::grpc::ClientContext* context, const ::patient_message* request, ::grpc::ClientReadReactor< ::exam_message>* reactor) override;
      void GetProcedure(::grpc::ClientContext* context, const ::patient_message* request, ::grpc::ClientReadReactor< ::procedure_message>* reactor) override;
      void GetAvailableVisits(::grpc::ClientContext* context, const ::med_event_message* request, ::grpc::ClientReadReactor< ::schedule_message>* reactor) override;
      void GetAvailableExams(::grpc::ClientContext* context, const ::exam_message* request, ::grpc::ClientReadReactor< ::schedule_message>* reactor) override;
      void GetAvailableProcs(::grpc::ClientContext* context, const ::procedure_message* request, ::grpc::ClientReadReactor< ::schedule_message>* reactor) override;
      void ScheduleEvent(::grpc::ClientContext* context, const ::schedule_request* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      void ScheduleEvent(::grpc::ClientContext* context, const ::schedule_request* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetReferals(::grpc::ClientContext* context, const ::patient_message* request, ::grpc::ClientReadReactor< ::med_event_message>* reactor) override;
      void GetDoctors(::grpc::ClientContext* context, const ::Empty* request, ::grpc::ClientReadReactor< ::account_message>* reactor) override;
      void GetSchedules(::grpc::ClientContext* context, const ::account_message* request, ::grpc::ClientReadReactor< ::schedule_message>* reactor) override;
      void AddAccount(::grpc::ClientContext* context, const ::add_account_msg* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      void AddAccount(::grpc::ClientContext* context, const ::add_account_msg* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ResetPassword(::grpc::ClientContext* context, const ::account_message* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      void ResetPassword(::grpc::ClientContext* context, const ::account_message* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteAccount(::grpc::ClientContext* context, const ::account_message* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteAccount(::grpc::ClientContext* context, const ::account_message* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddSchedule(::grpc::ClientContext* context, const ::schedule_message* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      void AddSchedule(::grpc::ClientContext* context, const ::schedule_message* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteSchedule(::grpc::ClientContext* context, const ::schedule_message* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteSchedule(::grpc::ClientContext* context, const ::schedule_message* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAccounts(::grpc::ClientContext* context, const ::Empty* request, ::grpc::ClientReadReactor< ::account_message>* reactor) override;
      void GetPatientsHistory(::grpc::ClientContext* context, const ::account_message* request, ::grpc::ClientReadReactor< ::med_event_message>* reactor) override;
      void GetPatientsEvent(::grpc::ClientContext* context, const ::med_event_message* request, ::event_response* response, std::function<void(::grpc::Status)>) override;
      void GetPatientsEvent(::grpc::ClientContext* context, const ::med_event_message* request, ::event_response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPatientsEvents(::grpc::ClientContext* context, const ::account_message* request, ::grpc::ClientReadReactor< ::med_event_message>* reactor) override;
      void GetPatientPrescribtion(::grpc::ClientContext* context, const ::account_message* request, ::grpc::ClientReadReactor< ::prescribtion_message>* reactor) override;
      void GetExamResults(::grpc::ClientContext* context, const ::exam_message* request, ::result* response, std::function<void(::grpc::Status)>) override;
      void GetExamResults(::grpc::ClientContext* context, const ::exam_message* request, ::result* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDoctorSchedules(::grpc::ClientContext* context, const ::account_message* request, ::grpc::ClientReadReactor< ::schedule_message>* reactor) override;
      void GetScheduledEvents(::grpc::ClientContext* context, const ::schedule_message* request, ::grpc::ClientReadReactor< ::med_event_message>* reactor) override;
      void GetScheduledPatients(::grpc::ClientContext* context, const ::schedule_message* request, ::grpc::ClientReadReactor< ::patient_message>* reactor) override;
      void NewReferal(::grpc::ClientContext* context, const ::med_event_message* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      void NewReferal(::grpc::ClientContext* context, const ::med_event_message* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NewPrescribtion(::grpc::ClientContext* context, const ::prescribtion_message* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      void NewPrescribtion(::grpc::ClientContext* context, const ::prescribtion_message* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EventDone(::grpc::ClientContext* context, const ::med_event_message* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      void EventDone(::grpc::ClientContext* context, const ::med_event_message* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ScheduleDone(::grpc::ClientContext* context, const ::schedule_message* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      void ScheduleDone(::grpc::ClientContext* context, const ::schedule_message* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddResult(::grpc::ClientContext* context, const ::result* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      void AddResult(::grpc::ClientContext* context, const ::result* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::account_message>* AsyncSearchForAccountRaw(::grpc::ClientContext* context, const ::account_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::account_message>* PrepareAsyncSearchForAccountRaw(::grpc::ClientContext* context, const ::account_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncUpdatePatientDataRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncUpdatePatientDataRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::patient_message>* AsyncSearchForPatientRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::patient_message>* PrepareAsyncSearchForPatientRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::patient_message>* SearchForPatientsRaw(::grpc::ClientContext* context, const ::patient_message& request) override;
    ::grpc::ClientAsyncReader< ::patient_message>* AsyncSearchForPatientsRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::patient_message>* PrepareAsyncSearchForPatientsRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::med_event_message>* GetNextVisitsRaw(::grpc::ClientContext* context, const ::patient_message& request) override;
    ::grpc::ClientAsyncReader< ::med_event_message>* AsyncGetNextVisitsRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::med_event_message>* PrepareAsyncGetNextVisitsRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::prescribtion_message>* GetPrescribtionsRaw(::grpc::ClientContext* context, const ::patient_message& request) override;
    ::grpc::ClientAsyncReader< ::prescribtion_message>* AsyncGetPrescribtionsRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::prescribtion_message>* PrepareAsyncGetPrescribtionsRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::exam_message>* GetExamRaw(::grpc::ClientContext* context, const ::patient_message& request) override;
    ::grpc::ClientAsyncReader< ::exam_message>* AsyncGetExamRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::exam_message>* PrepareAsyncGetExamRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::procedure_message>* GetProcedureRaw(::grpc::ClientContext* context, const ::patient_message& request) override;
    ::grpc::ClientAsyncReader< ::procedure_message>* AsyncGetProcedureRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::procedure_message>* PrepareAsyncGetProcedureRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::schedule_message>* GetAvailableVisitsRaw(::grpc::ClientContext* context, const ::med_event_message& request) override;
    ::grpc::ClientAsyncReader< ::schedule_message>* AsyncGetAvailableVisitsRaw(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::schedule_message>* PrepareAsyncGetAvailableVisitsRaw(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::schedule_message>* GetAvailableExamsRaw(::grpc::ClientContext* context, const ::exam_message& request) override;
    ::grpc::ClientAsyncReader< ::schedule_message>* AsyncGetAvailableExamsRaw(::grpc::ClientContext* context, const ::exam_message& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::schedule_message>* PrepareAsyncGetAvailableExamsRaw(::grpc::ClientContext* context, const ::exam_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::schedule_message>* GetAvailableProcsRaw(::grpc::ClientContext* context, const ::procedure_message& request) override;
    ::grpc::ClientAsyncReader< ::schedule_message>* AsyncGetAvailableProcsRaw(::grpc::ClientContext* context, const ::procedure_message& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::schedule_message>* PrepareAsyncGetAvailableProcsRaw(::grpc::ClientContext* context, const ::procedure_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncScheduleEventRaw(::grpc::ClientContext* context, const ::schedule_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncScheduleEventRaw(::grpc::ClientContext* context, const ::schedule_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::med_event_message>* GetReferalsRaw(::grpc::ClientContext* context, const ::patient_message& request) override;
    ::grpc::ClientAsyncReader< ::med_event_message>* AsyncGetReferalsRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::med_event_message>* PrepareAsyncGetReferalsRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::account_message>* GetDoctorsRaw(::grpc::ClientContext* context, const ::Empty& request) override;
    ::grpc::ClientAsyncReader< ::account_message>* AsyncGetDoctorsRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::account_message>* PrepareAsyncGetDoctorsRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::schedule_message>* GetSchedulesRaw(::grpc::ClientContext* context, const ::account_message& request) override;
    ::grpc::ClientAsyncReader< ::schedule_message>* AsyncGetSchedulesRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::schedule_message>* PrepareAsyncGetSchedulesRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncAddAccountRaw(::grpc::ClientContext* context, const ::add_account_msg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncAddAccountRaw(::grpc::ClientContext* context, const ::add_account_msg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncResetPasswordRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncResetPasswordRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncDeleteAccountRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncDeleteAccountRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncAddScheduleRaw(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncAddScheduleRaw(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncDeleteScheduleRaw(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncDeleteScheduleRaw(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::account_message>* GetAccountsRaw(::grpc::ClientContext* context, const ::Empty& request) override;
    ::grpc::ClientAsyncReader< ::account_message>* AsyncGetAccountsRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::account_message>* PrepareAsyncGetAccountsRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::med_event_message>* GetPatientsHistoryRaw(::grpc::ClientContext* context, const ::account_message& request) override;
    ::grpc::ClientAsyncReader< ::med_event_message>* AsyncGetPatientsHistoryRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::med_event_message>* PrepareAsyncGetPatientsHistoryRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_response>* AsyncGetPatientsEventRaw(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_response>* PrepareAsyncGetPatientsEventRaw(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::med_event_message>* GetPatientsEventsRaw(::grpc::ClientContext* context, const ::account_message& request) override;
    ::grpc::ClientAsyncReader< ::med_event_message>* AsyncGetPatientsEventsRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::med_event_message>* PrepareAsyncGetPatientsEventsRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::prescribtion_message>* GetPatientPrescribtionRaw(::grpc::ClientContext* context, const ::account_message& request) override;
    ::grpc::ClientAsyncReader< ::prescribtion_message>* AsyncGetPatientPrescribtionRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::prescribtion_message>* PrepareAsyncGetPatientPrescribtionRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::result>* AsyncGetExamResultsRaw(::grpc::ClientContext* context, const ::exam_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::result>* PrepareAsyncGetExamResultsRaw(::grpc::ClientContext* context, const ::exam_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::schedule_message>* GetDoctorSchedulesRaw(::grpc::ClientContext* context, const ::account_message& request) override;
    ::grpc::ClientAsyncReader< ::schedule_message>* AsyncGetDoctorSchedulesRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::schedule_message>* PrepareAsyncGetDoctorSchedulesRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::med_event_message>* GetScheduledEventsRaw(::grpc::ClientContext* context, const ::schedule_message& request) override;
    ::grpc::ClientAsyncReader< ::med_event_message>* AsyncGetScheduledEventsRaw(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::med_event_message>* PrepareAsyncGetScheduledEventsRaw(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::patient_message>* GetScheduledPatientsRaw(::grpc::ClientContext* context, const ::schedule_message& request) override;
    ::grpc::ClientAsyncReader< ::patient_message>* AsyncGetScheduledPatientsRaw(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::patient_message>* PrepareAsyncGetScheduledPatientsRaw(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncNewReferalRaw(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncNewReferalRaw(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncNewPrescribtionRaw(::grpc::ClientContext* context, const ::prescribtion_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncNewPrescribtionRaw(::grpc::ClientContext* context, const ::prescribtion_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncEventDoneRaw(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncEventDoneRaw(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncScheduleDoneRaw(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncScheduleDoneRaw(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncAddResultRaw(::grpc::ClientContext* context, const ::result& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncAddResultRaw(::grpc::ClientContext* context, const ::result& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SearchForAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdatePatientData_;
    const ::grpc::internal::RpcMethod rpcmethod_SearchForPatient_;
    const ::grpc::internal::RpcMethod rpcmethod_SearchForPatients_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNextVisits_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPrescribtions_;
    const ::grpc::internal::RpcMethod rpcmethod_GetExam_;
    const ::grpc::internal::RpcMethod rpcmethod_GetProcedure_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAvailableVisits_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAvailableExams_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAvailableProcs_;
    const ::grpc::internal::RpcMethod rpcmethod_ScheduleEvent_;
    const ::grpc::internal::RpcMethod rpcmethod_GetReferals_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDoctors_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSchedules_;
    const ::grpc::internal::RpcMethod rpcmethod_AddAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_ResetPassword_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_AddSchedule_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteSchedule_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAccounts_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPatientsHistory_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPatientsEvent_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPatientsEvents_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPatientPrescribtion_;
    const ::grpc::internal::RpcMethod rpcmethod_GetExamResults_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDoctorSchedules_;
    const ::grpc::internal::RpcMethod rpcmethod_GetScheduledEvents_;
    const ::grpc::internal::RpcMethod rpcmethod_GetScheduledPatients_;
    const ::grpc::internal::RpcMethod rpcmethod_NewReferal_;
    const ::grpc::internal::RpcMethod rpcmethod_NewPrescribtion_;
    const ::grpc::internal::RpcMethod rpcmethod_EventDone_;
    const ::grpc::internal::RpcMethod rpcmethod_ScheduleDone_;
    const ::grpc::internal::RpcMethod rpcmethod_AddResult_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SearchForAccount(::grpc::ServerContext* context, const ::account_request* request, ::account_message* response);
    virtual ::grpc::Status UpdatePatientData(::grpc::ServerContext* context, const ::patient_message* request, ::Empty* response);
    virtual ::grpc::Status SearchForPatient(::grpc::ServerContext* context, const ::patient_message* request, ::patient_message* response);
    virtual ::grpc::Status SearchForPatients(::grpc::ServerContext* context, const ::patient_message* request, ::grpc::ServerWriter< ::patient_message>* writer);
    virtual ::grpc::Status GetNextVisits(::grpc::ServerContext* context, const ::patient_message* request, ::grpc::ServerWriter< ::med_event_message>* writer);
    virtual ::grpc::Status GetPrescribtions(::grpc::ServerContext* context, const ::patient_message* request, ::grpc::ServerWriter< ::prescribtion_message>* writer);
    virtual ::grpc::Status GetExam(::grpc::ServerContext* context, const ::patient_message* request, ::grpc::ServerWriter< ::exam_message>* writer);
    virtual ::grpc::Status GetProcedure(::grpc::ServerContext* context, const ::patient_message* request, ::grpc::ServerWriter< ::procedure_message>* writer);
    virtual ::grpc::Status GetAvailableVisits(::grpc::ServerContext* context, const ::med_event_message* request, ::grpc::ServerWriter< ::schedule_message>* writer);
    virtual ::grpc::Status GetAvailableExams(::grpc::ServerContext* context, const ::exam_message* request, ::grpc::ServerWriter< ::schedule_message>* writer);
    virtual ::grpc::Status GetAvailableProcs(::grpc::ServerContext* context, const ::procedure_message* request, ::grpc::ServerWriter< ::schedule_message>* writer);
    virtual ::grpc::Status ScheduleEvent(::grpc::ServerContext* context, const ::schedule_request* request, ::Empty* response);
    virtual ::grpc::Status GetReferals(::grpc::ServerContext* context, const ::patient_message* request, ::grpc::ServerWriter< ::med_event_message>* writer);
    virtual ::grpc::Status GetDoctors(::grpc::ServerContext* context, const ::Empty* request, ::grpc::ServerWriter< ::account_message>* writer);
    virtual ::grpc::Status GetSchedules(::grpc::ServerContext* context, const ::account_message* request, ::grpc::ServerWriter< ::schedule_message>* writer);
    virtual ::grpc::Status AddAccount(::grpc::ServerContext* context, const ::add_account_msg* request, ::Empty* response);
    virtual ::grpc::Status ResetPassword(::grpc::ServerContext* context, const ::account_message* request, ::Empty* response);
    virtual ::grpc::Status DeleteAccount(::grpc::ServerContext* context, const ::account_message* request, ::Empty* response);
    virtual ::grpc::Status AddSchedule(::grpc::ServerContext* context, const ::schedule_message* request, ::Empty* response);
    virtual ::grpc::Status DeleteSchedule(::grpc::ServerContext* context, const ::schedule_message* request, ::Empty* response);
    virtual ::grpc::Status GetAccounts(::grpc::ServerContext* context, const ::Empty* request, ::grpc::ServerWriter< ::account_message>* writer);
    virtual ::grpc::Status GetPatientsHistory(::grpc::ServerContext* context, const ::account_message* request, ::grpc::ServerWriter< ::med_event_message>* writer);
    virtual ::grpc::Status GetPatientsEvent(::grpc::ServerContext* context, const ::med_event_message* request, ::event_response* response);
    virtual ::grpc::Status GetPatientsEvents(::grpc::ServerContext* context, const ::account_message* request, ::grpc::ServerWriter< ::med_event_message>* writer);
    virtual ::grpc::Status GetPatientPrescribtion(::grpc::ServerContext* context, const ::account_message* request, ::grpc::ServerWriter< ::prescribtion_message>* writer);
    virtual ::grpc::Status GetExamResults(::grpc::ServerContext* context, const ::exam_message* request, ::result* response);
    virtual ::grpc::Status GetDoctorSchedules(::grpc::ServerContext* context, const ::account_message* request, ::grpc::ServerWriter< ::schedule_message>* writer);
    virtual ::grpc::Status GetScheduledEvents(::grpc::ServerContext* context, const ::schedule_message* request, ::grpc::ServerWriter< ::med_event_message>* writer);
    virtual ::grpc::Status GetScheduledPatients(::grpc::ServerContext* context, const ::schedule_message* request, ::grpc::ServerWriter< ::patient_message>* writer);
    virtual ::grpc::Status NewReferal(::grpc::ServerContext* context, const ::med_event_message* request, ::Empty* response);
    virtual ::grpc::Status NewPrescribtion(::grpc::ServerContext* context, const ::prescribtion_message* request, ::Empty* response);
    virtual ::grpc::Status EventDone(::grpc::ServerContext* context, const ::med_event_message* request, ::Empty* response);
    virtual ::grpc::Status ScheduleDone(::grpc::ServerContext* context, const ::schedule_message* request, ::Empty* response);
    virtual ::grpc::Status AddResult(::grpc::ServerContext* context, const ::result* request, ::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SearchForAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SearchForAccount() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SearchForAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchForAccount(::grpc::ServerContext* /*context*/, const ::account_request* /*request*/, ::account_message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchForAccount(::grpc::ServerContext* context, ::account_request* request, ::grpc::ServerAsyncResponseWriter< ::account_message>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdatePatientData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdatePatientData() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpdatePatientData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePatientData(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdatePatientData(::grpc::ServerContext* context, ::patient_message* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SearchForPatient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SearchForPatient() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SearchForPatient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchForPatient(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::patient_message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchForPatient(::grpc::ServerContext* context, ::patient_message* request, ::grpc::ServerAsyncResponseWriter< ::patient_message>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SearchForPatients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SearchForPatients() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SearchForPatients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchForPatients(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::patient_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchForPatients(::grpc::ServerContext* context, ::patient_message* request, ::grpc::ServerAsyncWriter< ::patient_message>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNextVisits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNextVisits() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetNextVisits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNextVisits(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::med_event_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNextVisits(::grpc::ServerContext* context, ::patient_message* request, ::grpc::ServerAsyncWriter< ::med_event_message>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPrescribtions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPrescribtions() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetPrescribtions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPrescribtions(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::prescribtion_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPrescribtions(::grpc::ServerContext* context, ::patient_message* request, ::grpc::ServerAsyncWriter< ::prescribtion_message>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetExam : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetExam() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetExam() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExam(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::exam_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExam(::grpc::ServerContext* context, ::patient_message* request, ::grpc::ServerAsyncWriter< ::exam_message>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetProcedure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetProcedure() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetProcedure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProcedure(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::procedure_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProcedure(::grpc::ServerContext* context, ::patient_message* request, ::grpc::ServerAsyncWriter< ::procedure_message>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAvailableVisits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAvailableVisits() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetAvailableVisits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableVisits(::grpc::ServerContext* /*context*/, const ::med_event_message* /*request*/, ::grpc::ServerWriter< ::schedule_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAvailableVisits(::grpc::ServerContext* context, ::med_event_message* request, ::grpc::ServerAsyncWriter< ::schedule_message>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(8, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAvailableExams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAvailableExams() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_GetAvailableExams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableExams(::grpc::ServerContext* /*context*/, const ::exam_message* /*request*/, ::grpc::ServerWriter< ::schedule_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAvailableExams(::grpc::ServerContext* context, ::exam_message* request, ::grpc::ServerAsyncWriter< ::schedule_message>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(9, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAvailableProcs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAvailableProcs() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetAvailableProcs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableProcs(::grpc::ServerContext* /*context*/, const ::procedure_message* /*request*/, ::grpc::ServerWriter< ::schedule_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAvailableProcs(::grpc::ServerContext* context, ::procedure_message* request, ::grpc::ServerAsyncWriter< ::schedule_message>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(10, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ScheduleEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ScheduleEvent() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_ScheduleEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScheduleEvent(::grpc::ServerContext* /*context*/, const ::schedule_request* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScheduleEvent(::grpc::ServerContext* context, ::schedule_request* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetReferals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetReferals() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GetReferals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReferals(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::med_event_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetReferals(::grpc::ServerContext* context, ::patient_message* request, ::grpc::ServerAsyncWriter< ::med_event_message>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(12, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDoctors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDoctors() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_GetDoctors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDoctors(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::grpc::ServerWriter< ::account_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDoctors(::grpc::ServerContext* context, ::Empty* request, ::grpc::ServerAsyncWriter< ::account_message>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(13, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSchedules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSchedules() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_GetSchedules() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSchedules(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::grpc::ServerWriter< ::schedule_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSchedules(::grpc::ServerContext* context, ::account_message* request, ::grpc::ServerAsyncWriter< ::schedule_message>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(14, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddAccount() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_AddAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddAccount(::grpc::ServerContext* /*context*/, const ::add_account_msg* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddAccount(::grpc::ServerContext* context, ::add_account_msg* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ResetPassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ResetPassword() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_ResetPassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetPassword(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetPassword(::grpc::ServerContext* context, ::account_message* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteAccount() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccount(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAccount(::grpc::ServerContext* context, ::account_message* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddSchedule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddSchedule() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_AddSchedule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSchedule(::grpc::ServerContext* /*context*/, const ::schedule_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddSchedule(::grpc::ServerContext* context, ::schedule_message* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteSchedule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteSchedule() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_DeleteSchedule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSchedule(::grpc::ServerContext* /*context*/, const ::schedule_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSchedule(::grpc::ServerContext* context, ::schedule_message* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAccounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAccounts() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_GetAccounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccounts(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::grpc::ServerWriter< ::account_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAccounts(::grpc::ServerContext* context, ::Empty* request, ::grpc::ServerAsyncWriter< ::account_message>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(20, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPatientsHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPatientsHistory() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_GetPatientsHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPatientsHistory(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::grpc::ServerWriter< ::med_event_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPatientsHistory(::grpc::ServerContext* context, ::account_message* request, ::grpc::ServerAsyncWriter< ::med_event_message>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(21, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPatientsEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPatientsEvent() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_GetPatientsEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPatientsEvent(::grpc::ServerContext* /*context*/, const ::med_event_message* /*request*/, ::event_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPatientsEvent(::grpc::ServerContext* context, ::med_event_message* request, ::grpc::ServerAsyncResponseWriter< ::event_response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPatientsEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPatientsEvents() {
      ::grpc::Service::MarkMethodAsync(23);
    }
    ~WithAsyncMethod_GetPatientsEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPatientsEvents(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::grpc::ServerWriter< ::med_event_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPatientsEvents(::grpc::ServerContext* context, ::account_message* request, ::grpc::ServerAsyncWriter< ::med_event_message>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(23, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPatientPrescribtion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPatientPrescribtion() {
      ::grpc::Service::MarkMethodAsync(24);
    }
    ~WithAsyncMethod_GetPatientPrescribtion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPatientPrescribtion(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::grpc::ServerWriter< ::prescribtion_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPatientPrescribtion(::grpc::ServerContext* context, ::account_message* request, ::grpc::ServerAsyncWriter< ::prescribtion_message>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(24, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetExamResults : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetExamResults() {
      ::grpc::Service::MarkMethodAsync(25);
    }
    ~WithAsyncMethod_GetExamResults() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExamResults(::grpc::ServerContext* /*context*/, const ::exam_message* /*request*/, ::result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExamResults(::grpc::ServerContext* context, ::exam_message* request, ::grpc::ServerAsyncResponseWriter< ::result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDoctorSchedules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDoctorSchedules() {
      ::grpc::Service::MarkMethodAsync(26);
    }
    ~WithAsyncMethod_GetDoctorSchedules() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDoctorSchedules(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::grpc::ServerWriter< ::schedule_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDoctorSchedules(::grpc::ServerContext* context, ::account_message* request, ::grpc::ServerAsyncWriter< ::schedule_message>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(26, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetScheduledEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetScheduledEvents() {
      ::grpc::Service::MarkMethodAsync(27);
    }
    ~WithAsyncMethod_GetScheduledEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScheduledEvents(::grpc::ServerContext* /*context*/, const ::schedule_message* /*request*/, ::grpc::ServerWriter< ::med_event_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetScheduledEvents(::grpc::ServerContext* context, ::schedule_message* request, ::grpc::ServerAsyncWriter< ::med_event_message>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(27, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetScheduledPatients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetScheduledPatients() {
      ::grpc::Service::MarkMethodAsync(28);
    }
    ~WithAsyncMethod_GetScheduledPatients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScheduledPatients(::grpc::ServerContext* /*context*/, const ::schedule_message* /*request*/, ::grpc::ServerWriter< ::patient_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetScheduledPatients(::grpc::ServerContext* context, ::schedule_message* request, ::grpc::ServerAsyncWriter< ::patient_message>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(28, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NewReferal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NewReferal() {
      ::grpc::Service::MarkMethodAsync(29);
    }
    ~WithAsyncMethod_NewReferal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewReferal(::grpc::ServerContext* /*context*/, const ::med_event_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewReferal(::grpc::ServerContext* context, ::med_event_message* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NewPrescribtion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NewPrescribtion() {
      ::grpc::Service::MarkMethodAsync(30);
    }
    ~WithAsyncMethod_NewPrescribtion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewPrescribtion(::grpc::ServerContext* /*context*/, const ::prescribtion_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewPrescribtion(::grpc::ServerContext* context, ::prescribtion_message* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EventDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EventDone() {
      ::grpc::Service::MarkMethodAsync(31);
    }
    ~WithAsyncMethod_EventDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EventDone(::grpc::ServerContext* /*context*/, const ::med_event_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEventDone(::grpc::ServerContext* context, ::med_event_message* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ScheduleDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ScheduleDone() {
      ::grpc::Service::MarkMethodAsync(32);
    }
    ~WithAsyncMethod_ScheduleDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScheduleDone(::grpc::ServerContext* /*context*/, const ::schedule_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScheduleDone(::grpc::ServerContext* context, ::schedule_message* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddResult() {
      ::grpc::Service::MarkMethodAsync(33);
    }
    ~WithAsyncMethod_AddResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddResult(::grpc::ServerContext* /*context*/, const ::result* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddResult(::grpc::ServerContext* context, ::result* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SearchForAccount<WithAsyncMethod_UpdatePatientData<WithAsyncMethod_SearchForPatient<WithAsyncMethod_SearchForPatients<WithAsyncMethod_GetNextVisits<WithAsyncMethod_GetPrescribtions<WithAsyncMethod_GetExam<WithAsyncMethod_GetProcedure<WithAsyncMethod_GetAvailableVisits<WithAsyncMethod_GetAvailableExams<WithAsyncMethod_GetAvailableProcs<WithAsyncMethod_ScheduleEvent<WithAsyncMethod_GetReferals<WithAsyncMethod_GetDoctors<WithAsyncMethod_GetSchedules<WithAsyncMethod_AddAccount<WithAsyncMethod_ResetPassword<WithAsyncMethod_DeleteAccount<WithAsyncMethod_AddSchedule<WithAsyncMethod_DeleteSchedule<WithAsyncMethod_GetAccounts<WithAsyncMethod_GetPatientsHistory<WithAsyncMethod_GetPatientsEvent<WithAsyncMethod_GetPatientsEvents<WithAsyncMethod_GetPatientPrescribtion<WithAsyncMethod_GetExamResults<WithAsyncMethod_GetDoctorSchedules<WithAsyncMethod_GetScheduledEvents<WithAsyncMethod_GetScheduledPatients<WithAsyncMethod_NewReferal<WithAsyncMethod_NewPrescribtion<WithAsyncMethod_EventDone<WithAsyncMethod_ScheduleDone<WithAsyncMethod_AddResult<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SearchForAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SearchForAccount() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::account_request, ::account_message>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::account_request* request, ::account_message* response) { return this->SearchForAccount(context, request, response); }));}
    void SetMessageAllocatorFor_SearchForAccount(
        ::grpc::MessageAllocator< ::account_request, ::account_message>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::account_request, ::account_message>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SearchForAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchForAccount(::grpc::ServerContext* /*context*/, const ::account_request* /*request*/, ::account_message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SearchForAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::account_request* /*request*/, ::account_message* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdatePatientData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdatePatientData() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::patient_message, ::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::patient_message* request, ::Empty* response) { return this->UpdatePatientData(context, request, response); }));}
    void SetMessageAllocatorFor_UpdatePatientData(
        ::grpc::MessageAllocator< ::patient_message, ::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::patient_message, ::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdatePatientData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePatientData(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdatePatientData(
      ::grpc::CallbackServerContext* /*context*/, const ::patient_message* /*request*/, ::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SearchForPatient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SearchForPatient() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::patient_message, ::patient_message>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::patient_message* request, ::patient_message* response) { return this->SearchForPatient(context, request, response); }));}
    void SetMessageAllocatorFor_SearchForPatient(
        ::grpc::MessageAllocator< ::patient_message, ::patient_message>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::patient_message, ::patient_message>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SearchForPatient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchForPatient(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::patient_message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SearchForPatient(
      ::grpc::CallbackServerContext* /*context*/, const ::patient_message* /*request*/, ::patient_message* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SearchForPatients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SearchForPatients() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::patient_message, ::patient_message>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::patient_message* request) { return this->SearchForPatients(context, request); }));
    }
    ~WithCallbackMethod_SearchForPatients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchForPatients(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::patient_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::patient_message>* SearchForPatients(
      ::grpc::CallbackServerContext* /*context*/, const ::patient_message* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNextVisits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNextVisits() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::patient_message, ::med_event_message>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::patient_message* request) { return this->GetNextVisits(context, request); }));
    }
    ~WithCallbackMethod_GetNextVisits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNextVisits(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::med_event_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::med_event_message>* GetNextVisits(
      ::grpc::CallbackServerContext* /*context*/, const ::patient_message* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPrescribtions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPrescribtions() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::patient_message, ::prescribtion_message>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::patient_message* request) { return this->GetPrescribtions(context, request); }));
    }
    ~WithCallbackMethod_GetPrescribtions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPrescribtions(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::prescribtion_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::prescribtion_message>* GetPrescribtions(
      ::grpc::CallbackServerContext* /*context*/, const ::patient_message* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetExam : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetExam() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::patient_message, ::exam_message>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::patient_message* request) { return this->GetExam(context, request); }));
    }
    ~WithCallbackMethod_GetExam() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExam(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::exam_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::exam_message>* GetExam(
      ::grpc::CallbackServerContext* /*context*/, const ::patient_message* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetProcedure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetProcedure() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackServerStreamingHandler< ::patient_message, ::procedure_message>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::patient_message* request) { return this->GetProcedure(context, request); }));
    }
    ~WithCallbackMethod_GetProcedure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProcedure(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::procedure_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::procedure_message>* GetProcedure(
      ::grpc::CallbackServerContext* /*context*/, const ::patient_message* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAvailableVisits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAvailableVisits() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackServerStreamingHandler< ::med_event_message, ::schedule_message>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::med_event_message* request) { return this->GetAvailableVisits(context, request); }));
    }
    ~WithCallbackMethod_GetAvailableVisits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableVisits(::grpc::ServerContext* /*context*/, const ::med_event_message* /*request*/, ::grpc::ServerWriter< ::schedule_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::schedule_message>* GetAvailableVisits(
      ::grpc::CallbackServerContext* /*context*/, const ::med_event_message* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAvailableExams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAvailableExams() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackServerStreamingHandler< ::exam_message, ::schedule_message>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::exam_message* request) { return this->GetAvailableExams(context, request); }));
    }
    ~WithCallbackMethod_GetAvailableExams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableExams(::grpc::ServerContext* /*context*/, const ::exam_message* /*request*/, ::grpc::ServerWriter< ::schedule_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::schedule_message>* GetAvailableExams(
      ::grpc::CallbackServerContext* /*context*/, const ::exam_message* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAvailableProcs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAvailableProcs() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackServerStreamingHandler< ::procedure_message, ::schedule_message>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::procedure_message* request) { return this->GetAvailableProcs(context, request); }));
    }
    ~WithCallbackMethod_GetAvailableProcs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableProcs(::grpc::ServerContext* /*context*/, const ::procedure_message* /*request*/, ::grpc::ServerWriter< ::schedule_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::schedule_message>* GetAvailableProcs(
      ::grpc::CallbackServerContext* /*context*/, const ::procedure_message* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ScheduleEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ScheduleEvent() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::schedule_request, ::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::schedule_request* request, ::Empty* response) { return this->ScheduleEvent(context, request, response); }));}
    void SetMessageAllocatorFor_ScheduleEvent(
        ::grpc::MessageAllocator< ::schedule_request, ::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::schedule_request, ::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ScheduleEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScheduleEvent(::grpc::ServerContext* /*context*/, const ::schedule_request* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ScheduleEvent(
      ::grpc::CallbackServerContext* /*context*/, const ::schedule_request* /*request*/, ::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetReferals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetReferals() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackServerStreamingHandler< ::patient_message, ::med_event_message>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::patient_message* request) { return this->GetReferals(context, request); }));
    }
    ~WithCallbackMethod_GetReferals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReferals(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::med_event_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::med_event_message>* GetReferals(
      ::grpc::CallbackServerContext* /*context*/, const ::patient_message* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDoctors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDoctors() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackServerStreamingHandler< ::Empty, ::account_message>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Empty* request) { return this->GetDoctors(context, request); }));
    }
    ~WithCallbackMethod_GetDoctors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDoctors(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::grpc::ServerWriter< ::account_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::account_message>* GetDoctors(
      ::grpc::CallbackServerContext* /*context*/, const ::Empty* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSchedules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSchedules() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackServerStreamingHandler< ::account_message, ::schedule_message>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::account_message* request) { return this->GetSchedules(context, request); }));
    }
    ~WithCallbackMethod_GetSchedules() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSchedules(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::grpc::ServerWriter< ::schedule_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::schedule_message>* GetSchedules(
      ::grpc::CallbackServerContext* /*context*/, const ::account_message* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddAccount() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::add_account_msg, ::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::add_account_msg* request, ::Empty* response) { return this->AddAccount(context, request, response); }));}
    void SetMessageAllocatorFor_AddAccount(
        ::grpc::MessageAllocator< ::add_account_msg, ::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::add_account_msg, ::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddAccount(::grpc::ServerContext* /*context*/, const ::add_account_msg* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::add_account_msg* /*request*/, ::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ResetPassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ResetPassword() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::account_message, ::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::account_message* request, ::Empty* response) { return this->ResetPassword(context, request, response); }));}
    void SetMessageAllocatorFor_ResetPassword(
        ::grpc::MessageAllocator< ::account_message, ::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::account_message, ::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ResetPassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetPassword(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ResetPassword(
      ::grpc::CallbackServerContext* /*context*/, const ::account_message* /*request*/, ::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteAccount() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::account_message, ::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::account_message* request, ::Empty* response) { return this->DeleteAccount(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteAccount(
        ::grpc::MessageAllocator< ::account_message, ::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::account_message, ::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccount(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::account_message* /*request*/, ::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddSchedule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddSchedule() {
      ::grpc::Service::MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::schedule_message, ::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::schedule_message* request, ::Empty* response) { return this->AddSchedule(context, request, response); }));}
    void SetMessageAllocatorFor_AddSchedule(
        ::grpc::MessageAllocator< ::schedule_message, ::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::schedule_message, ::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddSchedule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSchedule(::grpc::ServerContext* /*context*/, const ::schedule_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddSchedule(
      ::grpc::CallbackServerContext* /*context*/, const ::schedule_message* /*request*/, ::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteSchedule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteSchedule() {
      ::grpc::Service::MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::schedule_message, ::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::schedule_message* request, ::Empty* response) { return this->DeleteSchedule(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteSchedule(
        ::grpc::MessageAllocator< ::schedule_message, ::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::schedule_message, ::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteSchedule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSchedule(::grpc::ServerContext* /*context*/, const ::schedule_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteSchedule(
      ::grpc::CallbackServerContext* /*context*/, const ::schedule_message* /*request*/, ::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAccounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAccounts() {
      ::grpc::Service::MarkMethodCallback(20,
          new ::grpc::internal::CallbackServerStreamingHandler< ::Empty, ::account_message>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Empty* request) { return this->GetAccounts(context, request); }));
    }
    ~WithCallbackMethod_GetAccounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccounts(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::grpc::ServerWriter< ::account_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::account_message>* GetAccounts(
      ::grpc::CallbackServerContext* /*context*/, const ::Empty* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPatientsHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPatientsHistory() {
      ::grpc::Service::MarkMethodCallback(21,
          new ::grpc::internal::CallbackServerStreamingHandler< ::account_message, ::med_event_message>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::account_message* request) { return this->GetPatientsHistory(context, request); }));
    }
    ~WithCallbackMethod_GetPatientsHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPatientsHistory(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::grpc::ServerWriter< ::med_event_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::med_event_message>* GetPatientsHistory(
      ::grpc::CallbackServerContext* /*context*/, const ::account_message* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPatientsEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPatientsEvent() {
      ::grpc::Service::MarkMethodCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::med_event_message, ::event_response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::med_event_message* request, ::event_response* response) { return this->GetPatientsEvent(context, request, response); }));}
    void SetMessageAllocatorFor_GetPatientsEvent(
        ::grpc::MessageAllocator< ::med_event_message, ::event_response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(22);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::med_event_message, ::event_response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPatientsEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPatientsEvent(::grpc::ServerContext* /*context*/, const ::med_event_message* /*request*/, ::event_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPatientsEvent(
      ::grpc::CallbackServerContext* /*context*/, const ::med_event_message* /*request*/, ::event_response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPatientsEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPatientsEvents() {
      ::grpc::Service::MarkMethodCallback(23,
          new ::grpc::internal::CallbackServerStreamingHandler< ::account_message, ::med_event_message>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::account_message* request) { return this->GetPatientsEvents(context, request); }));
    }
    ~WithCallbackMethod_GetPatientsEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPatientsEvents(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::grpc::ServerWriter< ::med_event_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::med_event_message>* GetPatientsEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::account_message* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPatientPrescribtion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPatientPrescribtion() {
      ::grpc::Service::MarkMethodCallback(24,
          new ::grpc::internal::CallbackServerStreamingHandler< ::account_message, ::prescribtion_message>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::account_message* request) { return this->GetPatientPrescribtion(context, request); }));
    }
    ~WithCallbackMethod_GetPatientPrescribtion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPatientPrescribtion(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::grpc::ServerWriter< ::prescribtion_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::prescribtion_message>* GetPatientPrescribtion(
      ::grpc::CallbackServerContext* /*context*/, const ::account_message* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetExamResults : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetExamResults() {
      ::grpc::Service::MarkMethodCallback(25,
          new ::grpc::internal::CallbackUnaryHandler< ::exam_message, ::result>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::exam_message* request, ::result* response) { return this->GetExamResults(context, request, response); }));}
    void SetMessageAllocatorFor_GetExamResults(
        ::grpc::MessageAllocator< ::exam_message, ::result>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(25);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::exam_message, ::result>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetExamResults() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExamResults(::grpc::ServerContext* /*context*/, const ::exam_message* /*request*/, ::result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetExamResults(
      ::grpc::CallbackServerContext* /*context*/, const ::exam_message* /*request*/, ::result* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDoctorSchedules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDoctorSchedules() {
      ::grpc::Service::MarkMethodCallback(26,
          new ::grpc::internal::CallbackServerStreamingHandler< ::account_message, ::schedule_message>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::account_message* request) { return this->GetDoctorSchedules(context, request); }));
    }
    ~WithCallbackMethod_GetDoctorSchedules() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDoctorSchedules(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::grpc::ServerWriter< ::schedule_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::schedule_message>* GetDoctorSchedules(
      ::grpc::CallbackServerContext* /*context*/, const ::account_message* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetScheduledEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetScheduledEvents() {
      ::grpc::Service::MarkMethodCallback(27,
          new ::grpc::internal::CallbackServerStreamingHandler< ::schedule_message, ::med_event_message>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::schedule_message* request) { return this->GetScheduledEvents(context, request); }));
    }
    ~WithCallbackMethod_GetScheduledEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScheduledEvents(::grpc::ServerContext* /*context*/, const ::schedule_message* /*request*/, ::grpc::ServerWriter< ::med_event_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::med_event_message>* GetScheduledEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::schedule_message* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetScheduledPatients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetScheduledPatients() {
      ::grpc::Service::MarkMethodCallback(28,
          new ::grpc::internal::CallbackServerStreamingHandler< ::schedule_message, ::patient_message>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::schedule_message* request) { return this->GetScheduledPatients(context, request); }));
    }
    ~WithCallbackMethod_GetScheduledPatients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScheduledPatients(::grpc::ServerContext* /*context*/, const ::schedule_message* /*request*/, ::grpc::ServerWriter< ::patient_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::patient_message>* GetScheduledPatients(
      ::grpc::CallbackServerContext* /*context*/, const ::schedule_message* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NewReferal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NewReferal() {
      ::grpc::Service::MarkMethodCallback(29,
          new ::grpc::internal::CallbackUnaryHandler< ::med_event_message, ::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::med_event_message* request, ::Empty* response) { return this->NewReferal(context, request, response); }));}
    void SetMessageAllocatorFor_NewReferal(
        ::grpc::MessageAllocator< ::med_event_message, ::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(29);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::med_event_message, ::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NewReferal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewReferal(::grpc::ServerContext* /*context*/, const ::med_event_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NewReferal(
      ::grpc::CallbackServerContext* /*context*/, const ::med_event_message* /*request*/, ::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NewPrescribtion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NewPrescribtion() {
      ::grpc::Service::MarkMethodCallback(30,
          new ::grpc::internal::CallbackUnaryHandler< ::prescribtion_message, ::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::prescribtion_message* request, ::Empty* response) { return this->NewPrescribtion(context, request, response); }));}
    void SetMessageAllocatorFor_NewPrescribtion(
        ::grpc::MessageAllocator< ::prescribtion_message, ::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(30);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::prescribtion_message, ::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NewPrescribtion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewPrescribtion(::grpc::ServerContext* /*context*/, const ::prescribtion_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NewPrescribtion(
      ::grpc::CallbackServerContext* /*context*/, const ::prescribtion_message* /*request*/, ::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EventDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EventDone() {
      ::grpc::Service::MarkMethodCallback(31,
          new ::grpc::internal::CallbackUnaryHandler< ::med_event_message, ::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::med_event_message* request, ::Empty* response) { return this->EventDone(context, request, response); }));}
    void SetMessageAllocatorFor_EventDone(
        ::grpc::MessageAllocator< ::med_event_message, ::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(31);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::med_event_message, ::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EventDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EventDone(::grpc::ServerContext* /*context*/, const ::med_event_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EventDone(
      ::grpc::CallbackServerContext* /*context*/, const ::med_event_message* /*request*/, ::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ScheduleDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ScheduleDone() {
      ::grpc::Service::MarkMethodCallback(32,
          new ::grpc::internal::CallbackUnaryHandler< ::schedule_message, ::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::schedule_message* request, ::Empty* response) { return this->ScheduleDone(context, request, response); }));}
    void SetMessageAllocatorFor_ScheduleDone(
        ::grpc::MessageAllocator< ::schedule_message, ::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(32);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::schedule_message, ::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ScheduleDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScheduleDone(::grpc::ServerContext* /*context*/, const ::schedule_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ScheduleDone(
      ::grpc::CallbackServerContext* /*context*/, const ::schedule_message* /*request*/, ::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddResult() {
      ::grpc::Service::MarkMethodCallback(33,
          new ::grpc::internal::CallbackUnaryHandler< ::result, ::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::result* request, ::Empty* response) { return this->AddResult(context, request, response); }));}
    void SetMessageAllocatorFor_AddResult(
        ::grpc::MessageAllocator< ::result, ::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(33);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::result, ::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddResult(::grpc::ServerContext* /*context*/, const ::result* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddResult(
      ::grpc::CallbackServerContext* /*context*/, const ::result* /*request*/, ::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SearchForAccount<WithCallbackMethod_UpdatePatientData<WithCallbackMethod_SearchForPatient<WithCallbackMethod_SearchForPatients<WithCallbackMethod_GetNextVisits<WithCallbackMethod_GetPrescribtions<WithCallbackMethod_GetExam<WithCallbackMethod_GetProcedure<WithCallbackMethod_GetAvailableVisits<WithCallbackMethod_GetAvailableExams<WithCallbackMethod_GetAvailableProcs<WithCallbackMethod_ScheduleEvent<WithCallbackMethod_GetReferals<WithCallbackMethod_GetDoctors<WithCallbackMethod_GetSchedules<WithCallbackMethod_AddAccount<WithCallbackMethod_ResetPassword<WithCallbackMethod_DeleteAccount<WithCallbackMethod_AddSchedule<WithCallbackMethod_DeleteSchedule<WithCallbackMethod_GetAccounts<WithCallbackMethod_GetPatientsHistory<WithCallbackMethod_GetPatientsEvent<WithCallbackMethod_GetPatientsEvents<WithCallbackMethod_GetPatientPrescribtion<WithCallbackMethod_GetExamResults<WithCallbackMethod_GetDoctorSchedules<WithCallbackMethod_GetScheduledEvents<WithCallbackMethod_GetScheduledPatients<WithCallbackMethod_NewReferal<WithCallbackMethod_NewPrescribtion<WithCallbackMethod_EventDone<WithCallbackMethod_ScheduleDone<WithCallbackMethod_AddResult<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SearchForAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SearchForAccount() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SearchForAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchForAccount(::grpc::ServerContext* /*context*/, const ::account_request* /*request*/, ::account_message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdatePatientData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdatePatientData() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpdatePatientData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePatientData(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SearchForPatient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SearchForPatient() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SearchForPatient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchForPatient(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::patient_message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SearchForPatients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SearchForPatients() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SearchForPatients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchForPatients(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::patient_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNextVisits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNextVisits() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetNextVisits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNextVisits(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::med_event_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPrescribtions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPrescribtions() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetPrescribtions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPrescribtions(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::prescribtion_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetExam : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetExam() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetExam() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExam(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::exam_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetProcedure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetProcedure() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetProcedure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProcedure(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::procedure_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAvailableVisits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAvailableVisits() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetAvailableVisits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableVisits(::grpc::ServerContext* /*context*/, const ::med_event_message* /*request*/, ::grpc::ServerWriter< ::schedule_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAvailableExams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAvailableExams() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_GetAvailableExams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableExams(::grpc::ServerContext* /*context*/, const ::exam_message* /*request*/, ::grpc::ServerWriter< ::schedule_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAvailableProcs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAvailableProcs() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetAvailableProcs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableProcs(::grpc::ServerContext* /*context*/, const ::procedure_message* /*request*/, ::grpc::ServerWriter< ::schedule_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ScheduleEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ScheduleEvent() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_ScheduleEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScheduleEvent(::grpc::ServerContext* /*context*/, const ::schedule_request* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetReferals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetReferals() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GetReferals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReferals(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::med_event_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDoctors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDoctors() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_GetDoctors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDoctors(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::grpc::ServerWriter< ::account_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSchedules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSchedules() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_GetSchedules() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSchedules(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::grpc::ServerWriter< ::schedule_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddAccount() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_AddAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddAccount(::grpc::ServerContext* /*context*/, const ::add_account_msg* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ResetPassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ResetPassword() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_ResetPassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetPassword(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteAccount() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccount(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddSchedule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddSchedule() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_AddSchedule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSchedule(::grpc::ServerContext* /*context*/, const ::schedule_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteSchedule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteSchedule() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_DeleteSchedule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSchedule(::grpc::ServerContext* /*context*/, const ::schedule_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAccounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAccounts() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_GetAccounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccounts(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::grpc::ServerWriter< ::account_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPatientsHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPatientsHistory() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_GetPatientsHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPatientsHistory(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::grpc::ServerWriter< ::med_event_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPatientsEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPatientsEvent() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_GetPatientsEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPatientsEvent(::grpc::ServerContext* /*context*/, const ::med_event_message* /*request*/, ::event_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPatientsEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPatientsEvents() {
      ::grpc::Service::MarkMethodGeneric(23);
    }
    ~WithGenericMethod_GetPatientsEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPatientsEvents(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::grpc::ServerWriter< ::med_event_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPatientPrescribtion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPatientPrescribtion() {
      ::grpc::Service::MarkMethodGeneric(24);
    }
    ~WithGenericMethod_GetPatientPrescribtion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPatientPrescribtion(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::grpc::ServerWriter< ::prescribtion_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetExamResults : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetExamResults() {
      ::grpc::Service::MarkMethodGeneric(25);
    }
    ~WithGenericMethod_GetExamResults() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExamResults(::grpc::ServerContext* /*context*/, const ::exam_message* /*request*/, ::result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDoctorSchedules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDoctorSchedules() {
      ::grpc::Service::MarkMethodGeneric(26);
    }
    ~WithGenericMethod_GetDoctorSchedules() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDoctorSchedules(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::grpc::ServerWriter< ::schedule_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetScheduledEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetScheduledEvents() {
      ::grpc::Service::MarkMethodGeneric(27);
    }
    ~WithGenericMethod_GetScheduledEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScheduledEvents(::grpc::ServerContext* /*context*/, const ::schedule_message* /*request*/, ::grpc::ServerWriter< ::med_event_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetScheduledPatients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetScheduledPatients() {
      ::grpc::Service::MarkMethodGeneric(28);
    }
    ~WithGenericMethod_GetScheduledPatients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScheduledPatients(::grpc::ServerContext* /*context*/, const ::schedule_message* /*request*/, ::grpc::ServerWriter< ::patient_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NewReferal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NewReferal() {
      ::grpc::Service::MarkMethodGeneric(29);
    }
    ~WithGenericMethod_NewReferal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewReferal(::grpc::ServerContext* /*context*/, const ::med_event_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NewPrescribtion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NewPrescribtion() {
      ::grpc::Service::MarkMethodGeneric(30);
    }
    ~WithGenericMethod_NewPrescribtion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewPrescribtion(::grpc::ServerContext* /*context*/, const ::prescribtion_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EventDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EventDone() {
      ::grpc::Service::MarkMethodGeneric(31);
    }
    ~WithGenericMethod_EventDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EventDone(::grpc::ServerContext* /*context*/, const ::med_event_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ScheduleDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ScheduleDone() {
      ::grpc::Service::MarkMethodGeneric(32);
    }
    ~WithGenericMethod_ScheduleDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScheduleDone(::grpc::ServerContext* /*context*/, const ::schedule_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddResult() {
      ::grpc::Service::MarkMethodGeneric(33);
    }
    ~WithGenericMethod_AddResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddResult(::grpc::ServerContext* /*context*/, const ::result* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SearchForAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SearchForAccount() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SearchForAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchForAccount(::grpc::ServerContext* /*context*/, const ::account_request* /*request*/, ::account_message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchForAccount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdatePatientData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdatePatientData() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UpdatePatientData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePatientData(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdatePatientData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SearchForPatient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SearchForPatient() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SearchForPatient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchForPatient(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::patient_message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchForPatient(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SearchForPatients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SearchForPatients() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SearchForPatients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchForPatients(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::patient_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchForPatients(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNextVisits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNextVisits() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetNextVisits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNextVisits(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::med_event_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNextVisits(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPrescribtions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPrescribtions() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetPrescribtions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPrescribtions(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::prescribtion_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPrescribtions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetExam : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetExam() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetExam() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExam(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::exam_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExam(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetProcedure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetProcedure() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetProcedure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProcedure(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::procedure_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProcedure(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAvailableVisits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAvailableVisits() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetAvailableVisits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableVisits(::grpc::ServerContext* /*context*/, const ::med_event_message* /*request*/, ::grpc::ServerWriter< ::schedule_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAvailableVisits(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(8, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAvailableExams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAvailableExams() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_GetAvailableExams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableExams(::grpc::ServerContext* /*context*/, const ::exam_message* /*request*/, ::grpc::ServerWriter< ::schedule_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAvailableExams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(9, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAvailableProcs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAvailableProcs() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_GetAvailableProcs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableProcs(::grpc::ServerContext* /*context*/, const ::procedure_message* /*request*/, ::grpc::ServerWriter< ::schedule_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAvailableProcs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(10, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ScheduleEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ScheduleEvent() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_ScheduleEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScheduleEvent(::grpc::ServerContext* /*context*/, const ::schedule_request* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScheduleEvent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetReferals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetReferals() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_GetReferals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReferals(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::med_event_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetReferals(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(12, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDoctors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDoctors() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_GetDoctors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDoctors(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::grpc::ServerWriter< ::account_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDoctors(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(13, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSchedules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSchedules() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_GetSchedules() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSchedules(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::grpc::ServerWriter< ::schedule_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSchedules(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(14, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddAccount() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_AddAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddAccount(::grpc::ServerContext* /*context*/, const ::add_account_msg* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddAccount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ResetPassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ResetPassword() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_ResetPassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetPassword(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetPassword(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteAccount() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccount(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAccount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddSchedule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddSchedule() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_AddSchedule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSchedule(::grpc::ServerContext* /*context*/, const ::schedule_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddSchedule(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteSchedule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteSchedule() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_DeleteSchedule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSchedule(::grpc::ServerContext* /*context*/, const ::schedule_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSchedule(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAccounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAccounts() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_GetAccounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccounts(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::grpc::ServerWriter< ::account_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAccounts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(20, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPatientsHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPatientsHistory() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_GetPatientsHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPatientsHistory(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::grpc::ServerWriter< ::med_event_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPatientsHistory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(21, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPatientsEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPatientsEvent() {
      ::grpc::Service::MarkMethodRaw(22);
    }
    ~WithRawMethod_GetPatientsEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPatientsEvent(::grpc::ServerContext* /*context*/, const ::med_event_message* /*request*/, ::event_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPatientsEvent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPatientsEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPatientsEvents() {
      ::grpc::Service::MarkMethodRaw(23);
    }
    ~WithRawMethod_GetPatientsEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPatientsEvents(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::grpc::ServerWriter< ::med_event_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPatientsEvents(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(23, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPatientPrescribtion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPatientPrescribtion() {
      ::grpc::Service::MarkMethodRaw(24);
    }
    ~WithRawMethod_GetPatientPrescribtion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPatientPrescribtion(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::grpc::ServerWriter< ::prescribtion_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPatientPrescribtion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(24, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetExamResults : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetExamResults() {
      ::grpc::Service::MarkMethodRaw(25);
    }
    ~WithRawMethod_GetExamResults() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExamResults(::grpc::ServerContext* /*context*/, const ::exam_message* /*request*/, ::result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExamResults(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDoctorSchedules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDoctorSchedules() {
      ::grpc::Service::MarkMethodRaw(26);
    }
    ~WithRawMethod_GetDoctorSchedules() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDoctorSchedules(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::grpc::ServerWriter< ::schedule_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDoctorSchedules(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(26, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetScheduledEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetScheduledEvents() {
      ::grpc::Service::MarkMethodRaw(27);
    }
    ~WithRawMethod_GetScheduledEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScheduledEvents(::grpc::ServerContext* /*context*/, const ::schedule_message* /*request*/, ::grpc::ServerWriter< ::med_event_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetScheduledEvents(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(27, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetScheduledPatients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetScheduledPatients() {
      ::grpc::Service::MarkMethodRaw(28);
    }
    ~WithRawMethod_GetScheduledPatients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScheduledPatients(::grpc::ServerContext* /*context*/, const ::schedule_message* /*request*/, ::grpc::ServerWriter< ::patient_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetScheduledPatients(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(28, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NewReferal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NewReferal() {
      ::grpc::Service::MarkMethodRaw(29);
    }
    ~WithRawMethod_NewReferal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewReferal(::grpc::ServerContext* /*context*/, const ::med_event_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewReferal(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NewPrescribtion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NewPrescribtion() {
      ::grpc::Service::MarkMethodRaw(30);
    }
    ~WithRawMethod_NewPrescribtion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewPrescribtion(::grpc::ServerContext* /*context*/, const ::prescribtion_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewPrescribtion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EventDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EventDone() {
      ::grpc::Service::MarkMethodRaw(31);
    }
    ~WithRawMethod_EventDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EventDone(::grpc::ServerContext* /*context*/, const ::med_event_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEventDone(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ScheduleDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ScheduleDone() {
      ::grpc::Service::MarkMethodRaw(32);
    }
    ~WithRawMethod_ScheduleDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScheduleDone(::grpc::ServerContext* /*context*/, const ::schedule_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScheduleDone(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddResult() {
      ::grpc::Service::MarkMethodRaw(33);
    }
    ~WithRawMethod_AddResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddResult(::grpc::ServerContext* /*context*/, const ::result* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SearchForAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SearchForAccount() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SearchForAccount(context, request, response); }));
    }
    ~WithRawCallbackMethod_SearchForAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchForAccount(::grpc::ServerContext* /*context*/, const ::account_request* /*request*/, ::account_message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SearchForAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdatePatientData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdatePatientData() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdatePatientData(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdatePatientData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePatientData(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdatePatientData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SearchForPatient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SearchForPatient() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SearchForPatient(context, request, response); }));
    }
    ~WithRawCallbackMethod_SearchForPatient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchForPatient(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::patient_message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SearchForPatient(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SearchForPatients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SearchForPatients() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SearchForPatients(context, request); }));
    }
    ~WithRawCallbackMethod_SearchForPatients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchForPatients(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::patient_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SearchForPatients(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNextVisits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNextVisits() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetNextVisits(context, request); }));
    }
    ~WithRawCallbackMethod_GetNextVisits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNextVisits(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::med_event_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetNextVisits(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPrescribtions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPrescribtions() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetPrescribtions(context, request); }));
    }
    ~WithRawCallbackMethod_GetPrescribtions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPrescribtions(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::prescribtion_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetPrescribtions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetExam : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetExam() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetExam(context, request); }));
    }
    ~WithRawCallbackMethod_GetExam() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExam(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::exam_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetExam(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetProcedure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetProcedure() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetProcedure(context, request); }));
    }
    ~WithRawCallbackMethod_GetProcedure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProcedure(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::procedure_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetProcedure(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAvailableVisits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAvailableVisits() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetAvailableVisits(context, request); }));
    }
    ~WithRawCallbackMethod_GetAvailableVisits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableVisits(::grpc::ServerContext* /*context*/, const ::med_event_message* /*request*/, ::grpc::ServerWriter< ::schedule_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetAvailableVisits(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAvailableExams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAvailableExams() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetAvailableExams(context, request); }));
    }
    ~WithRawCallbackMethod_GetAvailableExams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableExams(::grpc::ServerContext* /*context*/, const ::exam_message* /*request*/, ::grpc::ServerWriter< ::schedule_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetAvailableExams(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAvailableProcs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAvailableProcs() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetAvailableProcs(context, request); }));
    }
    ~WithRawCallbackMethod_GetAvailableProcs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableProcs(::grpc::ServerContext* /*context*/, const ::procedure_message* /*request*/, ::grpc::ServerWriter< ::schedule_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetAvailableProcs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ScheduleEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ScheduleEvent() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ScheduleEvent(context, request, response); }));
    }
    ~WithRawCallbackMethod_ScheduleEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScheduleEvent(::grpc::ServerContext* /*context*/, const ::schedule_request* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ScheduleEvent(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetReferals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetReferals() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetReferals(context, request); }));
    }
    ~WithRawCallbackMethod_GetReferals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReferals(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::med_event_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetReferals(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDoctors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDoctors() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetDoctors(context, request); }));
    }
    ~WithRawCallbackMethod_GetDoctors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDoctors(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::grpc::ServerWriter< ::account_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetDoctors(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSchedules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSchedules() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetSchedules(context, request); }));
    }
    ~WithRawCallbackMethod_GetSchedules() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSchedules(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::grpc::ServerWriter< ::schedule_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetSchedules(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddAccount() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddAccount(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddAccount(::grpc::ServerContext* /*context*/, const ::add_account_msg* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ResetPassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ResetPassword() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ResetPassword(context, request, response); }));
    }
    ~WithRawCallbackMethod_ResetPassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetPassword(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ResetPassword(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteAccount() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteAccount(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccount(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddSchedule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddSchedule() {
      ::grpc::Service::MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddSchedule(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddSchedule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSchedule(::grpc::ServerContext* /*context*/, const ::schedule_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddSchedule(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteSchedule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteSchedule() {
      ::grpc::Service::MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteSchedule(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteSchedule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSchedule(::grpc::ServerContext* /*context*/, const ::schedule_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteSchedule(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAccounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAccounts() {
      ::grpc::Service::MarkMethodRawCallback(20,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetAccounts(context, request); }));
    }
    ~WithRawCallbackMethod_GetAccounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccounts(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::grpc::ServerWriter< ::account_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetAccounts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPatientsHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPatientsHistory() {
      ::grpc::Service::MarkMethodRawCallback(21,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetPatientsHistory(context, request); }));
    }
    ~WithRawCallbackMethod_GetPatientsHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPatientsHistory(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::grpc::ServerWriter< ::med_event_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetPatientsHistory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPatientsEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPatientsEvent() {
      ::grpc::Service::MarkMethodRawCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPatientsEvent(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPatientsEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPatientsEvent(::grpc::ServerContext* /*context*/, const ::med_event_message* /*request*/, ::event_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPatientsEvent(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPatientsEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPatientsEvents() {
      ::grpc::Service::MarkMethodRawCallback(23,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetPatientsEvents(context, request); }));
    }
    ~WithRawCallbackMethod_GetPatientsEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPatientsEvents(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::grpc::ServerWriter< ::med_event_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetPatientsEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPatientPrescribtion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPatientPrescribtion() {
      ::grpc::Service::MarkMethodRawCallback(24,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetPatientPrescribtion(context, request); }));
    }
    ~WithRawCallbackMethod_GetPatientPrescribtion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPatientPrescribtion(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::grpc::ServerWriter< ::prescribtion_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetPatientPrescribtion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetExamResults : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetExamResults() {
      ::grpc::Service::MarkMethodRawCallback(25,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetExamResults(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetExamResults() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExamResults(::grpc::ServerContext* /*context*/, const ::exam_message* /*request*/, ::result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetExamResults(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDoctorSchedules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDoctorSchedules() {
      ::grpc::Service::MarkMethodRawCallback(26,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetDoctorSchedules(context, request); }));
    }
    ~WithRawCallbackMethod_GetDoctorSchedules() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDoctorSchedules(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::grpc::ServerWriter< ::schedule_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetDoctorSchedules(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetScheduledEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetScheduledEvents() {
      ::grpc::Service::MarkMethodRawCallback(27,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetScheduledEvents(context, request); }));
    }
    ~WithRawCallbackMethod_GetScheduledEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScheduledEvents(::grpc::ServerContext* /*context*/, const ::schedule_message* /*request*/, ::grpc::ServerWriter< ::med_event_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetScheduledEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetScheduledPatients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetScheduledPatients() {
      ::grpc::Service::MarkMethodRawCallback(28,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetScheduledPatients(context, request); }));
    }
    ~WithRawCallbackMethod_GetScheduledPatients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScheduledPatients(::grpc::ServerContext* /*context*/, const ::schedule_message* /*request*/, ::grpc::ServerWriter< ::patient_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetScheduledPatients(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NewReferal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NewReferal() {
      ::grpc::Service::MarkMethodRawCallback(29,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NewReferal(context, request, response); }));
    }
    ~WithRawCallbackMethod_NewReferal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewReferal(::grpc::ServerContext* /*context*/, const ::med_event_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NewReferal(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NewPrescribtion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NewPrescribtion() {
      ::grpc::Service::MarkMethodRawCallback(30,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NewPrescribtion(context, request, response); }));
    }
    ~WithRawCallbackMethod_NewPrescribtion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewPrescribtion(::grpc::ServerContext* /*context*/, const ::prescribtion_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NewPrescribtion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EventDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EventDone() {
      ::grpc::Service::MarkMethodRawCallback(31,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EventDone(context, request, response); }));
    }
    ~WithRawCallbackMethod_EventDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EventDone(::grpc::ServerContext* /*context*/, const ::med_event_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EventDone(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ScheduleDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ScheduleDone() {
      ::grpc::Service::MarkMethodRawCallback(32,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ScheduleDone(context, request, response); }));
    }
    ~WithRawCallbackMethod_ScheduleDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScheduleDone(::grpc::ServerContext* /*context*/, const ::schedule_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ScheduleDone(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddResult() {
      ::grpc::Service::MarkMethodRawCallback(33,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddResult(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddResult(::grpc::ServerContext* /*context*/, const ::result* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddResult(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SearchForAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SearchForAccount() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::account_request, ::account_message>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::account_request, ::account_message>* streamer) {
                       return this->StreamedSearchForAccount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SearchForAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SearchForAccount(::grpc::ServerContext* /*context*/, const ::account_request* /*request*/, ::account_message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSearchForAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::account_request,::account_message>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdatePatientData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdatePatientData() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::patient_message, ::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::patient_message, ::Empty>* streamer) {
                       return this->StreamedUpdatePatientData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdatePatientData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdatePatientData(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdatePatientData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::patient_message,::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SearchForPatient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SearchForPatient() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::patient_message, ::patient_message>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::patient_message, ::patient_message>* streamer) {
                       return this->StreamedSearchForPatient(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SearchForPatient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SearchForPatient(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::patient_message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSearchForPatient(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::patient_message,::patient_message>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ScheduleEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ScheduleEvent() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::schedule_request, ::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::schedule_request, ::Empty>* streamer) {
                       return this->StreamedScheduleEvent(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ScheduleEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ScheduleEvent(::grpc::ServerContext* /*context*/, const ::schedule_request* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedScheduleEvent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::schedule_request,::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddAccount() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::add_account_msg, ::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::add_account_msg, ::Empty>* streamer) {
                       return this->StreamedAddAccount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddAccount(::grpc::ServerContext* /*context*/, const ::add_account_msg* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::add_account_msg,::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ResetPassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ResetPassword() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::account_message, ::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::account_message, ::Empty>* streamer) {
                       return this->StreamedResetPassword(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ResetPassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ResetPassword(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedResetPassword(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::account_message,::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteAccount() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::account_message, ::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::account_message, ::Empty>* streamer) {
                       return this->StreamedDeleteAccount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteAccount(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::account_message,::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddSchedule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddSchedule() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::schedule_message, ::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::schedule_message, ::Empty>* streamer) {
                       return this->StreamedAddSchedule(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddSchedule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddSchedule(::grpc::ServerContext* /*context*/, const ::schedule_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddSchedule(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::schedule_message,::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteSchedule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteSchedule() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::schedule_message, ::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::schedule_message, ::Empty>* streamer) {
                       return this->StreamedDeleteSchedule(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteSchedule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteSchedule(::grpc::ServerContext* /*context*/, const ::schedule_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteSchedule(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::schedule_message,::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPatientsEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPatientsEvent() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::internal::StreamedUnaryHandler<
          ::med_event_message, ::event_response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::med_event_message, ::event_response>* streamer) {
                       return this->StreamedGetPatientsEvent(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPatientsEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPatientsEvent(::grpc::ServerContext* /*context*/, const ::med_event_message* /*request*/, ::event_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPatientsEvent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::med_event_message,::event_response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetExamResults : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetExamResults() {
      ::grpc::Service::MarkMethodStreamed(25,
        new ::grpc::internal::StreamedUnaryHandler<
          ::exam_message, ::result>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::exam_message, ::result>* streamer) {
                       return this->StreamedGetExamResults(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetExamResults() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetExamResults(::grpc::ServerContext* /*context*/, const ::exam_message* /*request*/, ::result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetExamResults(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::exam_message,::result>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NewReferal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NewReferal() {
      ::grpc::Service::MarkMethodStreamed(29,
        new ::grpc::internal::StreamedUnaryHandler<
          ::med_event_message, ::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::med_event_message, ::Empty>* streamer) {
                       return this->StreamedNewReferal(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NewReferal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NewReferal(::grpc::ServerContext* /*context*/, const ::med_event_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNewReferal(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::med_event_message,::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NewPrescribtion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NewPrescribtion() {
      ::grpc::Service::MarkMethodStreamed(30,
        new ::grpc::internal::StreamedUnaryHandler<
          ::prescribtion_message, ::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::prescribtion_message, ::Empty>* streamer) {
                       return this->StreamedNewPrescribtion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NewPrescribtion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NewPrescribtion(::grpc::ServerContext* /*context*/, const ::prescribtion_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNewPrescribtion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::prescribtion_message,::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EventDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EventDone() {
      ::grpc::Service::MarkMethodStreamed(31,
        new ::grpc::internal::StreamedUnaryHandler<
          ::med_event_message, ::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::med_event_message, ::Empty>* streamer) {
                       return this->StreamedEventDone(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EventDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EventDone(::grpc::ServerContext* /*context*/, const ::med_event_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEventDone(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::med_event_message,::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ScheduleDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ScheduleDone() {
      ::grpc::Service::MarkMethodStreamed(32,
        new ::grpc::internal::StreamedUnaryHandler<
          ::schedule_message, ::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::schedule_message, ::Empty>* streamer) {
                       return this->StreamedScheduleDone(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ScheduleDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ScheduleDone(::grpc::ServerContext* /*context*/, const ::schedule_message* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedScheduleDone(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::schedule_message,::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddResult() {
      ::grpc::Service::MarkMethodStreamed(33,
        new ::grpc::internal::StreamedUnaryHandler<
          ::result, ::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::result, ::Empty>* streamer) {
                       return this->StreamedAddResult(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddResult(::grpc::ServerContext* /*context*/, const ::result* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddResult(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::result,::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SearchForAccount<WithStreamedUnaryMethod_UpdatePatientData<WithStreamedUnaryMethod_SearchForPatient<WithStreamedUnaryMethod_ScheduleEvent<WithStreamedUnaryMethod_AddAccount<WithStreamedUnaryMethod_ResetPassword<WithStreamedUnaryMethod_DeleteAccount<WithStreamedUnaryMethod_AddSchedule<WithStreamedUnaryMethod_DeleteSchedule<WithStreamedUnaryMethod_GetPatientsEvent<WithStreamedUnaryMethod_GetExamResults<WithStreamedUnaryMethod_NewReferal<WithStreamedUnaryMethod_NewPrescribtion<WithStreamedUnaryMethod_EventDone<WithStreamedUnaryMethod_ScheduleDone<WithStreamedUnaryMethod_AddResult<Service > > > > > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SearchForPatients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SearchForPatients() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::patient_message, ::patient_message>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::patient_message, ::patient_message>* streamer) {
                       return this->StreamedSearchForPatients(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SearchForPatients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SearchForPatients(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::patient_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSearchForPatients(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::patient_message,::patient_message>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetNextVisits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetNextVisits() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::patient_message, ::med_event_message>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::patient_message, ::med_event_message>* streamer) {
                       return this->StreamedGetNextVisits(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetNextVisits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNextVisits(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::med_event_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetNextVisits(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::patient_message,::med_event_message>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetPrescribtions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetPrescribtions() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::patient_message, ::prescribtion_message>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::patient_message, ::prescribtion_message>* streamer) {
                       return this->StreamedGetPrescribtions(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetPrescribtions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPrescribtions(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::prescribtion_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetPrescribtions(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::patient_message,::prescribtion_message>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetExam : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetExam() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::patient_message, ::exam_message>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::patient_message, ::exam_message>* streamer) {
                       return this->StreamedGetExam(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetExam() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetExam(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::exam_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetExam(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::patient_message,::exam_message>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetProcedure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetProcedure() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::patient_message, ::procedure_message>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::patient_message, ::procedure_message>* streamer) {
                       return this->StreamedGetProcedure(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetProcedure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetProcedure(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::procedure_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetProcedure(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::patient_message,::procedure_message>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetAvailableVisits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetAvailableVisits() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::med_event_message, ::schedule_message>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::med_event_message, ::schedule_message>* streamer) {
                       return this->StreamedGetAvailableVisits(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetAvailableVisits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAvailableVisits(::grpc::ServerContext* /*context*/, const ::med_event_message* /*request*/, ::grpc::ServerWriter< ::schedule_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetAvailableVisits(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::med_event_message,::schedule_message>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetAvailableExams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetAvailableExams() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::exam_message, ::schedule_message>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::exam_message, ::schedule_message>* streamer) {
                       return this->StreamedGetAvailableExams(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetAvailableExams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAvailableExams(::grpc::ServerContext* /*context*/, const ::exam_message* /*request*/, ::grpc::ServerWriter< ::schedule_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetAvailableExams(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::exam_message,::schedule_message>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetAvailableProcs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetAvailableProcs() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::procedure_message, ::schedule_message>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::procedure_message, ::schedule_message>* streamer) {
                       return this->StreamedGetAvailableProcs(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetAvailableProcs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAvailableProcs(::grpc::ServerContext* /*context*/, const ::procedure_message* /*request*/, ::grpc::ServerWriter< ::schedule_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetAvailableProcs(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::procedure_message,::schedule_message>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetReferals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetReferals() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::patient_message, ::med_event_message>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::patient_message, ::med_event_message>* streamer) {
                       return this->StreamedGetReferals(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetReferals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetReferals(::grpc::ServerContext* /*context*/, const ::patient_message* /*request*/, ::grpc::ServerWriter< ::med_event_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetReferals(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::patient_message,::med_event_message>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetDoctors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetDoctors() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::Empty, ::account_message>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::Empty, ::account_message>* streamer) {
                       return this->StreamedGetDoctors(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetDoctors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDoctors(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::grpc::ServerWriter< ::account_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetDoctors(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::Empty,::account_message>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetSchedules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetSchedules() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::account_message, ::schedule_message>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::account_message, ::schedule_message>* streamer) {
                       return this->StreamedGetSchedules(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetSchedules() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSchedules(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::grpc::ServerWriter< ::schedule_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetSchedules(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::account_message,::schedule_message>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetAccounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetAccounts() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::Empty, ::account_message>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::Empty, ::account_message>* streamer) {
                       return this->StreamedGetAccounts(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetAccounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAccounts(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::grpc::ServerWriter< ::account_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetAccounts(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::Empty,::account_message>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetPatientsHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetPatientsHistory() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::account_message, ::med_event_message>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::account_message, ::med_event_message>* streamer) {
                       return this->StreamedGetPatientsHistory(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetPatientsHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPatientsHistory(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::grpc::ServerWriter< ::med_event_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetPatientsHistory(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::account_message,::med_event_message>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetPatientsEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetPatientsEvents() {
      ::grpc::Service::MarkMethodStreamed(23,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::account_message, ::med_event_message>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::account_message, ::med_event_message>* streamer) {
                       return this->StreamedGetPatientsEvents(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetPatientsEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPatientsEvents(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::grpc::ServerWriter< ::med_event_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetPatientsEvents(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::account_message,::med_event_message>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetPatientPrescribtion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetPatientPrescribtion() {
      ::grpc::Service::MarkMethodStreamed(24,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::account_message, ::prescribtion_message>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::account_message, ::prescribtion_message>* streamer) {
                       return this->StreamedGetPatientPrescribtion(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetPatientPrescribtion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPatientPrescribtion(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::grpc::ServerWriter< ::prescribtion_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetPatientPrescribtion(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::account_message,::prescribtion_message>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetDoctorSchedules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetDoctorSchedules() {
      ::grpc::Service::MarkMethodStreamed(26,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::account_message, ::schedule_message>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::account_message, ::schedule_message>* streamer) {
                       return this->StreamedGetDoctorSchedules(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetDoctorSchedules() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDoctorSchedules(::grpc::ServerContext* /*context*/, const ::account_message* /*request*/, ::grpc::ServerWriter< ::schedule_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetDoctorSchedules(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::account_message,::schedule_message>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetScheduledEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetScheduledEvents() {
      ::grpc::Service::MarkMethodStreamed(27,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::schedule_message, ::med_event_message>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::schedule_message, ::med_event_message>* streamer) {
                       return this->StreamedGetScheduledEvents(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetScheduledEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetScheduledEvents(::grpc::ServerContext* /*context*/, const ::schedule_message* /*request*/, ::grpc::ServerWriter< ::med_event_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetScheduledEvents(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::schedule_message,::med_event_message>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetScheduledPatients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetScheduledPatients() {
      ::grpc::Service::MarkMethodStreamed(28,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::schedule_message, ::patient_message>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::schedule_message, ::patient_message>* streamer) {
                       return this->StreamedGetScheduledPatients(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetScheduledPatients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetScheduledPatients(::grpc::ServerContext* /*context*/, const ::schedule_message* /*request*/, ::grpc::ServerWriter< ::patient_message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetScheduledPatients(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::schedule_message,::patient_message>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SearchForPatients<WithSplitStreamingMethod_GetNextVisits<WithSplitStreamingMethod_GetPrescribtions<WithSplitStreamingMethod_GetExam<WithSplitStreamingMethod_GetProcedure<WithSplitStreamingMethod_GetAvailableVisits<WithSplitStreamingMethod_GetAvailableExams<WithSplitStreamingMethod_GetAvailableProcs<WithSplitStreamingMethod_GetReferals<WithSplitStreamingMethod_GetDoctors<WithSplitStreamingMethod_GetSchedules<WithSplitStreamingMethod_GetAccounts<WithSplitStreamingMethod_GetPatientsHistory<WithSplitStreamingMethod_GetPatientsEvents<WithSplitStreamingMethod_GetPatientPrescribtion<WithSplitStreamingMethod_GetDoctorSchedules<WithSplitStreamingMethod_GetScheduledEvents<WithSplitStreamingMethod_GetScheduledPatients<Service > > > > > > > > > > > > > > > > > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_SearchForAccount<WithStreamedUnaryMethod_UpdatePatientData<WithStreamedUnaryMethod_SearchForPatient<WithSplitStreamingMethod_SearchForPatients<WithSplitStreamingMethod_GetNextVisits<WithSplitStreamingMethod_GetPrescribtions<WithSplitStreamingMethod_GetExam<WithSplitStreamingMethod_GetProcedure<WithSplitStreamingMethod_GetAvailableVisits<WithSplitStreamingMethod_GetAvailableExams<WithSplitStreamingMethod_GetAvailableProcs<WithStreamedUnaryMethod_ScheduleEvent<WithSplitStreamingMethod_GetReferals<WithSplitStreamingMethod_GetDoctors<WithSplitStreamingMethod_GetSchedules<WithStreamedUnaryMethod_AddAccount<WithStreamedUnaryMethod_ResetPassword<WithStreamedUnaryMethod_DeleteAccount<WithStreamedUnaryMethod_AddSchedule<WithStreamedUnaryMethod_DeleteSchedule<WithSplitStreamingMethod_GetAccounts<WithSplitStreamingMethod_GetPatientsHistory<WithStreamedUnaryMethod_GetPatientsEvent<WithSplitStreamingMethod_GetPatientsEvents<WithSplitStreamingMethod_GetPatientPrescribtion<WithStreamedUnaryMethod_GetExamResults<WithSplitStreamingMethod_GetDoctorSchedules<WithSplitStreamingMethod_GetScheduledEvents<WithSplitStreamingMethod_GetScheduledPatients<WithStreamedUnaryMethod_NewReferal<WithStreamedUnaryMethod_NewPrescribtion<WithStreamedUnaryMethod_EventDone<WithStreamedUnaryMethod_ScheduleDone<WithStreamedUnaryMethod_AddResult<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};


#endif  // GRPC_com_2eproto__INCLUDED
