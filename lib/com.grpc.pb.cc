// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: com.proto

#include "com.pb.h"
#include "com.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* ClientServerCommunication_method_names[] = {
  "/ClientServerCommunication/SearchForAccount",
  "/ClientServerCommunication/UpdatePatientData",
  "/ClientServerCommunication/SearchForPatient",
  "/ClientServerCommunication/SearchForPatients",
  "/ClientServerCommunication/GetNextVisits",
  "/ClientServerCommunication/GetPrescribtions",
  "/ClientServerCommunication/GetExam",
  "/ClientServerCommunication/GetProcedure",
  "/ClientServerCommunication/GetAvailableVisits",
  "/ClientServerCommunication/GetAvailableExams",
  "/ClientServerCommunication/GetAvailableProcs",
  "/ClientServerCommunication/ScheduleEvent",
  "/ClientServerCommunication/GetReferals",
  "/ClientServerCommunication/GetDoctors",
  "/ClientServerCommunication/GetSchedules",
  "/ClientServerCommunication/AddAccount",
  "/ClientServerCommunication/ResetPassword",
  "/ClientServerCommunication/DeleteAccount",
  "/ClientServerCommunication/AddSchedule",
  "/ClientServerCommunication/DeleteSchedule",
  "/ClientServerCommunication/GetAccounts",
  "/ClientServerCommunication/GetPatientsHistory",
  "/ClientServerCommunication/GetPatientsEvent",
  "/ClientServerCommunication/GetPatientsEvents",
  "/ClientServerCommunication/GetPatientPrescribtion",
  "/ClientServerCommunication/GetExamResults",
  "/ClientServerCommunication/GetDoctorSchedules",
  "/ClientServerCommunication/GetScheduledEvents",
  "/ClientServerCommunication/GetScheduledPatients",
  "/ClientServerCommunication/NewReferal",
  "/ClientServerCommunication/NewPrescribtion",
  "/ClientServerCommunication/EventDone",
  "/ClientServerCommunication/ScheduleDone",
  "/ClientServerCommunication/AddResult",
};

std::unique_ptr< ClientServerCommunication::Stub> ClientServerCommunication::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ClientServerCommunication::Stub> stub(new ClientServerCommunication::Stub(channel, options));
  return stub;
}

ClientServerCommunication::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SearchForAccount_(ClientServerCommunication_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdatePatientData_(ClientServerCommunication_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SearchForPatient_(ClientServerCommunication_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SearchForPatients_(ClientServerCommunication_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetNextVisits_(ClientServerCommunication_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetPrescribtions_(ClientServerCommunication_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetExam_(ClientServerCommunication_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetProcedure_(ClientServerCommunication_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetAvailableVisits_(ClientServerCommunication_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetAvailableExams_(ClientServerCommunication_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetAvailableProcs_(ClientServerCommunication_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ScheduleEvent_(ClientServerCommunication_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetReferals_(ClientServerCommunication_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetDoctors_(ClientServerCommunication_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetSchedules_(ClientServerCommunication_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_AddAccount_(ClientServerCommunication_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResetPassword_(ClientServerCommunication_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteAccount_(ClientServerCommunication_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddSchedule_(ClientServerCommunication_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteSchedule_(ClientServerCommunication_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAccounts_(ClientServerCommunication_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetPatientsHistory_(ClientServerCommunication_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetPatientsEvent_(ClientServerCommunication_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPatientsEvents_(ClientServerCommunication_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetPatientPrescribtion_(ClientServerCommunication_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetExamResults_(ClientServerCommunication_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDoctorSchedules_(ClientServerCommunication_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetScheduledEvents_(ClientServerCommunication_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetScheduledPatients_(ClientServerCommunication_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_NewReferal_(ClientServerCommunication_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NewPrescribtion_(ClientServerCommunication_method_names[30], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EventDone_(ClientServerCommunication_method_names[31], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ScheduleDone_(ClientServerCommunication_method_names[32], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddResult_(ClientServerCommunication_method_names[33], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ClientServerCommunication::Stub::SearchForAccount(::grpc::ClientContext* context, const ::account_request& request, ::account_message* response) {
  return ::grpc::internal::BlockingUnaryCall< ::account_request, ::account_message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SearchForAccount_, context, request, response);
}

void ClientServerCommunication::Stub::async::SearchForAccount(::grpc::ClientContext* context, const ::account_request* request, ::account_message* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::account_request, ::account_message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchForAccount_, context, request, response, std::move(f));
}

void ClientServerCommunication::Stub::async::SearchForAccount(::grpc::ClientContext* context, const ::account_request* request, ::account_message* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchForAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::account_message>* ClientServerCommunication::Stub::PrepareAsyncSearchForAccountRaw(::grpc::ClientContext* context, const ::account_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::account_message, ::account_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SearchForAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::account_message>* ClientServerCommunication::Stub::AsyncSearchForAccountRaw(::grpc::ClientContext* context, const ::account_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSearchForAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientServerCommunication::Stub::UpdatePatientData(::grpc::ClientContext* context, const ::patient_message& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::patient_message, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdatePatientData_, context, request, response);
}

void ClientServerCommunication::Stub::async::UpdatePatientData(::grpc::ClientContext* context, const ::patient_message* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::patient_message, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdatePatientData_, context, request, response, std::move(f));
}

void ClientServerCommunication::Stub::async::UpdatePatientData(::grpc::ClientContext* context, const ::patient_message* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdatePatientData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Empty>* ClientServerCommunication::Stub::PrepareAsyncUpdatePatientDataRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Empty, ::patient_message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdatePatientData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Empty>* ClientServerCommunication::Stub::AsyncUpdatePatientDataRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdatePatientDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientServerCommunication::Stub::SearchForPatient(::grpc::ClientContext* context, const ::patient_message& request, ::patient_message* response) {
  return ::grpc::internal::BlockingUnaryCall< ::patient_message, ::patient_message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SearchForPatient_, context, request, response);
}

void ClientServerCommunication::Stub::async::SearchForPatient(::grpc::ClientContext* context, const ::patient_message* request, ::patient_message* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::patient_message, ::patient_message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchForPatient_, context, request, response, std::move(f));
}

void ClientServerCommunication::Stub::async::SearchForPatient(::grpc::ClientContext* context, const ::patient_message* request, ::patient_message* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchForPatient_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::patient_message>* ClientServerCommunication::Stub::PrepareAsyncSearchForPatientRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::patient_message, ::patient_message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SearchForPatient_, context, request);
}

::grpc::ClientAsyncResponseReader< ::patient_message>* ClientServerCommunication::Stub::AsyncSearchForPatientRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSearchForPatientRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::patient_message>* ClientServerCommunication::Stub::SearchForPatientsRaw(::grpc::ClientContext* context, const ::patient_message& request) {
  return ::grpc::internal::ClientReaderFactory< ::patient_message>::Create(channel_.get(), rpcmethod_SearchForPatients_, context, request);
}

void ClientServerCommunication::Stub::async::SearchForPatients(::grpc::ClientContext* context, const ::patient_message* request, ::grpc::ClientReadReactor< ::patient_message>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::patient_message>::Create(stub_->channel_.get(), stub_->rpcmethod_SearchForPatients_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::patient_message>* ClientServerCommunication::Stub::AsyncSearchForPatientsRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::patient_message>::Create(channel_.get(), cq, rpcmethod_SearchForPatients_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::patient_message>* ClientServerCommunication::Stub::PrepareAsyncSearchForPatientsRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::patient_message>::Create(channel_.get(), cq, rpcmethod_SearchForPatients_, context, request, false, nullptr);
}

::grpc::ClientReader< ::med_event_message>* ClientServerCommunication::Stub::GetNextVisitsRaw(::grpc::ClientContext* context, const ::patient_message& request) {
  return ::grpc::internal::ClientReaderFactory< ::med_event_message>::Create(channel_.get(), rpcmethod_GetNextVisits_, context, request);
}

void ClientServerCommunication::Stub::async::GetNextVisits(::grpc::ClientContext* context, const ::patient_message* request, ::grpc::ClientReadReactor< ::med_event_message>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::med_event_message>::Create(stub_->channel_.get(), stub_->rpcmethod_GetNextVisits_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::med_event_message>* ClientServerCommunication::Stub::AsyncGetNextVisitsRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::med_event_message>::Create(channel_.get(), cq, rpcmethod_GetNextVisits_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::med_event_message>* ClientServerCommunication::Stub::PrepareAsyncGetNextVisitsRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::med_event_message>::Create(channel_.get(), cq, rpcmethod_GetNextVisits_, context, request, false, nullptr);
}

::grpc::ClientReader< ::prescribtion_message>* ClientServerCommunication::Stub::GetPrescribtionsRaw(::grpc::ClientContext* context, const ::patient_message& request) {
  return ::grpc::internal::ClientReaderFactory< ::prescribtion_message>::Create(channel_.get(), rpcmethod_GetPrescribtions_, context, request);
}

void ClientServerCommunication::Stub::async::GetPrescribtions(::grpc::ClientContext* context, const ::patient_message* request, ::grpc::ClientReadReactor< ::prescribtion_message>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::prescribtion_message>::Create(stub_->channel_.get(), stub_->rpcmethod_GetPrescribtions_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::prescribtion_message>* ClientServerCommunication::Stub::AsyncGetPrescribtionsRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::prescribtion_message>::Create(channel_.get(), cq, rpcmethod_GetPrescribtions_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::prescribtion_message>* ClientServerCommunication::Stub::PrepareAsyncGetPrescribtionsRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::prescribtion_message>::Create(channel_.get(), cq, rpcmethod_GetPrescribtions_, context, request, false, nullptr);
}

::grpc::ClientReader< ::exam_message>* ClientServerCommunication::Stub::GetExamRaw(::grpc::ClientContext* context, const ::patient_message& request) {
  return ::grpc::internal::ClientReaderFactory< ::exam_message>::Create(channel_.get(), rpcmethod_GetExam_, context, request);
}

void ClientServerCommunication::Stub::async::GetExam(::grpc::ClientContext* context, const ::patient_message* request, ::grpc::ClientReadReactor< ::exam_message>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::exam_message>::Create(stub_->channel_.get(), stub_->rpcmethod_GetExam_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::exam_message>* ClientServerCommunication::Stub::AsyncGetExamRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::exam_message>::Create(channel_.get(), cq, rpcmethod_GetExam_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::exam_message>* ClientServerCommunication::Stub::PrepareAsyncGetExamRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::exam_message>::Create(channel_.get(), cq, rpcmethod_GetExam_, context, request, false, nullptr);
}

::grpc::ClientReader< ::procedure_message>* ClientServerCommunication::Stub::GetProcedureRaw(::grpc::ClientContext* context, const ::patient_message& request) {
  return ::grpc::internal::ClientReaderFactory< ::procedure_message>::Create(channel_.get(), rpcmethod_GetProcedure_, context, request);
}

void ClientServerCommunication::Stub::async::GetProcedure(::grpc::ClientContext* context, const ::patient_message* request, ::grpc::ClientReadReactor< ::procedure_message>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::procedure_message>::Create(stub_->channel_.get(), stub_->rpcmethod_GetProcedure_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::procedure_message>* ClientServerCommunication::Stub::AsyncGetProcedureRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::procedure_message>::Create(channel_.get(), cq, rpcmethod_GetProcedure_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::procedure_message>* ClientServerCommunication::Stub::PrepareAsyncGetProcedureRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::procedure_message>::Create(channel_.get(), cq, rpcmethod_GetProcedure_, context, request, false, nullptr);
}

::grpc::ClientReader< ::schedule_message>* ClientServerCommunication::Stub::GetAvailableVisitsRaw(::grpc::ClientContext* context, const ::med_event_message& request) {
  return ::grpc::internal::ClientReaderFactory< ::schedule_message>::Create(channel_.get(), rpcmethod_GetAvailableVisits_, context, request);
}

void ClientServerCommunication::Stub::async::GetAvailableVisits(::grpc::ClientContext* context, const ::med_event_message* request, ::grpc::ClientReadReactor< ::schedule_message>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::schedule_message>::Create(stub_->channel_.get(), stub_->rpcmethod_GetAvailableVisits_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::schedule_message>* ClientServerCommunication::Stub::AsyncGetAvailableVisitsRaw(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::schedule_message>::Create(channel_.get(), cq, rpcmethod_GetAvailableVisits_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::schedule_message>* ClientServerCommunication::Stub::PrepareAsyncGetAvailableVisitsRaw(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::schedule_message>::Create(channel_.get(), cq, rpcmethod_GetAvailableVisits_, context, request, false, nullptr);
}

::grpc::ClientReader< ::schedule_message>* ClientServerCommunication::Stub::GetAvailableExamsRaw(::grpc::ClientContext* context, const ::exam_message& request) {
  return ::grpc::internal::ClientReaderFactory< ::schedule_message>::Create(channel_.get(), rpcmethod_GetAvailableExams_, context, request);
}

void ClientServerCommunication::Stub::async::GetAvailableExams(::grpc::ClientContext* context, const ::exam_message* request, ::grpc::ClientReadReactor< ::schedule_message>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::schedule_message>::Create(stub_->channel_.get(), stub_->rpcmethod_GetAvailableExams_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::schedule_message>* ClientServerCommunication::Stub::AsyncGetAvailableExamsRaw(::grpc::ClientContext* context, const ::exam_message& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::schedule_message>::Create(channel_.get(), cq, rpcmethod_GetAvailableExams_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::schedule_message>* ClientServerCommunication::Stub::PrepareAsyncGetAvailableExamsRaw(::grpc::ClientContext* context, const ::exam_message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::schedule_message>::Create(channel_.get(), cq, rpcmethod_GetAvailableExams_, context, request, false, nullptr);
}

::grpc::ClientReader< ::schedule_message>* ClientServerCommunication::Stub::GetAvailableProcsRaw(::grpc::ClientContext* context, const ::procedure_message& request) {
  return ::grpc::internal::ClientReaderFactory< ::schedule_message>::Create(channel_.get(), rpcmethod_GetAvailableProcs_, context, request);
}

void ClientServerCommunication::Stub::async::GetAvailableProcs(::grpc::ClientContext* context, const ::procedure_message* request, ::grpc::ClientReadReactor< ::schedule_message>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::schedule_message>::Create(stub_->channel_.get(), stub_->rpcmethod_GetAvailableProcs_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::schedule_message>* ClientServerCommunication::Stub::AsyncGetAvailableProcsRaw(::grpc::ClientContext* context, const ::procedure_message& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::schedule_message>::Create(channel_.get(), cq, rpcmethod_GetAvailableProcs_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::schedule_message>* ClientServerCommunication::Stub::PrepareAsyncGetAvailableProcsRaw(::grpc::ClientContext* context, const ::procedure_message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::schedule_message>::Create(channel_.get(), cq, rpcmethod_GetAvailableProcs_, context, request, false, nullptr);
}

::grpc::Status ClientServerCommunication::Stub::ScheduleEvent(::grpc::ClientContext* context, const ::schedule_request& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::schedule_request, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ScheduleEvent_, context, request, response);
}

void ClientServerCommunication::Stub::async::ScheduleEvent(::grpc::ClientContext* context, const ::schedule_request* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::schedule_request, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScheduleEvent_, context, request, response, std::move(f));
}

void ClientServerCommunication::Stub::async::ScheduleEvent(::grpc::ClientContext* context, const ::schedule_request* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScheduleEvent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Empty>* ClientServerCommunication::Stub::PrepareAsyncScheduleEventRaw(::grpc::ClientContext* context, const ::schedule_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Empty, ::schedule_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ScheduleEvent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Empty>* ClientServerCommunication::Stub::AsyncScheduleEventRaw(::grpc::ClientContext* context, const ::schedule_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncScheduleEventRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::med_event_message>* ClientServerCommunication::Stub::GetReferalsRaw(::grpc::ClientContext* context, const ::patient_message& request) {
  return ::grpc::internal::ClientReaderFactory< ::med_event_message>::Create(channel_.get(), rpcmethod_GetReferals_, context, request);
}

void ClientServerCommunication::Stub::async::GetReferals(::grpc::ClientContext* context, const ::patient_message* request, ::grpc::ClientReadReactor< ::med_event_message>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::med_event_message>::Create(stub_->channel_.get(), stub_->rpcmethod_GetReferals_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::med_event_message>* ClientServerCommunication::Stub::AsyncGetReferalsRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::med_event_message>::Create(channel_.get(), cq, rpcmethod_GetReferals_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::med_event_message>* ClientServerCommunication::Stub::PrepareAsyncGetReferalsRaw(::grpc::ClientContext* context, const ::patient_message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::med_event_message>::Create(channel_.get(), cq, rpcmethod_GetReferals_, context, request, false, nullptr);
}

::grpc::ClientReader< ::account_message>* ClientServerCommunication::Stub::GetDoctorsRaw(::grpc::ClientContext* context, const ::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::account_message>::Create(channel_.get(), rpcmethod_GetDoctors_, context, request);
}

void ClientServerCommunication::Stub::async::GetDoctors(::grpc::ClientContext* context, const ::Empty* request, ::grpc::ClientReadReactor< ::account_message>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::account_message>::Create(stub_->channel_.get(), stub_->rpcmethod_GetDoctors_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::account_message>* ClientServerCommunication::Stub::AsyncGetDoctorsRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::account_message>::Create(channel_.get(), cq, rpcmethod_GetDoctors_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::account_message>* ClientServerCommunication::Stub::PrepareAsyncGetDoctorsRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::account_message>::Create(channel_.get(), cq, rpcmethod_GetDoctors_, context, request, false, nullptr);
}

::grpc::ClientReader< ::schedule_message>* ClientServerCommunication::Stub::GetSchedulesRaw(::grpc::ClientContext* context, const ::account_message& request) {
  return ::grpc::internal::ClientReaderFactory< ::schedule_message>::Create(channel_.get(), rpcmethod_GetSchedules_, context, request);
}

void ClientServerCommunication::Stub::async::GetSchedules(::grpc::ClientContext* context, const ::account_message* request, ::grpc::ClientReadReactor< ::schedule_message>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::schedule_message>::Create(stub_->channel_.get(), stub_->rpcmethod_GetSchedules_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::schedule_message>* ClientServerCommunication::Stub::AsyncGetSchedulesRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::schedule_message>::Create(channel_.get(), cq, rpcmethod_GetSchedules_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::schedule_message>* ClientServerCommunication::Stub::PrepareAsyncGetSchedulesRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::schedule_message>::Create(channel_.get(), cq, rpcmethod_GetSchedules_, context, request, false, nullptr);
}

::grpc::Status ClientServerCommunication::Stub::AddAccount(::grpc::ClientContext* context, const ::add_account_msg& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::add_account_msg, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddAccount_, context, request, response);
}

void ClientServerCommunication::Stub::async::AddAccount(::grpc::ClientContext* context, const ::add_account_msg* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::add_account_msg, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddAccount_, context, request, response, std::move(f));
}

void ClientServerCommunication::Stub::async::AddAccount(::grpc::ClientContext* context, const ::add_account_msg* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Empty>* ClientServerCommunication::Stub::PrepareAsyncAddAccountRaw(::grpc::ClientContext* context, const ::add_account_msg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Empty, ::add_account_msg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Empty>* ClientServerCommunication::Stub::AsyncAddAccountRaw(::grpc::ClientContext* context, const ::add_account_msg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientServerCommunication::Stub::ResetPassword(::grpc::ClientContext* context, const ::account_message& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::account_message, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResetPassword_, context, request, response);
}

void ClientServerCommunication::Stub::async::ResetPassword(::grpc::ClientContext* context, const ::account_message* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::account_message, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetPassword_, context, request, response, std::move(f));
}

void ClientServerCommunication::Stub::async::ResetPassword(::grpc::ClientContext* context, const ::account_message* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetPassword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Empty>* ClientServerCommunication::Stub::PrepareAsyncResetPasswordRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Empty, ::account_message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResetPassword_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Empty>* ClientServerCommunication::Stub::AsyncResetPasswordRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResetPasswordRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientServerCommunication::Stub::DeleteAccount(::grpc::ClientContext* context, const ::account_message& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::account_message, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteAccount_, context, request, response);
}

void ClientServerCommunication::Stub::async::DeleteAccount(::grpc::ClientContext* context, const ::account_message* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::account_message, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteAccount_, context, request, response, std::move(f));
}

void ClientServerCommunication::Stub::async::DeleteAccount(::grpc::ClientContext* context, const ::account_message* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Empty>* ClientServerCommunication::Stub::PrepareAsyncDeleteAccountRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Empty, ::account_message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Empty>* ClientServerCommunication::Stub::AsyncDeleteAccountRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientServerCommunication::Stub::AddSchedule(::grpc::ClientContext* context, const ::schedule_message& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::schedule_message, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddSchedule_, context, request, response);
}

void ClientServerCommunication::Stub::async::AddSchedule(::grpc::ClientContext* context, const ::schedule_message* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::schedule_message, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddSchedule_, context, request, response, std::move(f));
}

void ClientServerCommunication::Stub::async::AddSchedule(::grpc::ClientContext* context, const ::schedule_message* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddSchedule_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Empty>* ClientServerCommunication::Stub::PrepareAsyncAddScheduleRaw(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Empty, ::schedule_message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddSchedule_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Empty>* ClientServerCommunication::Stub::AsyncAddScheduleRaw(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddScheduleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientServerCommunication::Stub::DeleteSchedule(::grpc::ClientContext* context, const ::schedule_message& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::schedule_message, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteSchedule_, context, request, response);
}

void ClientServerCommunication::Stub::async::DeleteSchedule(::grpc::ClientContext* context, const ::schedule_message* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::schedule_message, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSchedule_, context, request, response, std::move(f));
}

void ClientServerCommunication::Stub::async::DeleteSchedule(::grpc::ClientContext* context, const ::schedule_message* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSchedule_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Empty>* ClientServerCommunication::Stub::PrepareAsyncDeleteScheduleRaw(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Empty, ::schedule_message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteSchedule_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Empty>* ClientServerCommunication::Stub::AsyncDeleteScheduleRaw(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteScheduleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::account_message>* ClientServerCommunication::Stub::GetAccountsRaw(::grpc::ClientContext* context, const ::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::account_message>::Create(channel_.get(), rpcmethod_GetAccounts_, context, request);
}

void ClientServerCommunication::Stub::async::GetAccounts(::grpc::ClientContext* context, const ::Empty* request, ::grpc::ClientReadReactor< ::account_message>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::account_message>::Create(stub_->channel_.get(), stub_->rpcmethod_GetAccounts_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::account_message>* ClientServerCommunication::Stub::AsyncGetAccountsRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::account_message>::Create(channel_.get(), cq, rpcmethod_GetAccounts_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::account_message>* ClientServerCommunication::Stub::PrepareAsyncGetAccountsRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::account_message>::Create(channel_.get(), cq, rpcmethod_GetAccounts_, context, request, false, nullptr);
}

::grpc::ClientReader< ::med_event_message>* ClientServerCommunication::Stub::GetPatientsHistoryRaw(::grpc::ClientContext* context, const ::account_message& request) {
  return ::grpc::internal::ClientReaderFactory< ::med_event_message>::Create(channel_.get(), rpcmethod_GetPatientsHistory_, context, request);
}

void ClientServerCommunication::Stub::async::GetPatientsHistory(::grpc::ClientContext* context, const ::account_message* request, ::grpc::ClientReadReactor< ::med_event_message>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::med_event_message>::Create(stub_->channel_.get(), stub_->rpcmethod_GetPatientsHistory_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::med_event_message>* ClientServerCommunication::Stub::AsyncGetPatientsHistoryRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::med_event_message>::Create(channel_.get(), cq, rpcmethod_GetPatientsHistory_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::med_event_message>* ClientServerCommunication::Stub::PrepareAsyncGetPatientsHistoryRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::med_event_message>::Create(channel_.get(), cq, rpcmethod_GetPatientsHistory_, context, request, false, nullptr);
}

::grpc::Status ClientServerCommunication::Stub::GetPatientsEvent(::grpc::ClientContext* context, const ::med_event_message& request, ::event_response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::med_event_message, ::event_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPatientsEvent_, context, request, response);
}

void ClientServerCommunication::Stub::async::GetPatientsEvent(::grpc::ClientContext* context, const ::med_event_message* request, ::event_response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::med_event_message, ::event_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPatientsEvent_, context, request, response, std::move(f));
}

void ClientServerCommunication::Stub::async::GetPatientsEvent(::grpc::ClientContext* context, const ::med_event_message* request, ::event_response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPatientsEvent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::event_response>* ClientServerCommunication::Stub::PrepareAsyncGetPatientsEventRaw(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::event_response, ::med_event_message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPatientsEvent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::event_response>* ClientServerCommunication::Stub::AsyncGetPatientsEventRaw(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPatientsEventRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::med_event_message>* ClientServerCommunication::Stub::GetPatientsEventsRaw(::grpc::ClientContext* context, const ::account_message& request) {
  return ::grpc::internal::ClientReaderFactory< ::med_event_message>::Create(channel_.get(), rpcmethod_GetPatientsEvents_, context, request);
}

void ClientServerCommunication::Stub::async::GetPatientsEvents(::grpc::ClientContext* context, const ::account_message* request, ::grpc::ClientReadReactor< ::med_event_message>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::med_event_message>::Create(stub_->channel_.get(), stub_->rpcmethod_GetPatientsEvents_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::med_event_message>* ClientServerCommunication::Stub::AsyncGetPatientsEventsRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::med_event_message>::Create(channel_.get(), cq, rpcmethod_GetPatientsEvents_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::med_event_message>* ClientServerCommunication::Stub::PrepareAsyncGetPatientsEventsRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::med_event_message>::Create(channel_.get(), cq, rpcmethod_GetPatientsEvents_, context, request, false, nullptr);
}

::grpc::ClientReader< ::prescribtion_message>* ClientServerCommunication::Stub::GetPatientPrescribtionRaw(::grpc::ClientContext* context, const ::account_message& request) {
  return ::grpc::internal::ClientReaderFactory< ::prescribtion_message>::Create(channel_.get(), rpcmethod_GetPatientPrescribtion_, context, request);
}

void ClientServerCommunication::Stub::async::GetPatientPrescribtion(::grpc::ClientContext* context, const ::account_message* request, ::grpc::ClientReadReactor< ::prescribtion_message>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::prescribtion_message>::Create(stub_->channel_.get(), stub_->rpcmethod_GetPatientPrescribtion_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::prescribtion_message>* ClientServerCommunication::Stub::AsyncGetPatientPrescribtionRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::prescribtion_message>::Create(channel_.get(), cq, rpcmethod_GetPatientPrescribtion_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::prescribtion_message>* ClientServerCommunication::Stub::PrepareAsyncGetPatientPrescribtionRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::prescribtion_message>::Create(channel_.get(), cq, rpcmethod_GetPatientPrescribtion_, context, request, false, nullptr);
}

::grpc::Status ClientServerCommunication::Stub::GetExamResults(::grpc::ClientContext* context, const ::exam_message& request, ::result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::exam_message, ::result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetExamResults_, context, request, response);
}

void ClientServerCommunication::Stub::async::GetExamResults(::grpc::ClientContext* context, const ::exam_message* request, ::result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::exam_message, ::result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExamResults_, context, request, response, std::move(f));
}

void ClientServerCommunication::Stub::async::GetExamResults(::grpc::ClientContext* context, const ::exam_message* request, ::result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExamResults_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::result>* ClientServerCommunication::Stub::PrepareAsyncGetExamResultsRaw(::grpc::ClientContext* context, const ::exam_message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::result, ::exam_message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetExamResults_, context, request);
}

::grpc::ClientAsyncResponseReader< ::result>* ClientServerCommunication::Stub::AsyncGetExamResultsRaw(::grpc::ClientContext* context, const ::exam_message& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetExamResultsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::schedule_message>* ClientServerCommunication::Stub::GetDoctorSchedulesRaw(::grpc::ClientContext* context, const ::account_message& request) {
  return ::grpc::internal::ClientReaderFactory< ::schedule_message>::Create(channel_.get(), rpcmethod_GetDoctorSchedules_, context, request);
}

void ClientServerCommunication::Stub::async::GetDoctorSchedules(::grpc::ClientContext* context, const ::account_message* request, ::grpc::ClientReadReactor< ::schedule_message>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::schedule_message>::Create(stub_->channel_.get(), stub_->rpcmethod_GetDoctorSchedules_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::schedule_message>* ClientServerCommunication::Stub::AsyncGetDoctorSchedulesRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::schedule_message>::Create(channel_.get(), cq, rpcmethod_GetDoctorSchedules_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::schedule_message>* ClientServerCommunication::Stub::PrepareAsyncGetDoctorSchedulesRaw(::grpc::ClientContext* context, const ::account_message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::schedule_message>::Create(channel_.get(), cq, rpcmethod_GetDoctorSchedules_, context, request, false, nullptr);
}

::grpc::ClientReader< ::med_event_message>* ClientServerCommunication::Stub::GetScheduledEventsRaw(::grpc::ClientContext* context, const ::schedule_message& request) {
  return ::grpc::internal::ClientReaderFactory< ::med_event_message>::Create(channel_.get(), rpcmethod_GetScheduledEvents_, context, request);
}

void ClientServerCommunication::Stub::async::GetScheduledEvents(::grpc::ClientContext* context, const ::schedule_message* request, ::grpc::ClientReadReactor< ::med_event_message>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::med_event_message>::Create(stub_->channel_.get(), stub_->rpcmethod_GetScheduledEvents_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::med_event_message>* ClientServerCommunication::Stub::AsyncGetScheduledEventsRaw(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::med_event_message>::Create(channel_.get(), cq, rpcmethod_GetScheduledEvents_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::med_event_message>* ClientServerCommunication::Stub::PrepareAsyncGetScheduledEventsRaw(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::med_event_message>::Create(channel_.get(), cq, rpcmethod_GetScheduledEvents_, context, request, false, nullptr);
}

::grpc::ClientReader< ::patient_message>* ClientServerCommunication::Stub::GetScheduledPatientsRaw(::grpc::ClientContext* context, const ::schedule_message& request) {
  return ::grpc::internal::ClientReaderFactory< ::patient_message>::Create(channel_.get(), rpcmethod_GetScheduledPatients_, context, request);
}

void ClientServerCommunication::Stub::async::GetScheduledPatients(::grpc::ClientContext* context, const ::schedule_message* request, ::grpc::ClientReadReactor< ::patient_message>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::patient_message>::Create(stub_->channel_.get(), stub_->rpcmethod_GetScheduledPatients_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::patient_message>* ClientServerCommunication::Stub::AsyncGetScheduledPatientsRaw(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::patient_message>::Create(channel_.get(), cq, rpcmethod_GetScheduledPatients_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::patient_message>* ClientServerCommunication::Stub::PrepareAsyncGetScheduledPatientsRaw(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::patient_message>::Create(channel_.get(), cq, rpcmethod_GetScheduledPatients_, context, request, false, nullptr);
}

::grpc::Status ClientServerCommunication::Stub::NewReferal(::grpc::ClientContext* context, const ::med_event_message& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::med_event_message, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NewReferal_, context, request, response);
}

void ClientServerCommunication::Stub::async::NewReferal(::grpc::ClientContext* context, const ::med_event_message* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::med_event_message, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NewReferal_, context, request, response, std::move(f));
}

void ClientServerCommunication::Stub::async::NewReferal(::grpc::ClientContext* context, const ::med_event_message* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NewReferal_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Empty>* ClientServerCommunication::Stub::PrepareAsyncNewReferalRaw(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Empty, ::med_event_message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NewReferal_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Empty>* ClientServerCommunication::Stub::AsyncNewReferalRaw(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNewReferalRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientServerCommunication::Stub::NewPrescribtion(::grpc::ClientContext* context, const ::prescribtion_message& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prescribtion_message, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NewPrescribtion_, context, request, response);
}

void ClientServerCommunication::Stub::async::NewPrescribtion(::grpc::ClientContext* context, const ::prescribtion_message* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prescribtion_message, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NewPrescribtion_, context, request, response, std::move(f));
}

void ClientServerCommunication::Stub::async::NewPrescribtion(::grpc::ClientContext* context, const ::prescribtion_message* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NewPrescribtion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Empty>* ClientServerCommunication::Stub::PrepareAsyncNewPrescribtionRaw(::grpc::ClientContext* context, const ::prescribtion_message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Empty, ::prescribtion_message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NewPrescribtion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Empty>* ClientServerCommunication::Stub::AsyncNewPrescribtionRaw(::grpc::ClientContext* context, const ::prescribtion_message& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNewPrescribtionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientServerCommunication::Stub::EventDone(::grpc::ClientContext* context, const ::med_event_message& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::med_event_message, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EventDone_, context, request, response);
}

void ClientServerCommunication::Stub::async::EventDone(::grpc::ClientContext* context, const ::med_event_message* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::med_event_message, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EventDone_, context, request, response, std::move(f));
}

void ClientServerCommunication::Stub::async::EventDone(::grpc::ClientContext* context, const ::med_event_message* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EventDone_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Empty>* ClientServerCommunication::Stub::PrepareAsyncEventDoneRaw(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Empty, ::med_event_message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EventDone_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Empty>* ClientServerCommunication::Stub::AsyncEventDoneRaw(::grpc::ClientContext* context, const ::med_event_message& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEventDoneRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientServerCommunication::Stub::ScheduleDone(::grpc::ClientContext* context, const ::schedule_message& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::schedule_message, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ScheduleDone_, context, request, response);
}

void ClientServerCommunication::Stub::async::ScheduleDone(::grpc::ClientContext* context, const ::schedule_message* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::schedule_message, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScheduleDone_, context, request, response, std::move(f));
}

void ClientServerCommunication::Stub::async::ScheduleDone(::grpc::ClientContext* context, const ::schedule_message* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScheduleDone_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Empty>* ClientServerCommunication::Stub::PrepareAsyncScheduleDoneRaw(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Empty, ::schedule_message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ScheduleDone_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Empty>* ClientServerCommunication::Stub::AsyncScheduleDoneRaw(::grpc::ClientContext* context, const ::schedule_message& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncScheduleDoneRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientServerCommunication::Stub::AddResult(::grpc::ClientContext* context, const ::result& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::result, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddResult_, context, request, response);
}

void ClientServerCommunication::Stub::async::AddResult(::grpc::ClientContext* context, const ::result* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::result, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddResult_, context, request, response, std::move(f));
}

void ClientServerCommunication::Stub::async::AddResult(::grpc::ClientContext* context, const ::result* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddResult_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Empty>* ClientServerCommunication::Stub::PrepareAsyncAddResultRaw(::grpc::ClientContext* context, const ::result& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Empty, ::result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddResult_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Empty>* ClientServerCommunication::Stub::AsyncAddResultRaw(::grpc::ClientContext* context, const ::result& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddResultRaw(context, request, cq);
  result->StartCall();
  return result;
}

ClientServerCommunication::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServerCommunication_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientServerCommunication::Service, ::account_request, ::account_message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientServerCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::account_request* req,
             ::account_message* resp) {
               return service->SearchForAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServerCommunication_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientServerCommunication::Service, ::patient_message, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientServerCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::patient_message* req,
             ::Empty* resp) {
               return service->UpdatePatientData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServerCommunication_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientServerCommunication::Service, ::patient_message, ::patient_message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientServerCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::patient_message* req,
             ::patient_message* resp) {
               return service->SearchForPatient(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServerCommunication_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ClientServerCommunication::Service, ::patient_message, ::patient_message>(
          [](ClientServerCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::patient_message* req,
             ::grpc::ServerWriter<::patient_message>* writer) {
               return service->SearchForPatients(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServerCommunication_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ClientServerCommunication::Service, ::patient_message, ::med_event_message>(
          [](ClientServerCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::patient_message* req,
             ::grpc::ServerWriter<::med_event_message>* writer) {
               return service->GetNextVisits(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServerCommunication_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ClientServerCommunication::Service, ::patient_message, ::prescribtion_message>(
          [](ClientServerCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::patient_message* req,
             ::grpc::ServerWriter<::prescribtion_message>* writer) {
               return service->GetPrescribtions(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServerCommunication_method_names[6],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ClientServerCommunication::Service, ::patient_message, ::exam_message>(
          [](ClientServerCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::patient_message* req,
             ::grpc::ServerWriter<::exam_message>* writer) {
               return service->GetExam(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServerCommunication_method_names[7],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ClientServerCommunication::Service, ::patient_message, ::procedure_message>(
          [](ClientServerCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::patient_message* req,
             ::grpc::ServerWriter<::procedure_message>* writer) {
               return service->GetProcedure(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServerCommunication_method_names[8],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ClientServerCommunication::Service, ::med_event_message, ::schedule_message>(
          [](ClientServerCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::med_event_message* req,
             ::grpc::ServerWriter<::schedule_message>* writer) {
               return service->GetAvailableVisits(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServerCommunication_method_names[9],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ClientServerCommunication::Service, ::exam_message, ::schedule_message>(
          [](ClientServerCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::exam_message* req,
             ::grpc::ServerWriter<::schedule_message>* writer) {
               return service->GetAvailableExams(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServerCommunication_method_names[10],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ClientServerCommunication::Service, ::procedure_message, ::schedule_message>(
          [](ClientServerCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::procedure_message* req,
             ::grpc::ServerWriter<::schedule_message>* writer) {
               return service->GetAvailableProcs(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServerCommunication_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientServerCommunication::Service, ::schedule_request, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientServerCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::schedule_request* req,
             ::Empty* resp) {
               return service->ScheduleEvent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServerCommunication_method_names[12],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ClientServerCommunication::Service, ::patient_message, ::med_event_message>(
          [](ClientServerCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::patient_message* req,
             ::grpc::ServerWriter<::med_event_message>* writer) {
               return service->GetReferals(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServerCommunication_method_names[13],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ClientServerCommunication::Service, ::Empty, ::account_message>(
          [](ClientServerCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Empty* req,
             ::grpc::ServerWriter<::account_message>* writer) {
               return service->GetDoctors(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServerCommunication_method_names[14],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ClientServerCommunication::Service, ::account_message, ::schedule_message>(
          [](ClientServerCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::account_message* req,
             ::grpc::ServerWriter<::schedule_message>* writer) {
               return service->GetSchedules(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServerCommunication_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientServerCommunication::Service, ::add_account_msg, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientServerCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::add_account_msg* req,
             ::Empty* resp) {
               return service->AddAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServerCommunication_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientServerCommunication::Service, ::account_message, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientServerCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::account_message* req,
             ::Empty* resp) {
               return service->ResetPassword(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServerCommunication_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientServerCommunication::Service, ::account_message, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientServerCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::account_message* req,
             ::Empty* resp) {
               return service->DeleteAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServerCommunication_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientServerCommunication::Service, ::schedule_message, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientServerCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::schedule_message* req,
             ::Empty* resp) {
               return service->AddSchedule(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServerCommunication_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientServerCommunication::Service, ::schedule_message, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientServerCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::schedule_message* req,
             ::Empty* resp) {
               return service->DeleteSchedule(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServerCommunication_method_names[20],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ClientServerCommunication::Service, ::Empty, ::account_message>(
          [](ClientServerCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Empty* req,
             ::grpc::ServerWriter<::account_message>* writer) {
               return service->GetAccounts(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServerCommunication_method_names[21],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ClientServerCommunication::Service, ::account_message, ::med_event_message>(
          [](ClientServerCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::account_message* req,
             ::grpc::ServerWriter<::med_event_message>* writer) {
               return service->GetPatientsHistory(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServerCommunication_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientServerCommunication::Service, ::med_event_message, ::event_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientServerCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::med_event_message* req,
             ::event_response* resp) {
               return service->GetPatientsEvent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServerCommunication_method_names[23],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ClientServerCommunication::Service, ::account_message, ::med_event_message>(
          [](ClientServerCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::account_message* req,
             ::grpc::ServerWriter<::med_event_message>* writer) {
               return service->GetPatientsEvents(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServerCommunication_method_names[24],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ClientServerCommunication::Service, ::account_message, ::prescribtion_message>(
          [](ClientServerCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::account_message* req,
             ::grpc::ServerWriter<::prescribtion_message>* writer) {
               return service->GetPatientPrescribtion(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServerCommunication_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientServerCommunication::Service, ::exam_message, ::result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientServerCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::exam_message* req,
             ::result* resp) {
               return service->GetExamResults(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServerCommunication_method_names[26],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ClientServerCommunication::Service, ::account_message, ::schedule_message>(
          [](ClientServerCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::account_message* req,
             ::grpc::ServerWriter<::schedule_message>* writer) {
               return service->GetDoctorSchedules(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServerCommunication_method_names[27],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ClientServerCommunication::Service, ::schedule_message, ::med_event_message>(
          [](ClientServerCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::schedule_message* req,
             ::grpc::ServerWriter<::med_event_message>* writer) {
               return service->GetScheduledEvents(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServerCommunication_method_names[28],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ClientServerCommunication::Service, ::schedule_message, ::patient_message>(
          [](ClientServerCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::schedule_message* req,
             ::grpc::ServerWriter<::patient_message>* writer) {
               return service->GetScheduledPatients(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServerCommunication_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientServerCommunication::Service, ::med_event_message, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientServerCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::med_event_message* req,
             ::Empty* resp) {
               return service->NewReferal(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServerCommunication_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientServerCommunication::Service, ::prescribtion_message, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientServerCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prescribtion_message* req,
             ::Empty* resp) {
               return service->NewPrescribtion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServerCommunication_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientServerCommunication::Service, ::med_event_message, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientServerCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::med_event_message* req,
             ::Empty* resp) {
               return service->EventDone(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServerCommunication_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientServerCommunication::Service, ::schedule_message, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientServerCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::schedule_message* req,
             ::Empty* resp) {
               return service->ScheduleDone(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServerCommunication_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientServerCommunication::Service, ::result, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientServerCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::result* req,
             ::Empty* resp) {
               return service->AddResult(ctx, req, resp);
             }, this)));
}

ClientServerCommunication::Service::~Service() {
}

::grpc::Status ClientServerCommunication::Service::SearchForAccount(::grpc::ServerContext* context, const ::account_request* request, ::account_message* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientServerCommunication::Service::UpdatePatientData(::grpc::ServerContext* context, const ::patient_message* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientServerCommunication::Service::SearchForPatient(::grpc::ServerContext* context, const ::patient_message* request, ::patient_message* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientServerCommunication::Service::SearchForPatients(::grpc::ServerContext* context, const ::patient_message* request, ::grpc::ServerWriter< ::patient_message>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientServerCommunication::Service::GetNextVisits(::grpc::ServerContext* context, const ::patient_message* request, ::grpc::ServerWriter< ::med_event_message>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientServerCommunication::Service::GetPrescribtions(::grpc::ServerContext* context, const ::patient_message* request, ::grpc::ServerWriter< ::prescribtion_message>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientServerCommunication::Service::GetExam(::grpc::ServerContext* context, const ::patient_message* request, ::grpc::ServerWriter< ::exam_message>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientServerCommunication::Service::GetProcedure(::grpc::ServerContext* context, const ::patient_message* request, ::grpc::ServerWriter< ::procedure_message>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientServerCommunication::Service::GetAvailableVisits(::grpc::ServerContext* context, const ::med_event_message* request, ::grpc::ServerWriter< ::schedule_message>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientServerCommunication::Service::GetAvailableExams(::grpc::ServerContext* context, const ::exam_message* request, ::grpc::ServerWriter< ::schedule_message>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientServerCommunication::Service::GetAvailableProcs(::grpc::ServerContext* context, const ::procedure_message* request, ::grpc::ServerWriter< ::schedule_message>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientServerCommunication::Service::ScheduleEvent(::grpc::ServerContext* context, const ::schedule_request* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientServerCommunication::Service::GetReferals(::grpc::ServerContext* context, const ::patient_message* request, ::grpc::ServerWriter< ::med_event_message>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientServerCommunication::Service::GetDoctors(::grpc::ServerContext* context, const ::Empty* request, ::grpc::ServerWriter< ::account_message>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientServerCommunication::Service::GetSchedules(::grpc::ServerContext* context, const ::account_message* request, ::grpc::ServerWriter< ::schedule_message>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientServerCommunication::Service::AddAccount(::grpc::ServerContext* context, const ::add_account_msg* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientServerCommunication::Service::ResetPassword(::grpc::ServerContext* context, const ::account_message* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientServerCommunication::Service::DeleteAccount(::grpc::ServerContext* context, const ::account_message* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientServerCommunication::Service::AddSchedule(::grpc::ServerContext* context, const ::schedule_message* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientServerCommunication::Service::DeleteSchedule(::grpc::ServerContext* context, const ::schedule_message* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientServerCommunication::Service::GetAccounts(::grpc::ServerContext* context, const ::Empty* request, ::grpc::ServerWriter< ::account_message>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientServerCommunication::Service::GetPatientsHistory(::grpc::ServerContext* context, const ::account_message* request, ::grpc::ServerWriter< ::med_event_message>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientServerCommunication::Service::GetPatientsEvent(::grpc::ServerContext* context, const ::med_event_message* request, ::event_response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientServerCommunication::Service::GetPatientsEvents(::grpc::ServerContext* context, const ::account_message* request, ::grpc::ServerWriter< ::med_event_message>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientServerCommunication::Service::GetPatientPrescribtion(::grpc::ServerContext* context, const ::account_message* request, ::grpc::ServerWriter< ::prescribtion_message>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientServerCommunication::Service::GetExamResults(::grpc::ServerContext* context, const ::exam_message* request, ::result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientServerCommunication::Service::GetDoctorSchedules(::grpc::ServerContext* context, const ::account_message* request, ::grpc::ServerWriter< ::schedule_message>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientServerCommunication::Service::GetScheduledEvents(::grpc::ServerContext* context, const ::schedule_message* request, ::grpc::ServerWriter< ::med_event_message>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientServerCommunication::Service::GetScheduledPatients(::grpc::ServerContext* context, const ::schedule_message* request, ::grpc::ServerWriter< ::patient_message>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientServerCommunication::Service::NewReferal(::grpc::ServerContext* context, const ::med_event_message* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientServerCommunication::Service::NewPrescribtion(::grpc::ServerContext* context, const ::prescribtion_message* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientServerCommunication::Service::EventDone(::grpc::ServerContext* context, const ::med_event_message* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientServerCommunication::Service::ScheduleDone(::grpc::ServerContext* context, const ::schedule_message* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientServerCommunication::Service::AddResult(::grpc::ServerContext* context, const ::result* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


